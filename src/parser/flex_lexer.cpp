#line 2 "flex_lexer.cpp"

#line 4 "flex_lexer.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* An opaque pointer. */
#ifndef YY_TYPEDEF_YY_SCANNER_T
#define YY_TYPEDEF_YY_SCANNER_T
typedef void* yyscan_t;
#endif

/* For convenience, these vars (plus the bison vars far below)
   are macros in the reentrant scanner. */
#define yyin yyg->yyin_r
#define yyout yyg->yyout_r
#define yyextra yyg->yyextra_r
#define yyleng yyg->yyleng_r
#define yytext yyg->yytext_r
#define yylineno (YY_CURRENT_BUFFER_LVALUE->yy_bs_lineno)
#define yycolumn (YY_CURRENT_BUFFER_LVALUE->yy_bs_column)
#define yy_flex_debug yyg->yy_flex_debug_r

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yyg->yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yyg->yy_start - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE hsql_restart(yyin ,yyscanner )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = yyg->yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yyg->yy_c_buf_p = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, yyg->yytext_ptr , yyscanner )

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via hsql_restart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( yyg->yy_buffer_stack \
                          ? yyg->yy_buffer_stack[yyg->yy_buffer_stack_top] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE yyg->yy_buffer_stack[yyg->yy_buffer_stack_top]

void hsql_restart (FILE *input_file ,yyscan_t yyscanner );
void hsql__switch_to_buffer (YY_BUFFER_STATE new_buffer ,yyscan_t yyscanner );
YY_BUFFER_STATE hsql__create_buffer (FILE *file,int size ,yyscan_t yyscanner );
void hsql__delete_buffer (YY_BUFFER_STATE b ,yyscan_t yyscanner );
void hsql__flush_buffer (YY_BUFFER_STATE b ,yyscan_t yyscanner );
void hsql_push_buffer_state (YY_BUFFER_STATE new_buffer ,yyscan_t yyscanner );
void hsql_pop_buffer_state (yyscan_t yyscanner );

static void hsql_ensure_buffer_stack (yyscan_t yyscanner );
static void hsql__load_buffer_state (yyscan_t yyscanner );
static void hsql__init_buffer (YY_BUFFER_STATE b,FILE *file ,yyscan_t yyscanner );

#define YY_FLUSH_BUFFER hsql__flush_buffer(YY_CURRENT_BUFFER ,yyscanner)

YY_BUFFER_STATE hsql__scan_buffer (char *base,yy_size_t size ,yyscan_t yyscanner );
YY_BUFFER_STATE hsql__scan_string (yyconst char *yy_str ,yyscan_t yyscanner );
YY_BUFFER_STATE hsql__scan_bytes (yyconst char *bytes,int len ,yyscan_t yyscanner );

void *hsql_alloc (yy_size_t ,yyscan_t yyscanner );
void *hsql_realloc (void *,yy_size_t ,yyscan_t yyscanner );
void hsql_free (void * ,yyscan_t yyscanner );

#define yy_new_buffer hsql__create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        hsql_ensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            hsql__create_buffer(yyin,YY_BUF_SIZE ,yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        hsql_ensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            hsql__create_buffer(yyin,YY_BUF_SIZE ,yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define hsql_wrap(n) 1
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

typedef int yy_state_type;

#define yytext_ptr yytext_r

static yy_state_type yy_get_previous_state (yyscan_t yyscanner );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  ,yyscan_t yyscanner);
static int yy_get_next_buffer (yyscan_t yyscanner );
static void yy_fatal_error (yyconst char msg[] ,yyscan_t yyscanner );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yyg->yytext_ptr = yy_bp; \
	yyleng = (size_t) (yy_cp - yy_bp); \
	yyg->yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yyg->yy_c_buf_p = yy_cp;

#define YY_NUM_RULES 133
#define YY_END_OF_BUFFER 134
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[934] =
    {   0,
        0,    0,    2,    2,  134,  132,    4,    4,  132,  125,
      132,  125,  125,  128,  125,  125,  130,  130,  130,  130,
      130,  130,  130,  130,  130,  130,  130,  130,  130,  130,
      130,  130,  130,  130,  130,  130,  130,  130,  130,    2,
        2,    3,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    4,    0,    0,  131,    1,  127,  126,
      128,  123,  122,  124,  130,  130,  130,  130,  130,  107,
      130,  108,  130,  130,  130,  130,  130,  130,  130,  130,

      130,  130,  130,  130,  130,  130,  130,  130,  130,  130,
      130,  130,  109,  130,  110,  111,  130,  130,  130,  130,
      130,  130,  130,  130,  130,  130,  130,  112,  113,  114,
      130,  130,  130,  130,  130,  130,  130,  130,  130,  130,
      130,  130,  130,  130,  130,  115,  130,  130,  130,  130,
      130,  130,  130,  130,    2,    2,    2,    2,    2,    1,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,

        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,  129,  126,   94,  130,
       95,  130,  130,   96,   97,  130,  130,  130,  130,  130,
      130,  130,  130,  130,   98,  130,  130,  130,  130,  130,
      130,  130,  130,  130,  130,  130,  130,  130,  130,  130,
       99,  130,  130,  130,  130,  130,  130,  130,  130,  130,
      130,  130,  130,  100,  130,  130,  101,  130,  130,  130,
      130,  130,  130,  130,  130,  102,  130,  130,  103,  130,

      130,  130,  130,  130,  130,  130,  130,  130,  130,  130,
      104,  130,  130,  130,  130,  105,  130,  130,  130,  130,
      106,  130,  130,  130,  130,  121,  130,  130,  130,  130,
      130,  130,  130,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,

        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
      130,  130,  130,  130,  130,   72,  130,  120,  130,  130,
      130,  130,  130,   73,  130,  130,  130,  130,   74,  130,
      130,  130,   75,  130,  130,  130,  130,  130,   76,   77,
       78,  130,  130,   79,  130,   80,  130,  130,  130,  130,
      130,  130,   81,  130,   82,   83,   84,  130,   85,  130,
      130,  130,  130,   86,  130,  130,  130,  130,  130,   87,
       88,  130,  130,  130,  130,  130,  130,  130,   89,  130,

      130,  130,  130,   90,   91,  130,  130,  130,  130,  130,
      130,  130,  130,  130,   92,  130,  130,   93,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,

        2,    2,    2,    2,    2,    2,   54,   55,  130,  130,
      130,  130,  130,  130,  130,   56,  130,  130,  130,  130,
       57,  130,  130,  130,  130,  130,  130,  130,  130,  130,
       58,  130,  130,  130,   59,   60,  130,  130,  130,  130,
       61,   62,   63,   64,  130,  130,  130,   65,   66,  130,
      130,  130,  130,  130,   67,  130,  130,  130,  130,   68,
      130,  130,  130,  130,   69,  130,  130,  130,   70,  130,
      130,  130,   71,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,

        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
      130,   30,  130,  130,   31,  130,   32,  130,  130,  130,
       33,   34,  130,   35,   36,   37,  130,   38,  130,   39,
       40,  130,   41,   42,  130,  130,   43,  130,  130,   44,
      130,  130,  130,   45,  130,   46,   47,   48,  130,   49,
      130,  130,  130,  130,   50,   51,   52,   53,  130,  130,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,

        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
       14,   15,   16,   17,   18,  130,  130,   19,  130,   20,
       21,   22,   23,  130,   24,  130,  130,   25,   26,  130,
       27,   28,  130,  130,  119,  130,  118,   29,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,  116,  130,   10,  130,

       11,  130,   12,  130,  130,   13,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,  117,  130,    7,  130,
        8,    9,    2,    2,    2,    2,    2,    2,    5,    6,
        2,    2,    0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    1,    4,    1,    1,    5,    1,    6,    5,
        5,    5,    5,    5,    7,    8,    5,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    5,    5,   10,
       11,   12,    5,    1,   13,   14,   15,   16,   17,   18,
       19,   20,   21,   22,   23,   24,   25,   26,   27,   28,
       29,   30,   31,   32,   33,   34,   35,   36,   37,   38,
        1,    1,    1,    5,   39,    1,   40,   41,   42,   43,

       44,   45,   46,   47,   48,   49,   50,   51,   52,   53,
       54,   55,   56,   57,   58,   59,   60,   61,   62,   63,
       64,   65,    5,    1,    5,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[66] =
    {   0,
        1,    1,    2,    3,    1,    1,    1,    1,    4,    1,
        1,    1,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4
    } ;

static yyconst flex_int16_t yy_base[941] =
    {   0,
        0,    0,   65,    0,  388, 3712,  129,  131,    0, 3712,
      362,  347,  341,  127,  126,  338,  123,  123,  175,  221,
      112,  123,  121,  142,  166,  115,  129,  172,  177,  210,
      223,  215,    0,  183,  269,  312,  232,  233,  138,    0,
      159,  162,  344,    0,  337,  305,  298,  199,  198,  291,
      369,  427,  479,  531,  257,  579,  366,  297,  627,  345,
      291,  419,  404,  679,  727,  779,  314,  433,  829,  881,
      929,  438,  467,  210,  287,  256, 3712, 3712,  250,  248,
      227, 3712, 3712, 3712,    0,  136,  171,  268,  266,  225,
      285,    0,  333,  264,  312,  278,  306,  327,  477,  385,

      359,  370,  403,  525,  402,  417,  422,  434,  435,  439,
      469,  481,    0,  466,  531,  472,  484,  481,  506,  531,
      551,  508,  523,  518,  523,  535,  547,  552,    0,  556,
      546,  562,  581,  581,  577,  582,  584,  583,  583,  581,
      600,  600,  596,  621,  623,  596,  599,  639,  634,  645,
      631,  637,  639,  636,    0,  296,  248,  241,    0,    0,
      208,  205,  338,    0,    0,    0,  661,  683,  692,  717,
      715,  733,  756,  698,  781,  773,  814,  825,  816,  853,
      981,  777,  855,  837,  889, 1031,  879,  870,  915,  924,
      927,  953,  969,  978,  811,  919, 1080,  997, 1003,  991,

     1020, 1037, 1063, 1026, 1065, 1076, 1082, 1108, 1117, 1119,
     1105, 1131, 1133, 1136, 1145, 1150, 1173, 1159, 1171, 1195,
     1184, 1199, 1207, 1208, 1216, 1225, 1248, 1238, 1253, 1270,
     1262, 1287, 1279, 1302, 1278, 1308, 3712,  192,    0,  653,
        0,  657,  679,    0,    0,  683,  676,  771,  784,  772,
      826,  850,  897,  882,    0,  945,  900,  936,  933,  987,
     1027, 1026, 1063, 1060, 1081, 1099, 1113, 1148, 1162, 1190,
        0, 1205, 1217, 1269, 1251, 1300, 1306, 1296, 1297, 1306,
     1320, 1321, 1324, 1331, 1311, 1323,    0, 1318, 1336, 1336,
     1345, 1349, 1344, 1336, 1337,    0, 1349, 1344, 1347, 1362,

     1364, 1370, 1356, 1358, 1362, 1378, 1360, 1373, 1377, 1378,
        0, 1363, 1367, 1371, 1380,    0, 1379, 1379, 1395, 1378,
        0, 1390, 1406, 1390, 1410,    0, 1398, 1394, 1413, 1397,
     1404, 1407, 1420,    0,  187, 1424, 1428, 1429, 1432, 1453,
     1441, 1454, 1457, 1465, 1462, 1466, 1495, 1498, 1506, 1507,
     1497, 1516, 1532, 1540, 1550, 1549, 1531, 1561, 1565, 1575,
     1583, 1566, 1584, 1600, 1609, 1617, 1606, 1614, 1632, 1628,
     1618, 1654, 1646, 1668, 1663, 1669, 1682, 1660, 1671, 1686,
     1694, 1708, 1703, 1700, 1717, 1722, 1734, 1726, 1740, 1756,
     1762, 1768, 1766, 1770, 1779, 1780, 1771, 1796, 1814, 1822,

     1824, 1812, 1840, 1830, 1865, 1828, 1846, 1854, 1864, 1879,
     1883, 1897, 1880, 1902, 1908, 1914, 1916, 1918, 1933, 1946,
     1937, 1952, 1951, 1967, 1970, 1991, 1982, 1981, 1992, 2004,
     1418, 1423, 1452, 1465, 1616,    0, 1662,    0, 1737, 1735,
     1759, 1811, 1881,    0, 1881, 1916, 1953, 1992,    0, 2008,
     2006, 2013,    0, 2010, 2011, 2009, 2011, 2034,    0,    0,
        0, 2039, 2025,    0, 2031,    0, 2031, 2029, 2024, 2031,
     2032, 2048,    0, 2039,    0,    0,    0, 2039,    0, 2048,
     2056, 2044, 2046,    0, 2062, 2064, 2052, 2053, 2066,    0,
        0, 2079, 2080, 2070, 2066, 2065, 2076, 2091,    0, 2090,

     2090, 2095, 2086,    0, 2083, 2094, 2101, 2091, 2088, 2112,
     2094, 2108, 2112, 2110,    0, 2098, 2115,    0, 2130, 2132,
     2128, 2133, 2129, 2134, 2151, 2138, 2182, 2183, 2184, 2186,
     2167, 2168, 2201, 2216, 2192, 2222, 2220, 2246, 2237, 2254,
     2238, 2272, 2275, 2260, 2262, 2294, 2278, 2291, 2296, 2312,
     2320, 2306, 2328, 2324, 2336, 2349, 2360, 2357, 2361, 2390,
     2366, 2378, 2382, 2391, 2394, 2400, 2416, 2424, 2426, 2434,
     2432, 2435, 2466, 2440, 2456, 2457, 2480, 2465, 2474, 2499,
     2509, 2490, 2511, 2508, 2533, 2520, 2534, 2539, 2544, 2542,
     2563, 2552, 2574, 2578, 2587, 2584, 2576, 2606, 2617, 2616,

     2608, 2627, 2622, 2640, 2638, 2641,    0,    0, 2141, 2166,
     2197, 2226, 2261, 2290, 2315,    0, 2349, 2358, 2415, 2423,
        0, 2474, 2521, 2543, 2597, 2624, 2631, 2634, 2646, 2644,
        0, 2650, 2649, 2655,    0,    0, 2656, 2672, 2662, 2673,
        0,    0,    0,    0, 2685, 2679, 2669,    0,    0, 2686,
     2677, 2678, 2692, 2689,    0, 2698, 2680, 2697, 2704, 2687,
     2689, 2689, 2696, 2710,    0, 2710, 2713, 2714,    0, 2701,
     2720, 2728,    0, 2725, 2726, 2734, 2730, 2736, 2748, 2740,
     2759, 2738, 2744, 2770, 2778, 2792, 2780, 2784, 2794, 2813,
     2803, 2808, 2832, 2838, 2834, 2842, 2837, 2843, 2866, 2878,

     2867, 2856, 2872, 2896, 2877, 2888, 2900, 2901, 2906, 2910,
     2912, 2940, 2941, 2931, 2922, 2945, 2950, 2962, 2966, 2954,
     2976, 2964, 2994, 2985, 2999, 3008, 3010, 3016, 3018, 3039,
     3044, 2995, 3034, 3050, 3052, 3053, 3068, 3078, 3087, 3069,
     2735,    0, 2780, 2802, 2804, 2817,    0, 2942, 3022, 3043,
        0,    0, 3086,    0,    0,    0, 3090,    0, 3083,    0,
        0, 3073,    0,    0, 3081, 3102,    0, 3096, 3108,    0,
     3091, 3108, 3092,    0, 3115, 3104,    0,    0, 3115,    0,
     3127, 3128, 3111, 3112,    0,    0,    0,    0, 3115, 3125,
     3136, 3137, 3138, 3141, 3146, 3162, 3152, 3177, 3178, 3175,

     3180, 3181, 3194, 3186, 3210, 3211, 3212, 3215, 3220, 3216,
     3226, 3234, 3244, 3245, 3255, 3249, 3250, 3278, 3283, 3260,
     3274, 3266, 3284, 3288, 3319, 3300, 3309, 3318, 3333, 3322,
     3328, 3354, 3337, 3343, 3362, 3368, 3371, 3372, 3373, 3376,
        0,    0,    0,    0,    0, 3143, 3148,    0, 3284,    0,
        0,    0,    0, 3334,    0, 3321, 3378,    0,    0, 3372,
        0,    0, 3381, 3389,    0, 3402,    0,    0, 3406, 3407,
     3408, 3411, 3412, 3416, 3441, 3422, 3425, 3430, 3446, 3451,
     3456, 3462, 3465, 3481, 3470, 3475, 3479, 3496, 3480, 3504,
     3505, 3529, 3513, 3514, 3515, 3519, 3403, 3432,    0, 3505,

        0, 3517,    0, 3516, 3533,    0, 3553, 3550, 3548, 3554,
     3558, 3559, 3582, 3583, 3587, 3584,    0, 3588,    0, 3575,
        0,    0, 3593, 3608, 3612, 3622, 3617, 3618,    0,    0,
     3621, 3623, 3712, 3687, 3691,  153, 3695, 3699, 3703, 3707
    } ;

static yyconst flex_int16_t yy_def[941] =
    {   0,
      933,    1,  933,    3,  933,  933,  933,  933,  934,  933,
      935,  933,  933,  933,  933,  933,  936,  936,  936,  936,
      936,  936,  936,  936,  936,  936,  936,  936,  936,  936,
      936,  936,  936,  936,  936,  936,  936,  936,  936,  937,
      937,  933,  938,  937,  939,  937,  937,  937,  937,  937,
      940,  940,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,  933,  934,  935,  933,  933,  933,  933,
      933,  933,  933,  933,  936,  936,  936,  936,  936,  936,
      936,  936,  936,  936,  936,  936,  936,  936,  936,  936,

      936,  936,  936,  936,  936,  936,  936,  936,  936,  936,
      936,  936,  936,  936,  936,  936,  936,  936,  936,  936,
      936,  936,  936,  936,  936,  936,  936,  936,  936,  936,
      936,  936,  936,  936,  936,  936,  936,  936,  936,  936,
      936,  936,  936,  936,  936,  936,  936,  936,  936,  936,
      936,  936,  936,  936,  937,  937,  938,  939,  937,  937,
      937,  937,  937,  937,  937,  937,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,

       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,  933,  933,  936,  936,
      936,  936,  936,  936,  936,  936,  936,  936,  936,  936,
      936,  936,  936,  936,  936,  936,  936,  936,  936,  936,
      936,  936,  936,  936,  936,  936,  936,  936,  936,  936,
      936,  936,  936,  936,  936,  936,  936,  936,  936,  936,
      936,  936,  936,  936,  936,  936,  936,  936,  936,  936,
      936,  936,  936,  936,  936,  936,  936,  936,  936,  936,

      936,  936,  936,  936,  936,  936,  936,  936,  936,  936,
      936,  936,  936,  936,  936,  936,  936,  936,  936,  936,
      936,  936,  936,  936,  936,  936,  936,  936,  936,  936,
      936,  936,  936,  937,  937,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,

       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
      936,  936,  936,  936,  936,  936,  936,  936,  936,  936,
      936,  936,  936,  936,  936,  936,  936,  936,  936,  936,
      936,  936,  936,  936,  936,  936,  936,  936,  936,  936,
      936,  936,  936,  936,  936,  936,  936,  936,  936,  936,
      936,  936,  936,  936,  936,  936,  936,  936,  936,  936,
      936,  936,  936,  936,  936,  936,  936,  936,  936,  936,
      936,  936,  936,  936,  936,  936,  936,  936,  936,  936,

      936,  936,  936,  936,  936,  936,  936,  936,  936,  936,
      936,  936,  936,  936,  936,  936,  936,  936,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,

       52,   52,   52,   52,   52,   52,  936,  936,  936,  936,
      936,  936,  936,  936,  936,  936,  936,  936,  936,  936,
      936,  936,  936,  936,  936,  936,  936,  936,  936,  936,
      936,  936,  936,  936,  936,  936,  936,  936,  936,  936,
      936,  936,  936,  936,  936,  936,  936,  936,  936,  936,
      936,  936,  936,  936,  936,  936,  936,  936,  936,  936,
      936,  936,  936,  936,  936,  936,  936,  936,  936,  936,
      936,  936,  936,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,

       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
      936,  936,  936,  936,  936,  936,  936,  936,  936,  936,
      936,  936,  936,  936,  936,  936,  936,  936,  936,  936,
      936,  936,  936,  936,  936,  936,  936,  936,  936,  936,
      936,  936,  936,  936,  936,  936,  936,  936,  936,  936,
      936,  936,  936,  936,  936,  936,  936,  936,  936,  936,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,

       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
      936,  936,  936,  936,  936,  936,  936,  936,  936,  936,
      936,  936,  936,  936,  936,  936,  936,  936,  936,  936,
      936,  936,  936,  936,  936,  936,  936,  936,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,  936,  936,  936,  936,

      936,  936,  936,  936,  936,  936,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,  936,  936,  936,  936,
      936,  936,   52,   52,   52,   52,   52,   52,  936,  936,
       52,   52,    0,  933,  933,  933,  933,  933,  933,  933
    } ;

static yyconst flex_int16_t yy_nxt[3778] =
    {   0,
        6,    7,    8,    9,   10,   11,   12,   13,   14,   15,
       10,   16,   17,   18,   19,   20,   21,   22,   23,   24,
       25,   26,   27,   28,   29,   30,   31,   32,   33,   34,
       35,   36,   37,   38,   39,   33,   33,   33,    6,   17,
       18,   19,   20,   21,   22,   23,   24,   25,   26,   27,
       28,   29,   30,   31,   32,   33,   34,   35,   36,   37,
       38,   39,   33,   33,   33,   40,   41,   42,   43,   44,
       45,   46,   47,   48,   49,   44,   50,   51,   52,   53,
       54,   55,   56,   57,   58,   59,   60,   61,   62,   63,
       64,   65,   66,   67,   68,   69,   70,   71,   72,   73,

       67,   67,   67,   40,   51,   52,   53,   54,   55,   56,
       57,   58,   59,   60,   61,   62,   63,   64,   65,   66,
       67,   68,   69,   70,   71,   72,   73,   67,   67,   67,
       74,   74,   74,   74,   80,   81,   82,   83,   86,   91,
       87,  117,  103,  105,  109,  118,   88,  104,   89,  106,
      110,  239,  107,   90,  111,  108,   85,  153,  154,   92,
      156,   74,  112,   74,   74,   86,   91,   87,  117,  103,
      105,  109,  118,   88,  104,   89,  106,  110,  239,  107,
       90,  111,  108,  113,  153,  154,   92,   93,  119,  112,
      114,  115,  120,  122,   94,  335,  116,  123,  121,  135,

      238,   95,  240,  136,   96,   97,  162,  163,  164,  165,
      113,   74,   74,  335,   93,  119,  161,  114,  115,  120,
      122,   94,  124,  116,  123,  121,  135,  132,   95,  240,
      136,   96,   97,   98,   80,   81,  125,   99,  133,  245,
      128,  100,  126,  127,  134,  151,  159,  101,  129,  124,
      102,  334,  130,  152,  132,  131,  238,  148,   79,  149,
       98,   77,  150,  125,   99,  133,  245,  128,  100,  126,
      127,  134,  151,  167,  101,  129,  250,  102,  243,  130,
      152,  244,  131,  137,  148,  138,  149,  185,  139,  150,
      237,  241,  186,  167,  253,  140,  141,  156,   74,  242,

      167,  166,  246,  250,  254,  243,  161,  200,  244,  193,
      137,  160,  138,  167,  185,  139,  247,  194,  241,  186,
      167,  253,  140,  141,  142,  143,  242,  167,  144,  246,
      167,  254,  145,  167,  200,  251,  193,  252,  146,  255,
      167,  147,  159,  247,  194,  162,  163,  155,   84,   79,
      167,  142,  143,   78,  167,  144,  248,  167,  256,  145,
      167,  167,  251,  249,  252,  146,  255,   77,  147,  155,
      155,  199,  155,  155,  155,  155,  155,  167,  155,  155,
      155,  167,  167,  248,  168,  256,  169,  933,  167,  191,
      249,  263,  170,  933,  171,  192,  264,  933,  199,  172,

      933,  933,  167,  933,  933,  933,  933,  933,  167,  167,
      933,  168,  933,  169,  261,  262,  191,  265,  263,  170,
      204,  171,  192,  264,  205,  270,  172,  155,  155,  167,
      155,  155,  155,  155,  155,  201,  155,  155,  155,  202,
      167,  261,  262,  173,  265,  203,  271,  204,  272,  217,
      233,  205,  270,  218,  167,  167,  933,  273,  234,  933,
      933,  274,  201,  174,  933,  275,  202,  167,  933,  167,
      173,  933,  203,  271,  167,  272,  217,  233,  933,  933,
      218,  167,  167,  167,  273,  234,  235,  236,  274,  257,
      174,  175,  275,  280,  258,  167,  167,  285,  176,  276,

      259,  167,  277,  167,  286,  177,  278,  260,  178,  179,
      167,  279,  933,  235,  236,  167,  257,  287,  175,  933,
      280,  258,  167,  288,  285,  176,  276,  259,  933,  277,
      167,  286,  177,  278,  260,  178,  179,  293,  279,  266,
      933,  267,  167,  180,  287,  268,  281,  181,  294,  295,
      288,  182,  269,  289,  296,  290,  282,  183,  297,  298,
      184,  283,  284,  291,  293,  292,  266,  167,  267,  299,
      180,  300,  268,  281,  181,  294,  295,  301,  182,  269,
      289,  296,  290,  282,  183,  297,  298,  184,  283,  284,
      291,  302,  292,  303,  167,  167,  299,  304,  300,  187,

      308,  305,  306,  309,  301,  188,  310,  307,  189,  312,
      313,  190,  314,  315,  311,  167,  933,  933,  302,  316,
      303,  933,  167,  321,  304,  933,  187,  308,  305,  306,
      309,  322,  188,  310,  307,  189,  312,  313,  190,  314,
      315,  311,  167,  167,  195,  317,  316,  319,  320,  325,
      321,  196,  197,  330,  328,  332,  318,  198,  322,  323,
      329,  326,  324,  167,  933,  327,  331,  333,  933,  431,
      167,  195,  317,  432,  319,  320,  325,  167,  196,  197,
      330,  328,  332,  318,  198,  933,  323,  329,  326,  324,
      167,  206,  327,  331,  333,  167,  431,  167,  336,  167,

      432,  933,  433,  933,  167,  207,  933,  933,  167,  434,
      435,  208,  209,  933,  167,  167,  933,  933,  206,  167,
      933,  933,  167,  337,  167,  336,  167,  340,  167,  433,
      341,  167,  207,  167,  167,  167,  434,  435,  208,  209,
      338,  167,  167,  167,  210,  933,  167,  342,  339,  167,
      337,  167,  211,  167,  340,  167,  212,  341,  167,  213,
      167,  167,  933,  167,  933,  933,  933,  338,  933,  167,
      167,  210,  167,  343,  342,  339,  167,  933,  167,  211,
      167,  933,  933,  212,  933,  347,  213,  344,  933,  167,
      167,  214,  167,  167,  436,  167,  167,  167,  437,  167,

      343,  438,  215,  933,  345,  933,  358,  359,  216,  167,
      933,  346,  347,  167,  344,  167,  167,  167,  214,  167,
      167,  436,  167,  933,  167,  437,  933,  167,  438,  215,
      167,  345,  167,  358,  359,  216,  167,  348,  346,  349,
      167,  350,  167,  219,  167,  220,  933,  167,  221,  352,
      167,  351,  167,  167,  167,  222,  223,  167,  439,  167,
      933,  167,  933,  361,  348,  167,  349,  933,  350,  167,
      219,  167,  220,  167,  167,  221,  352,  167,  351,  167,
      167,  440,  222,  223,  353,  439,  167,  360,  167,  167,
      361,  167,  167,  224,  225,  167,  167,  226,  167,  368,

      167,  227,  367,  362,  933,  167,  167,  228,  440,  441,
      229,  353,  442,  167,  360,  167,  167,  167,  167,  933,
      224,  225,  167,  445,  226,  167,  368,  933,  227,  367,
      362,  167,  167,  167,  228,  167,  441,  229,  933,  442,
      167,  369,  167,  167,  167,  167,  377,  370,  446,  447,
      445,  167,  167,  371,  230,  167,  231,  443,  167,  232,
      167,  444,  167,  167,  448,  167,  933,  167,  369,  167,
      167,  933,  167,  377,  370,  446,  447,  933,  167,  372,
      371,  230,  167,  231,  443,  167,  232,  167,  444,  167,
      167,  448,  167,  354,  167,  933,  167,  167,  355,  373,

      933,  449,  374,  375,  356,  167,  372,  167,  376,  933,
      933,  357,  167,  167,  167,  933,  167,  167,  933,  167,
      354,  167,  382,  383,  167,  355,  373,  384,  449,  374,
      375,  356,  167,  167,  167,  376,  167,  385,  357,  167,
      167,  167,  167,  450,  167,  363,  167,  364,  933,  382,
      383,  365,  933,  167,  384,  390,  167,  451,  366,  386,
      167,  387,  167,  167,  385,  933,  167,  167,  933,  167,
      450,  933,  363,  167,  364,  388,  452,  389,  365,  167,
      167,  167,  390,  167,  451,  366,  386,  453,  387,  167,
      391,  933,  167,  454,  167,  378,  167,  933,  167,  167,

      167,  167,  388,  452,  389,  379,  167,  392,  167,  933,
      380,  381,  167,  393,  453,  455,  167,  391,  167,  167,
      454,  167,  378,  167,  167,  167,  167,  456,  167,  395,
      933,  394,  379,  167,  392,  167,  396,  380,  381,  167,
      393,  167,  455,  167,  167,  167,  397,  167,  167,  167,
      933,  167,  167,  167,  456,  167,  395,  400,  394,  933,
      167,  167,  167,  396,  398,  399,  401,  167,  167,  167,
      402,  167,  167,  397,  167,  167,  167,  405,  457,  167,
      167,  167,  167,  933,  400,  458,  167,  167,  167,  167,
      406,  398,  399,  401,  167,  167,  167,  402,  403,  167,

      167,  933,  167,  404,  405,  457,  459,  167,  167,  167,
      409,  167,  458,  167,  167,  167,  167,  406,  407,  411,
      167,  412,  167,  167,  167,  403,  408,  167,  410,  460,
      404,  167,  167,  459,  167,  167,  167,  409,  167,  413,
      461,  167,  167,  167,  167,  407,  411,  167,  412,  414,
      167,  167,  167,  408,  167,  410,  460,  933,  167,  167,
      415,  167,  167,  933,  167,  418,  413,  461,  167,  167,
      167,  167,  416,  417,  167,  933,  414,  422,  167,  167,
      933,  167,  462,  463,  167,  419,  167,  415,  167,  167,
      420,  167,  418,  421,  429,  167,  167,  933,  167,  416,

      417,  167,  425,  423,  422,  167,  167,  424,  426,  462,
      463,  167,  419,  167,  167,  167,  167,  420,  427,  464,
      421,  429,  167,  167,  167,  167,  465,  466,  467,  425,
      423,  428,  468,  167,  424,  426,  469,  470,  167,  430,
      471,  167,  167,  474,  167,  427,  464,  472,  475,  476,
      167,  167,  477,  465,  466,  467,  478,  473,  428,  468,
      479,  480,  481,  469,  470,  167,  430,  471,  482,  483,
      474,  167,  484,  485,  472,  475,  476,  486,  487,  477,
      488,  491,  489,  478,  473,  492,  493,  479,  480,  481,
      494,  495,  496,  497,  498,  482,  483,  499,  500,  484,

      485,  490,  501,  502,  486,  487,  503,  488,  491,  489,
      504,  505,  492,  493,  506,  507,  510,  494,  495,  496,
      497,  498,  511,  512,  499,  500,  513,  514,  490,  501,
      502,  515,  508,  503,  509,  516,  517,  504,  505,  518,
      167,  506,  507,  510,  519,  167,  933,  607,  520,  511,
      512,  933,  608,  513,  514,  933,  933,  167,  515,  508,
      167,  509,  516,  517,  167,  167,  518,  167,  167,  167,
      167,  519,  167,  167,  607,  520,  521,  167,  167,  608,
      525,  167,  167,  522,  167,  524,  933,  167,  609,  167,
      167,  167,  167,  167,  610,  167,  167,  167,  167,  523,

      167,  167,  167,  521,  167,  167,  933,  525,  167,  167,
      522,  167,  524,  167,  167,  609,  167,  167,  933,  529,
      167,  610,  167,  167,  526,  167,  523,  530,  167,  167,
      527,  167,  167,  167,  167,  933,  933,  528,  167,  933,
      167,  167,  167,  167,  531,  537,  529,  167,  532,  167,
      167,  526,  167,  933,  530,  933,  167,  527,  167,  167,
      167,  167,  534,  533,  528,  535,  167,  167,  167,  167,
      167,  531,  537,  933,  167,  532,  167,  538,  542,  167,
      536,  167,  167,  167,  933,  167,  167,  933,  540,  534,
      533,  167,  535,  167,  167,  167,  539,  167,  933,  167,

      543,  167,  167,  167,  538,  542,  933,  536,  167,  167,
      541,  167,  167,  167,  544,  540,  167,  933,  167,  167,
      167,  933,  547,  539,  167,  167,  167,  543,  167,  167,
      167,  550,  611,  167,  167,  933,  167,  541,  167,  545,
      546,  544,  167,  167,  167,  167,  167,  167,  167,  547,
      167,  549,  167,  167,  167,  933,  548,  167,  550,  611,
      167,  167,  167,  167,  167,  552,  545,  546,  167,  167,
      167,  167,  167,  933,  612,  167,  557,  167,  549,  167,
      167,  167,  167,  548,  167,  167,  551,  558,  553,  167,
      167,  167,  552,  933,  554,  167,  167,  167,  167,  167,

      555,  612,  559,  557,  167,  167,  167,  167,  556,  167,
      560,  167,  167,  551,  558,  553,  167,  167,  167,  167,
      561,  554,  167,  167,  167,  167,  167,  555,  563,  559,
      167,  167,  167,  167,  167,  556,  167,  560,  565,  167,
      562,  567,  167,  167,  167,  167,  167,  561,  564,  167,
      167,  167,  568,  167,  566,  563,  167,  167,  167,  933,
      167,  613,  167,  167,  614,  565,  167,  562,  567,  167,
      167,  167,  167,  933,  569,  564,  167,  167,  167,  568,
      167,  566,  167,  167,  167,  167,  167,  575,  613,  167,
      615,  614,  167,  572,  570,  167,  167,  167,  167,  167,

      571,  569,  167,  167,  167,  167,  167,  167,  573,  167,
      574,  167,  576,  167,  575,  167,  167,  615,  933,  167,
      572,  570,  167,  167,  933,  167,  577,  571,  167,  167,
      167,  167,  167,  167,  167,  573,  581,  574,  167,  576,
      167,  616,  167,  167,  585,  578,  167,  579,  167,  933,
      167,  580,  582,  577,  933,  167,  167,  167,  167,  167,
      167,  583,  586,  581,  167,  167,  167,  167,  616,  933,
      167,  585,  578,  167,  579,  167,  167,  167,  580,  582,
      167,  167,  167,  167,  584,  167,  933,  167,  583,  586,
      167,  167,  933,  167,  617,  167,  167,  167,  587,  167,

      167,  167,  933,  167,  618,  933,  933,  167,  167,  167,
      588,  584,  933,  167,  589,  167,  167,  167,  167,  167,
      590,  617,  167,  167,  167,  587,  167,  167,  167,  591,
      593,  618,  167,  167,  167,  933,  933,  588,  167,  592,
      167,  589,  167,  167,  167,  167,  167,  590,  619,  167,
      167,  167,  594,  167,  167,  933,  591,  593,  595,  167,
      167,  167,  167,  598,  599,  167,  592,  167,  167,  167,
      933,  167,  596,  167,  597,  619,  167,  167,  933,  594,
      167,  167,  167,  167,  620,  595,  167,  167,  167,  167,
      598,  599,  600,  933,  167,  167,  167,  167,  167,  596,

      167,  597,  601,  167,  621,  602,  167,  167,  167,  167,
      167,  620,  604,  167,  167,  167,  603,  167,  167,  600,
      167,  605,  622,  606,  167,  167,  623,  167,  167,  601,
      167,  621,  602,  167,  167,  167,  624,  625,  626,  604,
      167,  627,  628,  603,  167,  167,  629,  167,  605,  622,
      606,  630,  631,  623,  167,  167,  632,  633,  634,  635,
      636,  637,  640,  624,  625,  626,  638,  167,  627,  628,
      641,  642,  643,  629,  644,  645,  646,  639,  630,  631,
      647,  648,  649,  632,  633,  634,  635,  636,  637,  640,
      650,  651,  652,  638,  653,  654,  655,  641,  642,  643,

      656,  644,  645,  646,  639,  657,  658,  647,  648,  649,
      659,  660,  661,  662,  663,  664,  665,  650,  651,  652,
      666,  653,  654,  655,  667,  668,  669,  656,  670,  671,
      672,  673,  657,  658,  933,  933,  933,  659,  660,  661,
      662,  663,  664,  665,  167,  678,  167,  666,  167,  167,
      167,  667,  668,  669,  167,  670,  671,  672,  673,  674,
      933,  675,  677,  679,  676,  167,  167,  167,  167,  167,
      167,  167,  678,  167,  167,  167,  167,  167,  741,  933,
      684,  167,  742,  167,  167,  933,  674,  167,  675,  677,
      679,  676,  167,  167,  167,  167,  167,  167,  167,  167,

      167,  167,  167,  167,  167,  741,  680,  684,  167,  742,
      167,  167,  681,  743,  167,  682,  683,  167,  167,  167,
      167,  933,  167,  687,  685,  167,  167,  167,  167,  167,
      167,  167,  167,  680,  688,  167,  167,  167,  167,  681,
      743,  744,  682,  683,  167,  167,  167,  167,  686,  167,
      687,  685,  167,  167,  167,  167,  167,  690,  167,  167,
      689,  688,  167,  167,  167,  167,  933,  933,  744,  933,
      167,  933,  933,  167,  167,  686,  167,  691,  167,  167,
      167,  167,  167,  167,  690,  167,  745,  689,  167,  167,
      167,  167,  694,  695,  167,  933,  167,  167,  167,  692,

      167,  167,  693,  167,  691,  167,  696,  167,  167,  167,
      167,  167,  167,  745,  167,  167,  746,  167,  167,  694,
      695,  167,  167,  167,  697,  167,  692,  167,  167,  693,
      167,  747,  167,  696,  167,  167,  167,  167,  167,  167,
      167,  167,  167,  746,  167,  933,  933,  698,  167,  167,
      933,  697,  167,  699,  167,  167,  167,  167,  747,  167,
      167,  748,  700,  167,  167,  167,  933,  167,  933,  167,
      933,  167,  167,  167,  698,  167,  167,  167,  701,  167,
      699,  933,  167,  167,  749,  167,  703,  167,  748,  700,
      704,  167,  167,  167,  167,  702,  167,  167,  167,  167,

      167,  707,  167,  167,  167,  701,  167,  167,  705,  167,
      167,  749,  167,  703,  167,  933,  167,  704,  167,  706,
      167,  167,  702,  167,  167,  167,  167,  167,  707,  167,
      167,  708,  167,  167,  167,  705,  167,  167,  750,  751,
      167,  167,  710,  167,  933,  167,  706,  709,  167,  933,
      167,  167,  167,  167,  167,  933,  714,  167,  708,  167,
      167,  712,  167,  167,  711,  750,  751,  167,  167,  710,
      167,  167,  167,  167,  709,  167,  167,  167,  167,  167,
      713,  167,  167,  714,  933,  715,  716,  167,  712,  167,
      167,  711,  167,  167,  933,  167,  167,  167,  167,  167,

      167,  167,  167,  167,  717,  752,  167,  713,  167,  167,
      167,  718,  715,  716,  720,  167,  167,  167,  933,  167,
      167,  719,  933,  167,  167,  167,  167,  167,  167,  167,
      933,  717,  752,  167,  724,  167,  167,  167,  718,  722,
      721,  720,  167,  167,  167,  167,  753,  167,  719,  167,
      167,  167,  167,  167,  167,  725,  167,  723,  727,  754,
      167,  724,  167,  167,  726,  933,  722,  721,  167,  167,
      167,  167,  167,  753,  167,  167,  167,  167,  167,  167,
      167,  933,  725,  167,  723,  727,  754,  167,  167,  728,
      167,  726,  167,  933,  167,  167,  167,  167,  730,  167,

      167,  731,  167,  167,  729,  167,  167,  167,  733,  732,
      167,  933,  167,  755,  167,  167,  728,  167,  734,  167,
      167,  167,  167,  167,  737,  730,  167,  167,  731,  933,
      167,  729,  167,  167,  736,  733,  732,  167,  167,  167,
      755,  167,  167,  167,  167,  734,  738,  167,  735,  167,
      167,  737,  167,  167,  740,  756,  167,  167,  167,  167,
      167,  736,  757,  167,  758,  167,  759,  760,  761,  167,
      167,  167,  739,  738,  167,  735,  167,  167,  762,  167,
      167,  740,  756,  167,  167,  167,  763,  764,  765,  757,
      167,  758,  766,  759,  760,  761,  767,  768,  769,  739,

      770,  167,  771,  167,  167,  762,  772,  773,  774,  775,
      776,  777,  778,  763,  764,  765,  779,  780,  781,  766,
      782,  783,  784,  767,  768,  769,  785,  770,  786,  771,
      787,  788,  789,  772,  773,  774,  775,  776,  777,  778,
      790,  167,  167,  779,  780,  781,  792,  782,  783,  784,
      167,  841,  793,  785,  797,  786,  167,  787,  788,  789,
      167,  167,  167,  794,  167,  795,  167,  790,  167,  167,
      167,  791,  167,  792,  167,  167,  167,  167,  841,  793,
      167,  797,  798,  167,  167,  796,  167,  167,  167,  167,
      794,  167,  795,  167,  167,  167,  801,  167,  791,  167,

      167,  167,  167,  167,  799,  842,  167,  167,  167,  798,
      167,  167,  796,  167,  167,  800,  167,  933,  843,  804,
      167,  167,  167,  801,  805,  802,  933,  167,  167,  167,
      167,  799,  842,  167,  844,  167,  933,  167,  803,  167,
      845,  167,  800,  167,  167,  843,  804,  167,  167,  167,
      167,  805,  802,  167,  167,  167,  167,  167,  167,  167,
      810,  844,  809,  806,  808,  803,  167,  845,  167,  807,
      167,  167,  167,  167,  167,  167,  167,  167,  167,  167,
      167,  167,  167,  167,  811,  167,  167,  810,  167,  809,
      806,  808,  167,  815,  167,  167,  807,  167,  813,  167,

      167,  167,  167,  167,  167,  167,  167,  812,  167,  167,
      167,  811,  167,  167,  167,  167,  167,  167,  816,  167,
      815,  167,  167,  817,  167,  813,  167,  814,  167,  167,
      167,  167,  167,  933,  812,  167,  167,  167,  167,  167,
      167,  167,  167,  167,  167,  816,  167,  167,  167,  167,
      817,  167,  818,  167,  814,  167,  167,  167,  167,  167,
      819,  167,  820,  167,  167,  167,  821,  167,  933,  167,
      824,  933,  846,  167,  167,  167,  167,  167,  167,  818,
      167,  167,  167,  167,  167,  167,  167,  819,  167,  820,
      167,  822,  167,  821,  167,  823,  825,  824,  167,  846,

      167,  167,  167,  167,  167,  167,  826,  167,  167,  167,
      167,  167,  167,  167,  828,  167,  827,  167,  822,  167,
      829,  167,  823,  825,  167,  167,  167,  167,  167,  167,
      167,  167,  167,  826,  167,  167,  847,  167,  167,  167,
      830,  828,  167,  827,  167,  831,  167,  829,  167,  832,
      835,  167,  167,  167,  167,  167,  834,  167,  167,  167,
      167,  167,  167,  847,  833,  836,  167,  830,  837,  167,
      167,  167,  831,  167,  848,  167,  832,  835,  933,  167,
      167,  167,  167,  834,  167,  167,  167,  167,  167,  167,
      839,  833,  836,  167,  167,  837,  167,  167,  838,  840,

      849,  848,  167,  167,  167,  167,  850,  167,  851,  852,
      853,  167,  167,  167,  167,  167,  167,  839,  854,  855,
      856,  167,  857,  167,  858,  838,  840,  849,  859,  860,
      167,  167,  167,  850,  861,  851,  852,  853,  862,  863,
      864,  167,  865,  866,  867,  854,  855,  856,  868,  857,
      167,  858,  869,  167,  167,  859,  860,  871,  933,  897,
      898,  861,  167,  870,  933,  862,  863,  864,  167,  865,
      866,  867,  167,  167,  167,  868,  872,  167,  167,  869,
      167,  167,  167,  933,  871,  873,  897,  898,  167,  167,
      870,  167,  875,  167,  167,  167,  167,  167,  167,  167,

      167,  167,  167,  872,  167,  167,  876,  874,  877,  167,
      167,  167,  873,  167,  167,  167,  167,  167,  167,  875,
      167,  167,  167,  167,  167,  167,  167,  167,  878,  167,
      167,  167,  167,  876,  874,  877,  167,  167,  167,  933,
      167,  167,  167,  167,  167,  879,  167,  167,  167,  167,
      167,  167,  167,  167,  167,  878,  167,  167,  167,  167,
      167,  167,  167,  167,  933,  882,  167,  933,  933,  167,
      880,  167,  879,  167,  167,  167,  167,  167,  167,  167,
      167,  167,  886,  167,  881,  167,  167,  167,  167,  167,
      167,  167,  882,  167,  167,  884,  167,  880,  167,  167,

      167,  883,  167,  167,  167,  885,  933,  167,  167,  886,
      167,  881,  167,  167,  167,  899,  167,  167,  167,  167,
      887,  167,  884,  167,  167,  167,  167,  167,  883,  167,
      889,  167,  885,  888,  167,  167,  167,  167,  167,  933,
      891,  167,  899,  167,  167,  167,  167,  887,  900,  167,
      901,  167,  167,  167,  167,  167,  890,  889,  167,  167,
      888,  167,  167,  167,  167,  167,  892,  891,  893,  167,
      167,  167,  167,  167,  894,  900,  167,  901,  167,  167,
      167,  167,  167,  890,  167,  167,  167,  167,  167,  167,
      167,  167,  167,  892,  902,  893,  167,  167,  167,  896,

      167,  894,  895,  903,  167,  167,  167,  167,  167,  167,
      904,  167,  167,  905,  167,  167,  167,  167,  906,  167,
      933,  902,  167,  167,  167,  167,  896,  167,  167,  895,
      903,  167,  907,  917,  167,  167,  167,  904,  167,  167,
      905,  167,  167,  167,  167,  906,  167,  167,  167,  167,
      167,  167,  167,  908,  167,  167,  909,  167,  167,  907,
      917,  167,  167,  918,  933,  167,  167,  167,  167,  167,
      167,  167,  167,  167,  167,  167,  910,  167,  167,  167,
      908,  167,  167,  909,  167,  167,  912,  167,  167,  167,
      918,  167,  167,  167,  167,  167,  167,  167,  167,  167,

      933,  167,  933,  910,  167,  167,  167,  933,  167,  167,
      911,  167,  167,  912,  167,  167,  167,  167,  167,  167,
      167,  167,  167,  167,  167,  167,  933,  913,  167,  167,
      916,  167,  167,  167,  914,  167,  919,  911,  167,  167,
      167,  167,  167,  167,  167,  167,  920,  167,  167,  167,
      167,  167,  921,  915,  913,  167,  167,  916,  167,  167,
      922,  914,  167,  919,  167,  167,  167,  167,  167,  167,
      167,  933,  167,  920,  167,  167,  167,  167,  167,  921,
      915,  924,  167,  923,  167,  925,  167,  922,  926,  167,
      167,  167,  167,  167,  167,  167,  167,  167,  167,  167,

      167,  167,  167,  167,  929,  930,  933,  933,  924,  167,
      923,  167,  925,  167,  928,  926,  167,  167,  167,  927,
      167,  167,  167,  167,  931,  167,  167,  167,  167,  167,
      167,  929,  930,  167,  167,  933,  167,  167,  167,  167,
      933,  928,  933,  933,  167,  167,  927,  167,  167,  933,
      167,  931,  932,  167,  167,  167,  167,  167,  167,  167,
      167,  167,  933,  933,  167,  167,  167,  933,  933,  933,
      933,  167,  933,  933,  933,  167,  933,  933,  933,  932,
      167,  167,  933,  933,  167,  167,  167,   75,  933,  933,
       75,   76,  933,   76,   76,  155,  933,  155,  155,  157,

      933,  157,  157,  158,  933,  158,  158,  167,  933,  167,
      167,    5,  933,  933,  933,  933,  933,  933,  933,  933,
      933,  933,  933,  933,  933,  933,  933,  933,  933,  933,
      933,  933,  933,  933,  933,  933,  933,  933,  933,  933,
      933,  933,  933,  933,  933,  933,  933,  933,  933,  933,
      933,  933,  933,  933,  933,  933,  933,  933,  933,  933,
      933,  933,  933,  933,  933,  933,  933,  933,  933,  933,
      933,  933,  933,  933,  933,  933,  933
    } ;

static yyconst flex_int16_t yy_chk[3778] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,

        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        7,    7,    8,    8,   14,   14,   15,   15,   17,   18,
       17,   26,   21,   22,   23,   27,   17,   21,   17,   22,
       23,   86,   22,   17,   24,   22,  936,   39,   39,   18,
       41,   41,   24,   42,   42,   17,   18,   17,   26,   21,
       22,   23,   27,   17,   21,   17,   22,   23,   86,   22,
       17,   24,   22,   25,   39,   39,   18,   19,   28,   24,
       25,   25,   28,   29,   19,  335,   25,   29,   28,   34,

      238,   19,   87,   34,   19,   19,   48,   48,   49,   49,
       25,   74,   74,  162,   19,   28,  161,   25,   25,   28,
       29,   19,   30,   25,   29,   28,   34,   32,   19,   87,
       34,   19,   19,   20,   81,   81,   30,   20,   32,   90,
       31,   20,   30,   30,   32,   38,  158,   20,   31,   30,
       20,  157,   31,   38,   32,   31,   80,   37,   79,   37,
       20,   76,   37,   30,   20,   32,   90,   31,   20,   30,
       30,   32,   38,   55,   20,   31,   94,   20,   89,   31,
       38,   89,   31,   35,   37,   35,   37,   55,   35,   37,
       75,   88,   55,   55,   96,   35,   35,  156,  156,   88,

       55,   50,   91,   94,   96,   89,   47,   61,   89,   58,
       35,   46,   35,   58,   55,   35,   91,   58,   88,   55,
       55,   96,   35,   35,   36,   36,   88,   61,   36,   91,
       67,   96,   36,   58,   61,   95,   58,   95,   36,   97,
       58,   36,   45,   91,   58,  163,  163,   43,   16,   13,
       67,   36,   36,   12,   61,   36,   93,   67,   98,   36,
       58,   60,   95,   93,   95,   36,   97,   11,   36,   51,
       51,   60,   51,   51,   51,   51,   51,   67,   51,   51,
       51,   60,   57,   93,   51,   98,   51,    5,   60,   57,
       93,  101,   51,    0,   51,   57,  102,    0,   60,   51,

        0,    0,   57,    0,    0,    0,    0,    0,   60,   57,
        0,   51,    0,   51,  100,  100,   57,  103,  101,   51,
       63,   51,   57,  102,   63,  105,   51,   52,   52,   57,
       52,   52,   52,   52,   52,   62,   52,   52,   52,   62,
       63,  100,  100,   52,  103,   62,  106,   63,  107,   68,
       72,   63,  105,   68,   72,   62,    0,  108,   72,    0,
        0,  109,   62,   52,    0,  110,   62,   63,    0,   68,
       52,    0,   62,  106,   72,  107,   68,   72,    0,    0,
       68,   72,   62,   73,  108,   72,   73,   73,  109,   99,
       52,   53,  110,  114,   99,   53,   68,  116,   53,  111,

       99,   72,  111,   73,  117,   53,  112,   99,   53,   53,
       73,  112,    0,   73,   73,   53,   99,  118,   53,    0,
      114,   99,   53,  119,  116,   53,  111,   99,    0,  111,
       73,  117,   53,  112,   99,   53,   53,  122,  112,  104,
        0,  104,   53,   54,  118,  104,  115,   54,  123,  124,
      119,   54,  104,  120,  125,  120,  115,   54,  126,  127,
       54,  115,  115,  121,  122,  121,  104,   54,  104,  128,
       54,  130,  104,  115,   54,  123,  124,  131,   54,  104,
      120,  125,  120,  115,   54,  126,  127,   54,  115,  115,
      121,  132,  121,  133,   54,   56,  128,  134,  130,   56,

      136,  134,  135,  137,  131,   56,  138,  135,   56,  139,
      140,   56,  141,  142,  138,   56,    0,    0,  132,  143,
      133,    0,   56,  146,  134,    0,   56,  136,  134,  135,
      137,  147,   56,  138,  135,   56,  139,  140,   56,  141,
      142,  138,   56,   59,   59,  144,  143,  145,  145,  149,
      146,   59,   59,  152,  151,  153,  144,   59,  147,  148,
      151,  150,  148,   59,    0,  150,  152,  154,    0,  240,
       59,   59,  144,  242,  145,  145,  149,  167,   59,   59,
      152,  151,  153,  144,   59,    0,  148,  151,  150,  148,
       59,   64,  150,  152,  154,   64,  240,  167,  168,  168,

      242,    0,  243,    0,  167,   64,    0,    0,  169,  246,
      247,   64,   64,    0,  174,   64,    0,    0,   64,  168,
        0,    0,   64,  169,  167,  168,  168,  171,  169,  243,
      171,  171,   64,  170,  174,  169,  246,  247,   64,   64,
      170,  174,   64,   65,   65,    0,  168,  172,  170,  172,
      169,  171,   65,  170,  171,  169,   65,  171,  171,   65,
      170,  174,    0,   65,    0,    0,    0,  170,    0,  172,
       65,   65,  173,  173,  172,  170,  172,    0,  171,   65,
      170,    0,    0,   65,    0,  176,   65,  173,    0,  176,
       65,   66,  173,  182,  248,   66,  172,  175,  249,  173,

      173,  250,   66,    0,  175,    0,  182,  182,   66,  176,
        0,  175,  176,  182,  173,   66,  176,  175,   66,  173,
      182,  248,   66,    0,  175,  249,    0,  195,  250,   66,
      177,  175,  179,  182,  182,   66,  176,  177,  175,  177,
      182,  178,   66,   69,  175,   69,    0,  195,   69,  179,
      177,  178,  179,  184,  195,   69,   69,  177,  251,  179,
        0,  178,    0,  184,  177,   69,  177,    0,  178,  180,
       69,  183,   69,  184,  195,   69,  179,  177,  178,  179,
      184,  252,   69,   69,  180,  251,  188,  183,  178,  180,
      184,  183,   69,   70,   70,  187,  180,   70,  183,  188,

      184,   70,  187,  185,    0,  185,  188,   70,  252,  253,
       70,  180,  254,  188,  183,  187,  180,   70,  183,    0,
       70,   70,  187,  257,   70,  185,  188,    0,   70,  187,
      185,  189,  185,  188,   70,  196,  253,   70,    0,  254,
      190,  189,  187,  191,   70,   71,  196,  190,  258,  259,
      257,  189,  185,  191,   71,  196,   71,  256,  189,   71,
      190,  256,  196,  191,  259,   71,    0,  190,  189,  192,
      191,    0,   71,  196,  190,  258,  259,    0,  189,  192,
      191,   71,  196,   71,  256,  193,   71,  190,  256,  192,
      191,  259,   71,  181,  194,    0,  192,  181,  181,  193,

        0,  260,  193,  194,  181,  193,  192,  200,  194,    0,
        0,  181,  193,  198,  194,    0,  192,  181,    0,  199,
      181,  194,  198,  199,  181,  181,  193,  200,  260,  193,
      194,  181,  193,  198,  200,  194,  201,  201,  181,  199,
      198,  194,  204,  261,  181,  186,  199,  186,    0,  198,
      199,  186,    0,  202,  200,  204,  201,  262,  186,  202,
      198,  202,  204,  201,  201,    0,  199,  186,    0,  204,
      261,    0,  186,  202,  186,  203,  263,  203,  186,  203,
      202,  205,  204,  201,  262,  186,  202,  264,  202,  204,
      205,    0,  206,  265,  186,  197,  197,    0,  207,  203,

      202,  205,  203,  263,  203,  197,  203,  206,  205,    0,
      197,  197,  206,  207,  264,  266,  197,  205,  207,  206,
      265,  211,  197,  197,  208,  207,  203,  267,  205,  209,
        0,  208,  197,  209,  206,  210,  210,  197,  197,  206,
      207,  211,  266,  197,  208,  207,  212,  212,  211,  213,
        0,  208,  214,  209,  267,  210,  209,  215,  208,    0,
      209,  215,  210,  210,  213,  214,  216,  212,  211,  213,
      216,  208,  214,  212,  212,  218,  213,  218,  268,  214,
      209,  215,  210,    0,  215,  269,  216,  219,  215,  217,
      219,  213,  214,  216,  212,  218,  213,  216,  217,  214,

      221,    0,  218,  217,  218,  268,  270,  219,  215,  217,
      221,  220,  269,  216,  219,  222,  217,  219,  220,  223,
      221,  224,  218,  223,  224,  217,  220,  221,  222,  272,
      217,  220,  225,  270,  219,  222,  217,  221,  220,  225,
      273,  226,  222,  223,  224,  220,  223,  221,  224,  226,
      223,  224,  225,  220,  228,  222,  272,    0,  220,  225,
      226,  226,  222,    0,  227,  228,  225,  273,  226,  229,
      223,  224,  227,  227,  228,    0,  226,  231,  231,  225,
        0,  228,  274,  275,  227,  229,  230,  226,  226,  229,
      230,  227,  228,  230,  235,  233,  229,    0,  231,  227,

      227,  228,  233,  232,  231,  231,  230,  232,  233,  274,
      275,  227,  229,  230,  235,  233,  229,  230,  234,  276,
      230,  235,  233,  232,  236,  231,  277,  278,  279,  233,
      232,  234,  280,  230,  232,  233,  281,  282,  234,  236,
      283,  235,  233,  285,  236,  234,  276,  284,  286,  288,
      232,  236,  289,  277,  278,  279,  290,  284,  234,  280,
      291,  292,  293,  281,  282,  234,  236,  283,  294,  295,
      285,  236,  297,  298,  284,  286,  288,  299,  300,  289,
      301,  303,  302,  290,  284,  304,  305,  291,  292,  293,
      306,  307,  308,  309,  310,  294,  295,  312,  313,  297,

      298,  302,  314,  315,  299,  300,  317,  301,  303,  302,
      318,  319,  304,  305,  320,  322,  324,  306,  307,  308,
      309,  310,  325,  327,  312,  313,  328,  329,  302,  314,
      315,  330,  323,  317,  323,  331,  332,  318,  319,  333,
      336,  320,  322,  324,  337,  338,    0,  431,  339,  325,
      327,    0,  432,  328,  329,    0,    0,  341,  330,  323,
      336,  323,  331,  332,  337,  338,  333,  336,  339,  340,
      342,  337,  338,  343,  431,  339,  340,  341,  345,  432,
      346,  344,  346,  343,  341,  345,    0,  336,  433,  340,
      342,  337,  338,  343,  434,  339,  340,  342,  345,  344,

      343,  344,  346,  340,  341,  345,    0,  346,  344,  346,
      343,  347,  345,  351,  348,  433,  340,  342,    0,  350,
      343,  434,  349,  350,  347,  345,  344,  351,  344,  346,
      348,  347,  352,  351,  348,    0,    0,  349,  347,    0,
      351,  348,  349,  350,  353,  357,  350,  357,  353,  349,
      350,  347,  352,    0,  351,    0,  354,  348,  347,  352,
      351,  348,  355,  354,  349,  356,  355,  357,  353,  349,
      350,  353,  357,    0,  357,  353,  354,  358,  362,  352,
      356,  359,  362,  354,    0,  356,  355,    0,  360,  355,
      354,  360,  356,  355,  357,  353,  359,  358,    0,  361,

      363,  359,  362,  354,  358,  362,    0,  356,  359,  362,
      361,  360,  356,  355,  364,  360,  364,    0,  360,  361,
      363,    0,  367,  359,  358,  365,  361,  363,  359,  362,
      368,  371,  435,  366,  371,    0,  364,  361,  360,  365,
      366,  364,  367,  364,  370,  365,  361,  363,  369,  367,
      368,  370,  365,  366,  371,    0,  369,  368,  371,  435,
      366,  371,  373,  364,  370,  373,  365,  366,  369,  367,
      372,  370,  365,    0,  437,  369,  378,  368,  370,  375,
      366,  371,  373,  369,  374,  376,  372,  379,  374,  373,
      372,  370,  373,    0,  375,  369,  378,  372,  377,  375,

      376,  437,  380,  378,  374,  376,  375,  379,  377,  373,
      381,  374,  376,  372,  379,  374,  384,  372,  377,  383,
      381,  375,  380,  378,  382,  377,  375,  376,  383,  380,
      381,  374,  376,  385,  379,  377,  384,  381,  386,  383,
      382,  388,  388,  384,  382,  377,  383,  381,  385,  380,
      387,  382,  389,  385,  387,  383,  389,  381,  386,    0,
      385,  439,  388,  384,  440,  386,  383,  382,  388,  388,
      387,  382,  390,    0,  390,  385,  389,  387,  391,  389,
      385,  387,  393,  389,  392,  386,  394,  397,  439,  388,
      441,  440,  390,  394,  391,  395,  396,  387,  391,  390,

      392,  390,  393,  389,  392,  391,  394,  397,  395,  393,
      396,  392,  398,  394,  397,  395,  396,  441,    0,  390,
      394,  391,  395,  396,    0,  391,  399,  392,  402,  393,
      399,  392,  398,  394,  397,  395,  402,  396,  400,  398,
      401,  442,  395,  396,  406,  399,  404,  400,  402,    0,
      399,  401,  403,  399,    0,  402,  403,  399,  400,  398,
      401,  404,  407,  402,  406,  400,  404,  401,  442,    0,
      408,  406,  399,  404,  400,  402,  403,  399,  401,  403,
      409,  405,  407,  403,  405,  400,    0,  401,  404,  407,
      408,  406,    0,  404,  443,  410,  413,  408,  409,  411,

      409,  405,    0,  403,  445,    0,    0,  409,  405,  407,
      410,  405,    0,  412,  411,  410,  413,  408,  414,  411,
      412,  443,  410,  413,  415,  409,  411,  409,  405,  414,
      416,  445,  417,  412,  418,    0,    0,  410,  414,  415,
      412,  411,  410,  413,  415,  414,  411,  412,  446,  419,
      416,  415,  417,  421,  418,    0,  414,  416,  419,  417,
      412,  418,  420,  421,  422,  414,  415,  423,  422,  419,
        0,  415,  420,  421,  420,  446,  419,  416,    0,  417,
      421,  418,  420,  424,  447,  419,  425,  423,  422,  420,
      421,  422,  424,    0,  423,  422,  419,  428,  427,  420,

      421,  420,  425,  424,  448,  426,  425,  426,  429,  420,
      424,  447,  428,  425,  423,  422,  427,  428,  427,  424,
      430,  429,  450,  430,  428,  427,  451,  426,  429,  425,
      424,  448,  426,  425,  426,  429,  452,  454,  455,  428,
      430,  456,  457,  427,  428,  427,  458,  430,  429,  450,
      430,  462,  463,  451,  426,  429,  465,  467,  468,  469,
      470,  471,  474,  452,  454,  455,  472,  430,  456,  457,
      478,  480,  481,  458,  482,  483,  485,  472,  462,  463,
      486,  487,  488,  465,  467,  468,  469,  470,  471,  474,
      489,  492,  493,  472,  494,  495,  496,  478,  480,  481,

      497,  482,  483,  485,  472,  498,  500,  486,  487,  488,
      501,  502,  503,  505,  506,  507,  508,  489,  492,  493,
      509,  494,  495,  496,  510,  511,  512,  497,  513,  514,
      516,  517,  498,  500,    0,    0,    0,  501,  502,  503,
      505,  506,  507,  508,  521,  523,  519,  509,  520,  522,
      524,  510,  511,  512,  526,  513,  514,  516,  517,  519,
        0,  520,  522,  525,  521,  523,  519,  525,  520,  522,
      524,  521,  523,  519,  526,  520,  522,  524,  609,    0,
      531,  526,  610,  531,  532,    0,  519,  525,  520,  522,
      525,  521,  523,  519,  525,  520,  522,  524,  527,  528,

      529,  526,  530,  531,  532,  609,  527,  531,  535,  610,
      531,  532,  528,  611,  525,  529,  530,  533,  527,  528,
      529,    0,  530,  535,  533,  527,  528,  529,  535,  530,
      531,  532,  534,  527,  536,  535,  537,  533,  536,  528,
      611,  612,  529,  530,  533,  527,  528,  529,  534,  530,
      535,  533,  534,  539,  541,  535,  537,  539,  536,  534,
      538,  536,  538,  537,  533,  536,    0,    0,  612,    0,
      540,    0,    0,  539,  541,  534,  544,  540,  545,  534,
      539,  541,  538,  537,  539,  536,  613,  538,  542,  538,
      540,  543,  544,  545,  547,    0,  544,  540,  545,  542,

      539,  541,  543,  544,  540,  545,  546,  548,  542,  538,
      546,  543,  549,  613,  547,  542,  614,  540,  543,  544,
      545,  547,  552,  544,  550,  545,  542,  548,  550,  543,
      546,  615,  549,  546,  548,  542,  551,  546,  543,  549,
      554,  547,  552,  614,  553,    0,    0,  551,  550,  552,
        0,  550,  555,  553,  548,  550,  551,  546,  615,  549,
      554,  617,  555,  551,  553,  556,    0,  554,    0,  552,
        0,  553,  555,  558,  551,  550,  557,  559,  556,  555,
      553,    0,  561,  551,  618,  556,  558,  554,  617,  555,
      559,  553,  556,  558,  562,  557,  557,  559,  563,  555,

      558,  562,  561,  557,  559,  556,  560,  564,  560,  561,
      565,  618,  556,  558,  562,    0,  566,  559,  563,  560,
      558,  562,  557,  557,  559,  563,  560,  564,  562,  561,
      565,  566,  567,  560,  564,  560,  566,  565,  619,  620,
      568,  562,  569,  566,    0,  563,  560,  568,  571,    0,
      570,  572,  567,  560,  564,    0,  574,  565,  566,  567,
      568,  571,  569,  566,  570,  619,  620,  568,  571,  569,
      570,  572,  575,  576,  568,  571,  574,  570,  572,  567,
      573,  578,  573,  574,    0,  575,  576,  568,  571,  569,
      579,  570,  575,  576,    0,  571,  577,  570,  572,  575,

      576,  578,  573,  574,  577,  622,  582,  573,  578,  573,
      579,  580,  575,  576,  582,  580,  577,  579,    0,  575,
      576,  581,    0,  577,  584,  581,  582,  583,  578,  573,
        0,  577,  622,  582,  586,  580,  586,  579,  580,  584,
      583,  582,  580,  577,  584,  581,  623,  583,  581,  585,
      587,  584,  581,  582,  583,  588,  586,  585,  590,  624,
      589,  586,  580,  586,  589,    0,  584,  583,  592,  585,
      587,  584,  581,  623,  583,  588,  585,  587,  590,  591,
      589,    0,  588,  586,  585,  590,  624,  589,  592,  591,
      593,  589,  597,    0,  594,  592,  585,  587,  594,  591,

      596,  595,  588,  595,  593,  590,  591,  589,  597,  596,
      593,    0,  597,  625,  594,  592,  591,  593,  598,  597,
      596,  594,  598,  595,  601,  594,  591,  596,  595,    0,
      595,  593,  600,  599,  600,  597,  596,  593,  603,  597,
      625,  594,  598,  602,  601,  598,  602,  596,  599,  598,
      595,  601,  600,  599,  605,  626,  604,  606,  603,  600,
      599,  600,  627,  602,  628,  603,  629,  630,  632,  598,
      602,  601,  604,  602,  605,  599,  604,  606,  633,  600,
      599,  605,  626,  604,  606,  603,  634,  637,  638,  627,
      602,  628,  639,  629,  630,  632,  640,  645,  646,  604,

      647,  605,  650,  604,  606,  633,  651,  652,  653,  654,
      656,  657,  658,  634,  637,  638,  659,  660,  661,  639,
      662,  663,  664,  640,  645,  646,  666,  647,  667,  650,
      668,  670,  671,  651,  652,  653,  654,  656,  657,  658,
      672,  674,  675,  659,  660,  661,  677,  662,  663,  664,
      676,  741,  678,  666,  682,  667,  680,  668,  670,  671,
      683,  674,  675,  679,  679,  680,  677,  672,  674,  675,
      676,  676,  678,  677,  682,  681,  680,  676,  741,  678,
      683,  682,  684,  680,  679,  681,  684,  683,  674,  675,
      679,  679,  680,  677,  685,  681,  687,  676,  676,  678,

      688,  682,  681,  680,  685,  743,  684,  683,  686,  684,
      689,  679,  681,  684,  685,  686,  687,    0,  744,  691,
      688,  685,  681,  687,  692,  689,    0,  688,  686,  690,
      689,  685,  743,  684,  745,  686,    0,  689,  690,  691,
      746,  685,  686,  687,  692,  744,  691,  688,  693,  690,
      695,  692,  689,  697,  694,  686,  690,  689,  696,  698,
      697,  745,  696,  693,  695,  690,  691,  746,  693,  694,
      695,  692,  702,  697,  694,  693,  690,  695,  696,  698,
      697,  694,  699,  701,  699,  696,  698,  697,  703,  696,
      693,  695,  702,  705,  700,  693,  694,  695,  701,  702,

      697,  694,  699,  701,  706,  696,  698,  700,  703,  699,
      701,  699,  704,  705,  700,  703,  707,  708,  706,  702,
      705,  700,  709,  707,  706,  701,  710,  704,  711,  699,
      701,  706,  704,    0,  700,  703,  707,  708,  715,  704,
      705,  700,  709,  707,  708,  706,  710,  714,  711,  709,
      707,  706,  712,  710,  704,  711,  712,  713,  715,  704,
      713,  716,  714,  707,  708,  715,  717,  714,    0,  709,
      720,    0,  748,  710,  714,  711,  712,  713,  718,  712,
      722,  716,  719,  712,  713,  715,  717,  713,  716,  714,
      720,  718,  721,  717,  714,  719,  721,  720,  718,  748,

      722,  724,  719,  712,  713,  718,  723,  722,  716,  719,
      723,  732,  721,  717,  725,  725,  724,  720,  718,  721,
      726,  724,  719,  721,  726,  718,  727,  722,  724,  719,
      723,  732,  728,  723,  729,  725,  749,  723,  732,  721,
      727,  725,  725,  724,  726,  728,  727,  726,  724,  729,
      733,  726,  728,  727,  729,  730,  731,  723,  732,  728,
      731,  729,  725,  749,  730,  734,  734,  727,  735,  736,
      733,  726,  728,  727,  750,  730,  729,  733,    0,  728,
      731,  729,  730,  731,  737,  740,  734,  731,  735,  736,
      738,  730,  734,  734,  738,  735,  736,  733,  737,  739,

      753,  750,  730,  739,  737,  740,  757,  731,  759,  762,
      765,  737,  740,  734,  738,  735,  736,  738,  766,  768,
      769,  738,  771,  739,  772,  737,  739,  753,  773,  775,
      739,  737,  740,  757,  776,  759,  762,  765,  779,  781,
      782,  738,  783,  784,  789,  766,  768,  769,  790,  771,
      739,  772,  791,  792,  793,  773,  775,  794,    0,  846,
      847,  776,  795,  793,    0,  779,  781,  782,  797,  783,
      784,  789,  791,  792,  793,  790,  795,  794,  796,  791,
      792,  793,  795,    0,  794,  796,  846,  847,  797,  795,
      793,  800,  799,  798,  799,  797,  801,  802,  796,  791,

      792,  793,  804,  795,  794,  796,  800,  798,  803,  795,
      803,  800,  796,  798,  799,  797,  801,  802,  800,  799,
      798,  799,  804,  801,  802,  796,  805,  806,  807,  804,
      803,  808,  810,  800,  798,  803,  809,  803,  800,    0,
      798,  799,  811,  801,  802,  809,  805,  806,  807,  804,
      812,  808,  810,  805,  806,  807,  809,  803,  808,  810,
      813,  814,  811,  809,    0,  816,  817,    0,    0,  811,
      812,  815,  809,  805,  806,  807,  820,  812,  808,  810,
      813,  814,  822,  809,  815,  816,  817,  813,  814,  811,
      821,  815,  816,  817,  818,  819,  820,  812,  815,  819,

      823,  818,  822,  820,  824,  821,    0,  813,  814,  822,
      821,  815,  816,  817,  818,  849,  826,  821,  815,  819,
      823,  818,  819,  820,  824,  827,  819,  823,  818,  822,
      826,  824,  821,  825,  828,  825,  826,  821,  830,    0,
      831,  818,  849,  826,  831,  827,  819,  823,  854,  829,
      856,  824,  827,  833,  828,  825,  829,  826,  830,  834,
      825,  828,  825,  826,  831,  830,  832,  831,  833,  829,
      832,  831,  827,  833,  834,  854,  829,  856,  835,  834,
      833,  828,  825,  829,  836,  830,  834,  837,  838,  839,
      832,  831,  840,  832,  857,  833,  829,  832,  835,  840,

      833,  834,  839,  860,  836,  835,  834,  837,  838,  839,
      863,  836,  840,  864,  837,  838,  839,  832,  866,  840,
        0,  857,  869,  870,  871,  835,  840,  872,  873,  839,
      860,  836,  874,  897,  837,  838,  839,  863,  876,  840,
      864,  877,  869,  870,  871,  866,  878,  872,  873,  869,
      870,  871,  874,  875,  872,  873,  877,  875,  876,  874,
      897,  877,  879,  898,    0,  876,  878,  880,  877,  869,
      870,  871,  881,  878,  872,  873,  882,  875,  882,  874,
      875,  883,  879,  877,  875,  876,  885,  880,  877,  879,
      898,  886,  881,  878,  880,  887,  889,  884,  882,  881,

        0,  883,    0,  882,  875,  882,  885,    0,  883,  879,
      884,  886,  888,  885,  880,  887,  889,  884,  886,  881,
      890,  891,  887,  889,  884,  882,    0,  888,  883,  893,
      894,  895,  888,  885,  891,  896,  900,  884,  886,  888,
      890,  891,  887,  889,  884,  892,  902,  890,  891,  893,
      894,  895,  904,  892,  888,  896,  893,  894,  895,  888,
      905,  891,  896,  900,  909,  892,  908,  890,  891,  907,
      910,    0,  892,  902,  911,  912,  893,  894,  895,  904,
      892,  908,  896,  907,  909,  910,  908,  905,  912,  907,
      910,  909,  892,  908,  911,  912,  907,  910,  913,  914,

      916,  911,  912,  915,  918,  920,    0,    0,  908,  923,
      907,  909,  910,  908,  915,  912,  907,  910,  913,  914,
      916,  911,  912,  915,  924,  913,  914,  916,  925,  923,
      915,  918,  920,  927,  928,    0,  923,  931,  926,  932,
        0,  915,    0,    0,  924,  913,  914,  916,  925,    0,
      915,  924,  926,  927,  928,  925,  923,  931,  926,  932,
      927,  928,    0,    0,  931,  926,  932,    0,    0,    0,
        0,  924,    0,    0,    0,  925,    0,    0,    0,  926,
      927,  928,    0,    0,  931,  926,  932,  934,    0,    0,
      934,  935,    0,  935,  935,  937,    0,  937,  937,  938,

        0,  938,  938,  939,    0,  939,  939,  940,    0,  940,
      940,  933,  933,  933,  933,  933,  933,  933,  933,  933,
      933,  933,  933,  933,  933,  933,  933,  933,  933,  933,
      933,  933,  933,  933,  933,  933,  933,  933,  933,  933,
      933,  933,  933,  933,  933,  933,  933,  933,  933,  933,
      933,  933,  933,  933,  933,  933,  933,  933,  933,  933,
      933,  933,  933,  933,  933,  933,  933,  933,  933,  933,
      933,  933,  933,  933,  933,  933,  933
    } ;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "flex_lexer.l"
/**
 * lexer
 *
 *
 */
/***************************
 ** Section 1: Definitions
 ***************************/
#line 12 "flex_lexer.l"

#include "../sql/Expr.h"
#include "bison_parser.h"
#include <stdio.h>

#define TOKEN(name) { return SQL_##name; }

/***************************
 ** Section 2: Rules
 ***************************/
/* Define the output files */
/* Make reentrant */
/* performance tweeks */
/* other flags */
/* %option nodefault */

/***************************
 ** Section 3: Rules
 ***************************/
#line 1609 "flex_lexer.cpp"

#define INITIAL 0
#define COMMENT 1

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

/* Holds the entire state of the reentrant scanner. */
struct yyguts_t
    {

    /* User-defined. Not touched by flex. */
    YY_EXTRA_TYPE yyextra_r;

    /* The rest are the same as the globals declared in the non-reentrant scanner. */
    FILE *yyin_r, *yyout_r;
    size_t yy_buffer_stack_top; /**< index of top of stack. */
    size_t yy_buffer_stack_max; /**< capacity of stack. */
    YY_BUFFER_STATE * yy_buffer_stack; /**< Stack as an array. */
    char yy_hold_char;
    int yy_n_chars;
    int yyleng_r;
    char *yy_c_buf_p;
    int yy_init;
    int yy_start;
    int yy_did_buffer_switch_on_eof;
    int yy_start_stack_ptr;
    int yy_start_stack_depth;
    int *yy_start_stack;
    yy_state_type yy_last_accepting_state;
    char* yy_last_accepting_cpos;

    int yylineno_r;
    int yy_flex_debug_r;

    char *yytext_r;
    int yy_more_flag;
    int yy_more_len;

    YYSTYPE * yylval_r;

    YYLTYPE * yylloc_r;

    }; /* end struct yyguts_t */

static int yy_init_globals (yyscan_t yyscanner );

    /* This must go here because YYSTYPE and YYLTYPE are included
     * from bison output in section 1.*/
    #    define yylval yyg->yylval_r
    
    #    define yylloc yyg->yylloc_r
    
int hsql_lex_init (yyscan_t* scanner);

int hsql_lex_init_extra (YY_EXTRA_TYPE user_defined,yyscan_t* scanner);

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int hsql_lex_destroy (yyscan_t yyscanner );

int hsql_get_debug (yyscan_t yyscanner );

void hsql_set_debug (int debug_flag ,yyscan_t yyscanner );

YY_EXTRA_TYPE hsql_get_extra (yyscan_t yyscanner );

void hsql_set_extra (YY_EXTRA_TYPE user_defined ,yyscan_t yyscanner );

FILE *hsql_get_in (yyscan_t yyscanner );

void hsql_set_in  (FILE * in_str ,yyscan_t yyscanner );

FILE *hsql_get_out (yyscan_t yyscanner );

void hsql_set_out  (FILE * out_str ,yyscan_t yyscanner );

int hsql_get_leng (yyscan_t yyscanner );

char *hsql_get_text (yyscan_t yyscanner );

int hsql_get_lineno (yyscan_t yyscanner );

void hsql_set_lineno (int line_number ,yyscan_t yyscanner );

YYSTYPE * hsql_get_lval (yyscan_t yyscanner );

void hsql_set_lval (YYSTYPE * yylval_param ,yyscan_t yyscanner );

       YYLTYPE *hsql_get_lloc (yyscan_t yyscanner );
    
        void hsql_set_lloc (YYLTYPE * yylloc_param ,yyscan_t yyscanner );
    
/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int hsql_wrap (yyscan_t yyscanner );
#else
extern int hsql_wrap (yyscan_t yyscanner );
#endif
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int ,yyscan_t yyscanner);
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * ,yyscan_t yyscanner);
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (yyscan_t yyscanner );
#else
static int input (yyscan_t yyscanner );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, yyleng, 1, yyout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, yyin))==0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg , yyscanner)
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int hsql_lex \
               (YYSTYPE * yylval_param,YYLTYPE * yylloc_param ,yyscan_t yyscanner);

#define YY_DECL int hsql_lex \
               (YYSTYPE * yylval_param, YYLTYPE * yylloc_param , yyscan_t yyscanner)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

#line 51 "flex_lexer.l"


#line 1857 "flex_lexer.cpp"

    yylval = yylval_param;

    yylloc = yylloc_param;

	if ( !yyg->yy_init )
		{
		yyg->yy_init = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yyg->yy_start )
			yyg->yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			hsql_ensure_buffer_stack (yyscanner);
			YY_CURRENT_BUFFER_LVALUE =
				hsql__create_buffer(yyin,YY_BUF_SIZE ,yyscanner);
		}

		hsql__load_buffer_state(yyscanner );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yyg->yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yyg->yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yyg->yy_start;
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				yyg->yy_last_accepting_state = yy_current_state;
				yyg->yy_last_accepting_cpos = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 934 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_current_state != 933 );
		yy_cp = yyg->yy_last_accepting_cpos;
		yy_current_state = yyg->yy_last_accepting_state;

yy_find_action:
		yy_act = yy_accept[yy_current_state];

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = yyg->yy_hold_char;
			yy_cp = yyg->yy_last_accepting_cpos;
			yy_current_state = yyg->yy_last_accepting_state;
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 53 "flex_lexer.l"
BEGIN(COMMENT);
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 54 "flex_lexer.l"
/* skipping comment content until a end of line is read */;
	YY_BREAK
case 3:
/* rule 3 can match eol */
YY_RULE_SETUP
#line 55 "flex_lexer.l"
BEGIN(INITIAL);
	YY_BREAK
case 4:
/* rule 4 can match eol */
YY_RULE_SETUP
#line 58 "flex_lexer.l"
/* skip whitespace */;
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 62 "flex_lexer.l"
TOKEN(DEALLOCATE)
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 63 "flex_lexer.l"
TOKEN(PARAMETERS)
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 64 "flex_lexer.l"
TOKEN(INTERSECT)
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 65 "flex_lexer.l"
TOKEN(TEMPORARY)
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 66 "flex_lexer.l"
TOKEN(TIMESTAMP)
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 67 "flex_lexer.l"
TOKEN(DISTINCT)
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 68 "flex_lexer.l"
TOKEN(NVARCHAR)
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 69 "flex_lexer.l"
TOKEN(RESTRICT)
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 70 "flex_lexer.l"
TOKEN(TRUNCATE)
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 71 "flex_lexer.l"
TOKEN(ANALYZE)
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 72 "flex_lexer.l"
TOKEN(BETWEEN)
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 73 "flex_lexer.l"
TOKEN(CASCADE)
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 74 "flex_lexer.l"
TOKEN(COLUMNS)
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 75 "flex_lexer.l"
TOKEN(CONTROL)
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 76 "flex_lexer.l"
TOKEN(DEFAULT)
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 77 "flex_lexer.l"
TOKEN(EXECUTE)
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 78 "flex_lexer.l"
TOKEN(EXPLAIN)
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 79 "flex_lexer.l"
TOKEN(HISTORY)
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 80 "flex_lexer.l"
TOKEN(INTEGER)
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 81 "flex_lexer.l"
TOKEN(NATURAL)
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 82 "flex_lexer.l"
TOKEN(PREPARE)
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 83 "flex_lexer.l"
TOKEN(PRIMARY)
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 84 "flex_lexer.l"
TOKEN(SCHEMAS)
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 85 "flex_lexer.l"
TOKEN(SPATIAL)
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 86 "flex_lexer.l"
TOKEN(VIRTUAL)
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 87 "flex_lexer.l"
TOKEN(BEFORE)
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 88 "flex_lexer.l"
TOKEN(COLUMN)
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 89 "flex_lexer.l"
TOKEN(CREATE)
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 90 "flex_lexer.l"
TOKEN(DELETE)
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 91 "flex_lexer.l"
TOKEN(DIRECT)
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 92 "flex_lexer.l"
TOKEN(DOUBLE)
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 93 "flex_lexer.l"
TOKEN(ESCAPE)
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 94 "flex_lexer.l"
TOKEN(EXCEPT)
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 95 "flex_lexer.l"
TOKEN(EXISTS)
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 96 "flex_lexer.l"
TOKEN(GLOBAL)
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 97 "flex_lexer.l"
TOKEN(HAVING)
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 98 "flex_lexer.l"
TOKEN(IMPORT)
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 99 "flex_lexer.l"
TOKEN(INSERT)
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 100 "flex_lexer.l"
TOKEN(ISNULL)
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 101 "flex_lexer.l"
TOKEN(OFFSET)
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 102 "flex_lexer.l"
TOKEN(RENAME)
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 103 "flex_lexer.l"
TOKEN(SCHEMA)
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 104 "flex_lexer.l"
TOKEN(SELECT)
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 105 "flex_lexer.l"
TOKEN(SORTED)
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 106 "flex_lexer.l"
TOKEN(TABLES)
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 107 "flex_lexer.l"
TOKEN(UNIQUE)
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 108 "flex_lexer.l"
TOKEN(UNLOAD)
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 109 "flex_lexer.l"
TOKEN(UPDATE)
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 110 "flex_lexer.l"
TOKEN(VALUES)
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 111 "flex_lexer.l"
TOKEN(AFTER)
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 112 "flex_lexer.l"
TOKEN(ALTER)
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 113 "flex_lexer.l"
TOKEN(CROSS)
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 114 "flex_lexer.l"
TOKEN(DELTA)
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 115 "flex_lexer.l"
TOKEN(GROUP)
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 116 "flex_lexer.l"
TOKEN(INDEX)
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 117 "flex_lexer.l"
TOKEN(INNER)
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 118 "flex_lexer.l"
TOKEN(LIMIT)
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 119 "flex_lexer.l"
TOKEN(LOCAL)
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 120 "flex_lexer.l"
TOKEN(MERGE)
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 121 "flex_lexer.l"
TOKEN(MINUS)
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 122 "flex_lexer.l"
TOKEN(ORDER)
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 123 "flex_lexer.l"
TOKEN(OUTER)
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 124 "flex_lexer.l"
TOKEN(RIGHT)
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 125 "flex_lexer.l"
TOKEN(TABLE)
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 126 "flex_lexer.l"
TOKEN(UNION)
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 127 "flex_lexer.l"
TOKEN(USING)
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 128 "flex_lexer.l"
TOKEN(WHERE)
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 129 "flex_lexer.l"
TOKEN(CALL)
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 130 "flex_lexer.l"
TOKEN(DATE)
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 131 "flex_lexer.l"
TOKEN(DESC)
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 132 "flex_lexer.l"
TOKEN(DROP)
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 133 "flex_lexer.l"
TOKEN(FILE)
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 134 "flex_lexer.l"
TOKEN(FROM)
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 135 "flex_lexer.l"
TOKEN(FULL)
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 136 "flex_lexer.l"
TOKEN(HASH)
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 137 "flex_lexer.l"
TOKEN(HINT)
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 138 "flex_lexer.l"
TOKEN(INTO)
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 139 "flex_lexer.l"
TOKEN(JOIN)
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 140 "flex_lexer.l"
TOKEN(LEFT)
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 141 "flex_lexer.l"
TOKEN(LIKE)
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 142 "flex_lexer.l"
TOKEN(LOAD)
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 143 "flex_lexer.l"
TOKEN(NULL)
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 144 "flex_lexer.l"
TOKEN(PART)
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 145 "flex_lexer.l"
TOKEN(PLAN)
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 146 "flex_lexer.l"
TOKEN(SHOW)
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 147 "flex_lexer.l"
TOKEN(TEXT)
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 148 "flex_lexer.l"
TOKEN(TIME)
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 149 "flex_lexer.l"
TOKEN(VIEW)
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 150 "flex_lexer.l"
TOKEN(WITH)
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 151 "flex_lexer.l"
TOKEN(ADD)
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 152 "flex_lexer.l"
TOKEN(ALL)
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 153 "flex_lexer.l"
TOKEN(AND)
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 154 "flex_lexer.l"
TOKEN(ASC)
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 155 "flex_lexer.l"
TOKEN(CSV)
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 156 "flex_lexer.l"
TOKEN(FOR)
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 157 "flex_lexer.l"
TOKEN(INT)
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 158 "flex_lexer.l"
TOKEN(KEY)
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 159 "flex_lexer.l"
TOKEN(NOT)
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 160 "flex_lexer.l"
TOKEN(OFF)
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 161 "flex_lexer.l"
TOKEN(SET)
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 162 "flex_lexer.l"
TOKEN(TBL)
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 163 "flex_lexer.l"
TOKEN(TOP)
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 164 "flex_lexer.l"
TOKEN(AS)
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 165 "flex_lexer.l"
TOKEN(BY)
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 166 "flex_lexer.l"
TOKEN(IF)
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 167 "flex_lexer.l"
TOKEN(IN)
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 168 "flex_lexer.l"
TOKEN(IS)
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 169 "flex_lexer.l"
TOKEN(OF)
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 170 "flex_lexer.l"
TOKEN(ON)
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 171 "flex_lexer.l"
TOKEN(OR)
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 172 "flex_lexer.l"
TOKEN(TO)
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 173 "flex_lexer.l"
TOKEN(DATABASE)
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 174 "flex_lexer.l"
TOKEN(DATABASES)
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 175 "flex_lexer.l"
TOKEN(VARCHAR)
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 176 "flex_lexer.l"
TOKEN(TINYINT)
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 177 "flex_lexer.l"
TOKEN(CHAR)
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 178 "flex_lexer.l"
TOKEN(USE)
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 182 "flex_lexer.l"
TOKEN(NOTEQUALS)
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 183 "flex_lexer.l"
TOKEN(LESSEQ)
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 184 "flex_lexer.l"
TOKEN(GREATEREQ)
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 187 "flex_lexer.l"
{ return yytext[0]; }
	YY_BREAK
case 126:
#line 191 "flex_lexer.l"
case 127:
YY_RULE_SETUP
#line 191 "flex_lexer.l"
{
	yylval->fval = atof(yytext);
	return SQL_FLOATVAL;
}
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 196 "flex_lexer.l"
{
	yylval->ival = atol(yytext);
	return SQL_INTVAL;
}
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 201 "flex_lexer.l"
{
	// Crop the leading and trailing quote char
	yylval->sval = hsql::substr(yytext, 1, strlen(yytext)-1);
	return SQL_IDENTIFIER;
}
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 207 "flex_lexer.l"
{
	yylval->sval = strdup(yytext);
	return SQL_IDENTIFIER;
}
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 213 "flex_lexer.l"
{
	// Crop the leading and trailing quote char
	yylval->sval = hsql::substr(yytext, 1, strlen(yytext)-1);
	return SQL_STRING;
}
	YY_BREAK
case 132:
YY_RULE_SETUP
#line 219 "flex_lexer.l"
{ fprintf(stderr, "[SQL-Lexer-Error] Unknown Character: %c\n", yytext[0]); return 0; }
	YY_BREAK
case 133:
YY_RULE_SETUP
#line 222 "flex_lexer.l"
ECHO;
	YY_BREAK
#line 2621 "flex_lexer.cpp"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(COMMENT):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yyg->yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yyg->yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * hsql_lex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yyg->yy_c_buf_p <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yyg->yy_c_buf_p = yyg->yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state( yyscanner );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state , yyscanner);

			yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yyg->yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yyg->yy_last_accepting_cpos;
				yy_current_state = yyg->yy_last_accepting_state;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer( yyscanner ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yyg->yy_did_buffer_switch_on_eof = 0;

				if ( hsql_wrap(yyscanner ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yyg->yy_c_buf_p = yyg->yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yyg->yy_c_buf_p =
					yyg->yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yyg->yy_c_buf_p =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars];

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of hsql_lex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = yyg->yytext_ptr;
	register int number_to_move, i;
	int ret_val;

	if ( yyg->yy_c_buf_p > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yyg->yy_c_buf_p - yyg->yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yyg->yy_c_buf_p - yyg->yytext_ptr) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

			int yy_c_buf_p_offset =
				(int) (yyg->yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					hsql_realloc((void *) b->yy_ch_buf,b->yy_buf_size + 2 ,yyscanner );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yyg->yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			yyg->yy_n_chars, (size_t) num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	if ( yyg->yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			hsql_restart(yyin  ,yyscanner);
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) (yyg->yy_n_chars + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = yyg->yy_n_chars + number_to_move + (yyg->yy_n_chars >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) hsql_realloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size ,yyscanner );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	yyg->yy_n_chars += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yyg->yytext_ptr = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (yyscan_t yyscanner)
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	yy_current_state = yyg->yy_start;

	for ( yy_cp = yyg->yytext_ptr + YY_MORE_ADJ; yy_cp < yyg->yy_c_buf_p; ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			yyg->yy_last_accepting_state = yy_current_state;
			yyg->yy_last_accepting_cpos = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 934 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state , yyscan_t yyscanner)
{
	register int yy_is_jam;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner; /* This var may be unused depending upon options. */
	register char *yy_cp = yyg->yy_c_buf_p;

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		yyg->yy_last_accepting_state = yy_current_state;
		yyg->yy_last_accepting_cpos = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 934 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 933);

	return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (yyscan_t yyscanner)
#else
    static int input  (yyscan_t yyscanner)
#endif

{
	int c;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	*yyg->yy_c_buf_p = yyg->yy_hold_char;

	if ( *yyg->yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yyg->yy_c_buf_p < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			/* This was really a NUL. */
			*yyg->yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = yyg->yy_c_buf_p - yyg->yytext_ptr;
			++yyg->yy_c_buf_p;

			switch ( yy_get_next_buffer( yyscanner ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					hsql_restart(yyin ,yyscanner);

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( hsql_wrap(yyscanner ) )
						return EOF;

					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput(yyscanner);
#else
					return input(yyscanner);
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yyg->yy_c_buf_p = yyg->yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yyg->yy_c_buf_p;	/* cast for 8-bit char's */
	*yyg->yy_c_buf_p = '\0';	/* preserve yytext */
	yyg->yy_hold_char = *++yyg->yy_c_buf_p;

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * @param yyscanner The scanner object.
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void hsql_restart  (FILE * input_file , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! YY_CURRENT_BUFFER ){
        hsql_ensure_buffer_stack (yyscanner);
		YY_CURRENT_BUFFER_LVALUE =
            hsql__create_buffer(yyin,YY_BUF_SIZE ,yyscanner);
	}

	hsql__init_buffer(YY_CURRENT_BUFFER,input_file ,yyscanner);
	hsql__load_buffer_state(yyscanner );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * @param yyscanner The scanner object.
 */
    void hsql__switch_to_buffer  (YY_BUFFER_STATE  new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	/* TODO. We should be able to replace this entire function body
	 * with
	 *		hsql_pop_buffer_state();
	 *		hsql_push_buffer_state(new_buffer);
     */
	hsql_ensure_buffer_stack (yyscanner);
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	hsql__load_buffer_state(yyscanner );

	/* We don't actually know whether we did this switch during
	 * EOF (hsql_wrap()) processing, but the only time this flag
	 * is looked at is after hsql_wrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yyg->yy_did_buffer_switch_on_eof = 1;
}

static void hsql__load_buffer_state  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	yyg->yytext_ptr = yyg->yy_c_buf_p = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	yyg->yy_hold_char = *yyg->yy_c_buf_p;
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * @param yyscanner The scanner object.
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE hsql__create_buffer  (FILE * file, int  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) hsql_alloc(sizeof( struct yy_buffer_state ) ,yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in hsql__create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) hsql_alloc(b->yy_buf_size + 2 ,yyscanner );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in hsql__create_buffer()" );

	b->yy_is_our_buffer = 1;

	hsql__init_buffer(b,file ,yyscanner);

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with hsql__create_buffer()
 * @param yyscanner The scanner object.
 */
    void hsql__delete_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		hsql_free((void *) b->yy_ch_buf ,yyscanner );

	hsql_free((void *) b ,yyscanner );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a hsql_restart() or at EOF.
 */
    static void hsql__init_buffer  (YY_BUFFER_STATE  b, FILE * file , yyscan_t yyscanner)

{
	int oerrno = errno;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	hsql__flush_buffer(b ,yyscanner);

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then hsql__init_buffer was _probably_
     * called from hsql_restart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * @param yyscanner The scanner object.
 */
    void hsql__flush_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		hsql__load_buffer_state(yyscanner );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  @param yyscanner The scanner object.
 */
void hsql_push_buffer_state (YY_BUFFER_STATE new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (new_buffer == NULL)
		return;

	hsql_ensure_buffer_stack(yyscanner);

	/* This block is copied from hsql__switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		yyg->yy_buffer_stack_top++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from hsql__switch_to_buffer. */
	hsql__load_buffer_state(yyscanner );
	yyg->yy_did_buffer_switch_on_eof = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  @param yyscanner The scanner object.
 */
void hsql_pop_buffer_state (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (!YY_CURRENT_BUFFER)
		return;

	hsql__delete_buffer(YY_CURRENT_BUFFER ,yyscanner);
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if (yyg->yy_buffer_stack_top > 0)
		--yyg->yy_buffer_stack_top;

	if (YY_CURRENT_BUFFER) {
		hsql__load_buffer_state(yyscanner );
		yyg->yy_did_buffer_switch_on_eof = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void hsql_ensure_buffer_stack (yyscan_t yyscanner)
{
	int num_to_alloc;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if (!yyg->yy_buffer_stack) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		yyg->yy_buffer_stack = (struct yy_buffer_state**)hsql_alloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in hsql_ensure_buffer_stack()" );
								  
		memset(yyg->yy_buffer_stack, 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		yyg->yy_buffer_stack_max = num_to_alloc;
		yyg->yy_buffer_stack_top = 0;
		return;
	}

	if (yyg->yy_buffer_stack_top >= (yyg->yy_buffer_stack_max) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = yyg->yy_buffer_stack_max + grow_size;
		yyg->yy_buffer_stack = (struct yy_buffer_state**)hsql_realloc
								(yyg->yy_buffer_stack,
								num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in hsql_ensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset(yyg->yy_buffer_stack + yyg->yy_buffer_stack_max, 0, grow_size * sizeof(struct yy_buffer_state*));
		yyg->yy_buffer_stack_max = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE hsql__scan_buffer  (char * base, yy_size_t  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) hsql_alloc(sizeof( struct yy_buffer_state ) ,yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in hsql__scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	hsql__switch_to_buffer(b ,yyscanner );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to hsql_lex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       hsql__scan_bytes() instead.
 */
YY_BUFFER_STATE hsql__scan_string (yyconst char * yystr , yyscan_t yyscanner)
{
    
	return hsql__scan_bytes(yystr,strlen(yystr) ,yyscanner);
}

/** Setup the input buffer state to scan the given bytes. The next call to hsql_lex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE hsql__scan_bytes  (yyconst char * yybytes, int  _yybytes_len , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) hsql_alloc(n ,yyscanner );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in hsql__scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = hsql__scan_buffer(buf,n ,yyscanner);
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in hsql__scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg , yyscan_t yyscanner)
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = yyg->yy_hold_char; \
		yyg->yy_c_buf_p = yytext + yyless_macro_arg; \
		yyg->yy_hold_char = *yyg->yy_c_buf_p; \
		*yyg->yy_c_buf_p = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the user-defined data for this scanner.
 * @param yyscanner The scanner object.
 */
YY_EXTRA_TYPE hsql_get_extra  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyextra;
}

/** Get the current line number.
 * @param yyscanner The scanner object.
 */
int hsql_get_lineno  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    
        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yylineno;
}

/** Get the current column number.
 * @param yyscanner The scanner object.
 */
int hsql_get_column  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    
        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yycolumn;
}

/** Get the input stream.
 * @param yyscanner The scanner object.
 */
FILE *hsql_get_in  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyin;
}

/** Get the output stream.
 * @param yyscanner The scanner object.
 */
FILE *hsql_get_out  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyout;
}

/** Get the length of the current token.
 * @param yyscanner The scanner object.
 */
int hsql_get_leng  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyleng;
}

/** Get the current token.
 * @param yyscanner The scanner object.
 */

char *hsql_get_text  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yytext;
}

/** Set the user-defined data. This data is never touched by the scanner.
 * @param user_defined The data to be associated with this scanner.
 * @param yyscanner The scanner object.
 */
void hsql_set_extra (YY_EXTRA_TYPE  user_defined , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyextra = user_defined ;
}

/** Set the current line number.
 * @param line_number
 * @param yyscanner The scanner object.
 */
void hsql_set_lineno (int  line_number , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* lineno is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           yy_fatal_error( "hsql_set_lineno called with no buffer" , yyscanner); 
    
    yylineno = line_number;
}

/** Set the current column.
 * @param line_number
 * @param yyscanner The scanner object.
 */
void hsql_set_column (int  column_no , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* column is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           yy_fatal_error( "hsql_set_column called with no buffer" , yyscanner); 
    
    yycolumn = column_no;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * @param yyscanner The scanner object.
 * @see hsql__switch_to_buffer
 */
void hsql_set_in (FILE *  in_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyin = in_str ;
}

void hsql_set_out (FILE *  out_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyout = out_str ;
}

int hsql_get_debug  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yy_flex_debug;
}

void hsql_set_debug (int  bdebug , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yy_flex_debug = bdebug ;
}

/* Accessor methods for yylval and yylloc */

YYSTYPE * hsql_get_lval  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yylval;
}

void hsql_set_lval (YYSTYPE *  yylval_param , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yylval = yylval_param;
}

YYLTYPE *hsql_get_lloc  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yylloc;
}
    
void hsql_set_lloc (YYLTYPE *  yylloc_param , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yylloc = yylloc_param;
}
    
/* User-visible API */

/* hsql_lex_init is special because it creates the scanner itself, so it is
 * the ONLY reentrant function that doesn't take the scanner as the last argument.
 * That's why we explicitly handle the declaration, instead of using our macros.
 */

int hsql_lex_init(yyscan_t* ptr_yy_globals)

{
    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) hsql_alloc ( sizeof( struct yyguts_t ), NULL );

    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));

    return yy_init_globals ( *ptr_yy_globals );
}

/* hsql_lex_init_extra has the same functionality as hsql_lex_init, but follows the
 * convention of taking the scanner as the last argument. Note however, that
 * this is a *pointer* to a scanner, as it will be allocated by this call (and
 * is the reason, too, why this function also must handle its own declaration).
 * The user defined value in the first argument will be available to hsql_alloc in
 * the yyextra field.
 */

int hsql_lex_init_extra(YY_EXTRA_TYPE yy_user_defined,yyscan_t* ptr_yy_globals )

{
    struct yyguts_t dummy_yyguts;

    hsql_set_extra (yy_user_defined, &dummy_yyguts);

    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }
	
    *ptr_yy_globals = (yyscan_t) hsql_alloc ( sizeof( struct yyguts_t ), &dummy_yyguts );
	
    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }
    
    /* By setting to 0xAA, we expose bugs in
    yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));
    
    hsql_set_extra (yy_user_defined, *ptr_yy_globals);
    
    return yy_init_globals ( *ptr_yy_globals );
}

static int yy_init_globals (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from hsql_lex_destroy(), so don't allocate here.
     */

    yyg->yy_buffer_stack = 0;
    yyg->yy_buffer_stack_top = 0;
    yyg->yy_buffer_stack_max = 0;
    yyg->yy_c_buf_p = (char *) 0;
    yyg->yy_init = 0;
    yyg->yy_start = 0;

    yyg->yy_start_stack_ptr = 0;
    yyg->yy_start_stack_depth = 0;
    yyg->yy_start_stack =  NULL;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = (FILE *) 0;
    yyout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * hsql_lex_init()
     */
    return 0;
}

/* hsql_lex_destroy is for both reentrant and non-reentrant scanners. */
int hsql_lex_destroy  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		hsql__delete_buffer(YY_CURRENT_BUFFER ,yyscanner );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		hsql_pop_buffer_state(yyscanner);
	}

	/* Destroy the stack itself. */
	hsql_free(yyg->yy_buffer_stack ,yyscanner);
	yyg->yy_buffer_stack = NULL;

    /* Destroy the start condition stack. */
        hsql_free(yyg->yy_start_stack ,yyscanner );
        yyg->yy_start_stack = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * hsql_lex() is called, initialization will occur. */
    yy_init_globals( yyscanner);

    /* Destroy the main struct (reentrant only). */
    hsql_free ( yyscanner , yyscanner );
    yyscanner = NULL;
    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n , yyscan_t yyscanner)
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s , yyscan_t yyscanner)
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *hsql_alloc (yy_size_t  size , yyscan_t yyscanner)
{
	return (void *) malloc( size );
}

void *hsql_realloc  (void * ptr, yy_size_t  size , yyscan_t yyscanner)
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void hsql_free (void * ptr , yyscan_t yyscanner)
{
	free( (char *) ptr );	/* see hsql_realloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 222 "flex_lexer.l"


/***************************
 ** Section 3: User code
 ***************************/

int yyerror(const char *msg) {
    fprintf(stderr, "[SQL-Lexer-Error] %s\n",msg); return 0;
}

