#line 2 "flex_lexer.cpp"

#line 4 "flex_lexer.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* An opaque pointer. */
#ifndef YY_TYPEDEF_YY_SCANNER_T
#define YY_TYPEDEF_YY_SCANNER_T
typedef void* yyscan_t;
#endif

/* For convenience, these vars (plus the bison vars far below)
   are macros in the reentrant scanner. */
#define yyin yyg->yyin_r
#define yyout yyg->yyout_r
#define yyextra yyg->yyextra_r
#define yyleng yyg->yyleng_r
#define yytext yyg->yytext_r
#define yylineno (YY_CURRENT_BUFFER_LVALUE->yy_bs_lineno)
#define yycolumn (YY_CURRENT_BUFFER_LVALUE->yy_bs_column)
#define yy_flex_debug yyg->yy_flex_debug_r

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yyg->yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yyg->yy_start - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE hsql_restart(yyin ,yyscanner )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = yyg->yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yyg->yy_c_buf_p = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, yyg->yytext_ptr , yyscanner )

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via hsql_restart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( yyg->yy_buffer_stack \
                          ? yyg->yy_buffer_stack[yyg->yy_buffer_stack_top] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE yyg->yy_buffer_stack[yyg->yy_buffer_stack_top]

void hsql_restart (FILE *input_file ,yyscan_t yyscanner );
void hsql__switch_to_buffer (YY_BUFFER_STATE new_buffer ,yyscan_t yyscanner );
YY_BUFFER_STATE hsql__create_buffer (FILE *file,int size ,yyscan_t yyscanner );
void hsql__delete_buffer (YY_BUFFER_STATE b ,yyscan_t yyscanner );
void hsql__flush_buffer (YY_BUFFER_STATE b ,yyscan_t yyscanner );
void hsql_push_buffer_state (YY_BUFFER_STATE new_buffer ,yyscan_t yyscanner );
void hsql_pop_buffer_state (yyscan_t yyscanner );

static void hsql_ensure_buffer_stack (yyscan_t yyscanner );
static void hsql__load_buffer_state (yyscan_t yyscanner );
static void hsql__init_buffer (YY_BUFFER_STATE b,FILE *file ,yyscan_t yyscanner );

#define YY_FLUSH_BUFFER hsql__flush_buffer(YY_CURRENT_BUFFER ,yyscanner)

YY_BUFFER_STATE hsql__scan_buffer (char *base,yy_size_t size ,yyscan_t yyscanner );
YY_BUFFER_STATE hsql__scan_string (yyconst char *yy_str ,yyscan_t yyscanner );
YY_BUFFER_STATE hsql__scan_bytes (yyconst char *bytes,int len ,yyscan_t yyscanner );

void *hsql_alloc (yy_size_t ,yyscan_t yyscanner );
void *hsql_realloc (void *,yy_size_t ,yyscan_t yyscanner );
void hsql_free (void * ,yyscan_t yyscanner );

#define yy_new_buffer hsql__create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        hsql_ensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            hsql__create_buffer(yyin,YY_BUF_SIZE ,yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        hsql_ensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            hsql__create_buffer(yyin,YY_BUF_SIZE ,yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define hsql_wrap(n) 1
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

typedef int yy_state_type;

#define yytext_ptr yytext_r

static yy_state_type yy_get_previous_state (yyscan_t yyscanner );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  ,yyscan_t yyscanner);
static int yy_get_next_buffer (yyscan_t yyscanner );
static void yy_fatal_error (yyconst char msg[] ,yyscan_t yyscanner );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yyg->yytext_ptr = yy_bp; \
	yyleng = (size_t) (yy_cp - yy_bp); \
	yyg->yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yyg->yy_c_buf_p = yy_cp;

#define YY_NUM_RULES 134
#define YY_END_OF_BUFFER 135
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[940] =
    {   0,
        0,    0,    2,    2,  135,  133,    4,    4,  133,  126,
      133,  126,  126,  129,  126,  126,  131,  131,  131,  131,
      131,  131,  131,  131,  131,  131,  131,  131,  131,  131,
      131,  131,  131,  131,  131,  131,  131,  131,  131,    2,
        2,    3,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    4,    0,    0,  132,    1,  128,  127,
      129,  124,  123,  125,  131,  131,  131,  131,  131,  107,
      131,  108,  131,  131,  131,  131,  131,  131,  131,  131,

      131,  131,  131,  131,  131,  131,  131,  131,  131,  131,
      131,  131,  109,  131,  110,  111,  131,  131,  131,  131,
      131,  131,  131,  131,  131,  131,  131,  112,  113,  114,
      131,  131,  131,  131,  131,  131,  131,  131,  131,  131,
      131,  131,  131,  131,  131,  115,  131,  131,  131,  131,
      131,  131,  131,  131,    2,    2,    2,    2,    2,    1,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,

        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,  130,  127,   94,  131,
       95,  131,  131,   96,   97,  131,  131,  131,  131,  131,
      131,  131,  131,  131,  131,   98,  131,  131,  131,  131,
      131,  131,  131,  131,  131,  131,  131,  131,  131,  131,
      131,   99,  131,  131,  131,  131,  131,  131,  131,  131,
      131,  131,  131,  131,  100,  131,  131,  101,  131,  131,
      131,  131,  131,  131,  131,  131,  102,  131,  131,  103,

      131,  131,  131,  131,  131,  131,  131,  131,  131,  131,
      131,  104,  131,  131,  131,  131,  105,  131,  131,  131,
      131,  106,  131,  131,  131,  131,  121,  131,  131,  131,
      131,  131,  131,  131,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,

        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,  131,  131,  131,  131,  131,   72,  131,  120,
      131,  131,  131,  131,  131,  131,   73,  131,  131,  131,
      131,   74,  131,  131,  131,   75,  131,  131,  131,  131,
      131,   76,   77,   78,  131,  131,   79,  131,   80,  131,
      131,  131,  131,  131,  131,   81,  131,   82,   83,   84,
      131,   85,  131,  131,  131,  131,   86,  131,  131,  131,
      131,  131,   87,   88,  131,  131,  131,  131,  131,  131,

      131,   89,  131,  131,  131,  131,   90,   91,  131,  131,
      131,  131,  131,  131,  131,  131,  131,   92,  131,  131,
       93,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,

        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
       54,   55,  131,  131,  131,  131,  122,  131,  131,  131,
       56,  131,  131,  131,  131,   57,  131,  131,  131,  131,
      131,  131,  131,  131,  131,   58,  131,  131,  131,   59,
       60,  131,  131,  131,  131,   61,   62,   63,   64,  131,
      131,  131,   65,   66,  131,  131,  131,  131,  131,   67,
      131,  131,  131,  131,   68,  131,  131,  131,  131,   69,
      131,  131,  131,   70,  131,  131,  131,   71,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,

        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,  131,   30,  131,  131,
       31,  131,   32,  131,  131,  131,   33,   34,  131,   35,
       36,   37,  131,   38,  131,   39,   40,  131,   41,   42,
      131,  131,   43,  131,  131,   44,  131,  131,  131,   45,
      131,   46,   47,   48,  131,   49,  131,  131,  131,  131,
       50,   51,   52,   53,  131,  131,    2,    2,    2,    2,

        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,   14,   15,   16,   17,
       18,  131,  131,   19,  131,   20,   21,   22,   23,  131,
       24,  131,  131,   25,   26,  131,   27,   28,  131,  131,
      119,  131,  118,   29,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,

        2,    2,  116,  131,   10,  131,   11,  131,   12,  131,
      131,   13,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,  117,  131,    7,  131,    8,    9,    2,    2,
        2,    2,    2,    2,    5,    6,    2,    2,    0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    1,    4,    1,    1,    5,    1,    6,    5,
        5,    5,    5,    5,    7,    8,    5,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    5,    5,   10,
       11,   12,    5,    1,   13,   14,   15,   16,   17,   18,
       19,   20,   21,   22,   23,   24,   25,   26,   27,   28,
       29,   30,   31,   32,   33,   34,   35,   36,   37,   38,
        1,    1,    1,    5,   39,    1,   40,   41,   42,   43,

       44,   45,   46,   47,   48,   49,   50,   51,   52,   53,
       54,   55,   56,   57,   58,   59,   60,   61,   62,   63,
       64,   65,    5,    1,    5,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[66] =
    {   0,
        1,    1,    2,    3,    1,    1,    1,    1,    4,    1,
        1,    1,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4
    } ;

static yyconst flex_int16_t yy_base[947] =
    {   0,
        0,    0,   65,    0,  368, 3759,  129,  131,    0, 3759,
      348,  343,  340,  127,  126,  337,  123,  123,  175,  221,
      112,  123,  121,  142,  166,  115,  129,  172,  177,  210,
      223,  215,    0,  183,  269,  312,  232,  233,  138,    0,
      159,  162,  339,    0,  306,  300,  296,  199,  198,  291,
      369,  427,  479,  531,  257,  579,  366,  297,  627,  345,
      291,  419,  404,  679,  727,  779,  314,  433,  829,  881,
      929,  438,  467,  210,  287,  256, 3759, 3759,  250,  248,
      227, 3759, 3759, 3759,    0,  136,  171,  268,  266,  225,
      285,    0,  333,  319,  314,  399,  243,  263,  477,  463,

      353,  361,  377,  525,  373,  388,  415,  423,  422,  431,
      469,  481,    0,  434,  531,  472,  484,  481,  506,  531,
      551,  508,  523,  518,  523,  535,  547,  552,    0,  556,
      546,  562,  581,  581,  577,  582,  584,  583,  583,  581,
      600,  600,  596,  621,  623,  596,  599,  639,  634,  645,
      631,  637,  639,  636,    0,  296,  248,  241,    0,    0,
      208,  205,  338,    0,    0,    0,  661,  683,  692,  717,
      715,  733,  756,  698,  781,  773,  814,  825,  816,  853,
      981,  777,  855,  837,  889, 1031,  879,  870,  915,  924,
      927,  953,  969,  978,  811,  919, 1080,  997, 1003,  991,

     1020, 1037, 1063, 1026, 1065, 1076, 1082, 1108, 1117, 1119,
     1105, 1131, 1133, 1136, 1145, 1150, 1173, 1159, 1171, 1195,
     1184, 1199, 1207, 1208, 1216, 1225, 1248, 1238, 1253, 1270,
     1262, 1287, 1279, 1302, 1278, 1308, 3759,  192,    0,  653,
        0,  657,  679,    0,    0,  683,  676,  771,  784,  772,
      844,  849,  878,  900,  893,    0,  945,  925,  937, 1312,
      950,  985, 1012, 1044, 1049, 1075, 1077, 1101, 1097, 1155,
     1169,    0, 1182, 1206, 1227, 1250, 1264, 1299, 1295, 1296,
     1306, 1320, 1321, 1324, 1331, 1316, 1324,    0, 1321, 1340,
     1340, 1346, 1350, 1350, 1337, 1340,    0, 1350, 1348, 1348,

     1364, 1365, 1370, 1360, 1359, 1366, 1379, 1361, 1374, 1378,
     1381,    0, 1364, 1371, 1372, 1383,    0, 1383, 1380, 1398,
     1379,    0, 1391, 1406, 1396, 1411,    0, 1401, 1395, 1417,
     1401, 1405, 1410, 1421,    0,  187, 1428, 1429, 1432, 1440,
     1454, 1444, 1453, 1458, 1466, 1462, 1472, 1490, 1504, 1498,
     1506, 1512, 1520, 1516, 1542, 1550, 1556, 1558, 1566, 1554,
     1560, 1595, 1598, 1594, 1596, 1606, 1610, 1620, 1608, 1612,
     1638, 1649, 1664, 1650, 1660, 1648, 1674, 1698, 1672, 1700,
     1702, 1703, 1704, 1712, 1706, 1717, 1743, 1734, 1748, 1757,
     1766, 1767, 1772, 1782, 1780, 1801, 1797, 1791, 1803, 1806,

     1816, 1840, 1834, 1851, 1846, 1855, 1865, 1857, 1874, 1879,
     1889, 1888, 1890, 1911, 1900, 1913, 1928, 1919, 1922, 1941,
     1944, 1962, 1957, 1956, 1965, 1978, 1986, 1995, 1990, 1996,
     2019, 2021, 1417, 1423, 1502, 1515, 1544,    0, 1576,    0,
     1638, 1670, 1668, 1723, 1732, 1823,    0, 1849, 1848, 1881,
     1958,    0, 1975, 2003, 2011,    0, 2015, 2016, 2012, 2015,
     2035,    0,    0,    0, 2040, 2029,    0, 2035,    0, 2037,
     2036, 2031, 2039, 2043, 2059,    0, 2053,    0,    0,    0,
     2047,    0, 2057, 2065, 2055, 2057,    0, 2075, 2075, 2065,
     2067, 2073,    0,    0, 2086, 2088, 2077, 2073, 2075, 2085,

     2096,    0, 2095, 2094, 2101, 2093,    0, 2090, 2102, 2112,
     2105, 2099, 2120, 2103, 2117, 2123, 2121,    0, 2110, 2127,
        0, 2135, 2136, 2132, 2144, 2138, 2140, 2170, 2161, 2172,
     2169, 2194, 2186, 2195, 2203, 2198, 2224, 2232, 2220, 2243,
     2226, 2256, 2257, 2265, 2260, 2278, 2282, 2294, 2286, 2295,
     2297, 2311, 2319, 2327, 2332, 2335, 2336, 2340, 2351, 2364,
     2349, 2373, 2381, 2390, 2385, 2402, 2406, 2407, 2415, 2423,
     2424, 2439, 2425, 2441, 2447, 2456, 2477, 2458, 2479, 2480,
     2481, 2464, 2490, 2513, 2518, 2515, 2512, 2529, 2543, 2548,
     2534, 2547, 2579, 2557, 2582, 2566, 2587, 2585, 2598, 2588,

     2611, 2621, 2622, 2650, 2620, 2633, 2639, 2655, 2656, 2661,
        0,    0, 2126, 2202, 2210, 2212,    0, 2260, 2316, 2330,
        0, 2352, 2379, 2462, 2495,    0, 2516, 2544, 2564, 2603,
     2631, 2636, 2643, 2658, 2658,    0, 2670, 2661, 2670,    0,
        0, 2672, 2690, 2677, 2686,    0,    0,    0,    0, 2698,
     2692, 2681,    0,    0, 2700, 2691, 2692, 2706, 2703,    0,
     2713, 2695, 2712, 2717, 2701, 2703, 2704, 2715, 2729,    0,
     2726, 2729, 2729,    0, 2716, 2739, 2743,    0, 2741, 2744,
     2749, 2745, 2747, 2759, 2760, 2773, 2795, 2763, 2781, 2803,
     2804, 2818, 2813, 2816, 2819, 2835, 2827, 2829, 2853, 2857,

     2867, 2885, 2883, 2859, 2891, 2902, 2913, 2907, 2919, 2921,
     2923, 2931, 2937, 2947, 2953, 2956, 2959, 2965, 2987, 2962,
     2975, 2981, 2991, 3010, 3013, 3005, 3015, 3016, 3024, 3039,
     3049, 3045, 3064, 3067, 3070, 3073, 3083, 3088, 3098, 3102,
     3099, 3104, 3113, 3136, 3138, 3121, 2748,    0, 2741, 2784,
     2807, 2830,    0, 2855, 2872, 2883,    0,    0, 2971,    0,
        0,    0, 3029,    0, 3022,    0,    0, 3069,    0,    0,
     3110, 3137,    0, 3132, 3146,    0, 3128, 3144, 3127,    0,
     3154, 3139,    0,    0, 3148,    0, 3161, 3166, 3152, 3157,
        0,    0,    0,    0, 3160, 3168, 3176, 3177, 3178, 3181,

     3192, 3209, 3190, 3193, 3232, 3211, 3195, 3221, 3246, 3227,
     3235, 3245, 3249, 3250, 3275, 3260, 3261, 3263, 3278, 3286,
     3299, 3289, 3294, 3317, 3327, 3315, 3328, 3318, 3329, 3332,
     3360, 3357, 3361, 3363, 3366, 3369, 3372, 3382, 3391, 3397,
     3394, 3403, 3415, 3420, 3432, 3436,    0,    0,    0,    0,
        0, 3191, 3268,    0, 3288,    0,    0,    0,    0, 3306,
        0, 3327, 3401,    0,    0, 3407,    0,    0, 3413, 3419,
        0, 3431,    0,    0, 3437, 3446, 3448, 3451, 3460, 3461,
     3469, 3474, 3482, 3485, 3486, 3490, 3491, 3522, 3499, 3514,
     3503, 3525, 3528, 3536, 3539, 3540, 3544, 3562, 3553, 3565,

     3568, 3574, 3463, 3516,    0, 3561,    0, 3564,    0, 3559,
     3570,    0, 3593, 3590, 3596, 3599, 3598, 3611, 3602, 3627,
     3628, 3630,    0, 3633,    0, 3621,    0,    0, 3636, 3644,
     3652, 3653, 3661, 3665,    0,    0, 3669, 3670, 3759, 3734,
     3738,  153, 3742, 3746, 3750, 3754
    } ;

static yyconst flex_int16_t yy_def[947] =
    {   0,
      939,    1,  939,    3,  939,  939,  939,  939,  940,  939,
      941,  939,  939,  939,  939,  939,  942,  942,  942,  942,
      942,  942,  942,  942,  942,  942,  942,  942,  942,  942,
      942,  942,  942,  942,  942,  942,  942,  942,  942,  943,
      943,  939,  944,  943,  945,  943,  943,  943,  943,  943,
      946,  946,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,  939,  940,  941,  939,  939,  939,  939,
      939,  939,  939,  939,  942,  942,  942,  942,  942,  942,
      942,  942,  942,  942,  942,  942,  942,  942,  942,  942,

      942,  942,  942,  942,  942,  942,  942,  942,  942,  942,
      942,  942,  942,  942,  942,  942,  942,  942,  942,  942,
      942,  942,  942,  942,  942,  942,  942,  942,  942,  942,
      942,  942,  942,  942,  942,  942,  942,  942,  942,  942,
      942,  942,  942,  942,  942,  942,  942,  942,  942,  942,
      942,  942,  942,  942,  943,  943,  944,  945,  943,  943,
      943,  943,  943,  943,  943,  943,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,

       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,  939,  939,  942,  942,
      942,  942,  942,  942,  942,  942,  942,  942,  942,  942,
      942,  942,  942,  942,  942,  942,  942,  942,  942,  942,
      942,  942,  942,  942,  942,  942,  942,  942,  942,  942,
      942,  942,  942,  942,  942,  942,  942,  942,  942,  942,
      942,  942,  942,  942,  942,  942,  942,  942,  942,  942,
      942,  942,  942,  942,  942,  942,  942,  942,  942,  942,

      942,  942,  942,  942,  942,  942,  942,  942,  942,  942,
      942,  942,  942,  942,  942,  942,  942,  942,  942,  942,
      942,  942,  942,  942,  942,  942,  942,  942,  942,  942,
      942,  942,  942,  942,  943,  943,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,

       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,  942,  942,  942,  942,  942,  942,  942,  942,
      942,  942,  942,  942,  942,  942,  942,  942,  942,  942,
      942,  942,  942,  942,  942,  942,  942,  942,  942,  942,
      942,  942,  942,  942,  942,  942,  942,  942,  942,  942,
      942,  942,  942,  942,  942,  942,  942,  942,  942,  942,
      942,  942,  942,  942,  942,  942,  942,  942,  942,  942,
      942,  942,  942,  942,  942,  942,  942,  942,  942,  942,

      942,  942,  942,  942,  942,  942,  942,  942,  942,  942,
      942,  942,  942,  942,  942,  942,  942,  942,  942,  942,
      942,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,

       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
      942,  942,  942,  942,  942,  942,  942,  942,  942,  942,
      942,  942,  942,  942,  942,  942,  942,  942,  942,  942,
      942,  942,  942,  942,  942,  942,  942,  942,  942,  942,
      942,  942,  942,  942,  942,  942,  942,  942,  942,  942,
      942,  942,  942,  942,  942,  942,  942,  942,  942,  942,
      942,  942,  942,  942,  942,  942,  942,  942,  942,  942,
      942,  942,  942,  942,  942,  942,  942,  942,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,

       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,  942,  942,  942,  942,
      942,  942,  942,  942,  942,  942,  942,  942,  942,  942,
      942,  942,  942,  942,  942,  942,  942,  942,  942,  942,
      942,  942,  942,  942,  942,  942,  942,  942,  942,  942,
      942,  942,  942,  942,  942,  942,  942,  942,  942,  942,
      942,  942,  942,  942,  942,  942,   52,   52,   52,   52,

       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,  942,  942,  942,  942,
      942,  942,  942,  942,  942,  942,  942,  942,  942,  942,
      942,  942,  942,  942,  942,  942,  942,  942,  942,  942,
      942,  942,  942,  942,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,

       52,   52,  942,  942,  942,  942,  942,  942,  942,  942,
      942,  942,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,  942,  942,  942,  942,  942,  942,   52,   52,
       52,   52,   52,   52,  942,  942,   52,   52,    0,  939,
      939,  939,  939,  939,  939,  939
    } ;

static yyconst flex_int16_t yy_nxt[3825] =
    {   0,
        6,    7,    8,    9,   10,   11,   12,   13,   14,   15,
       10,   16,   17,   18,   19,   20,   21,   22,   23,   24,
       25,   26,   27,   28,   29,   30,   31,   32,   33,   34,
       35,   36,   37,   38,   39,   33,   33,   33,    6,   17,
       18,   19,   20,   21,   22,   23,   24,   25,   26,   27,
       28,   29,   30,   31,   32,   33,   34,   35,   36,   37,
       38,   39,   33,   33,   33,   40,   41,   42,   43,   44,
       45,   46,   47,   48,   49,   44,   50,   51,   52,   53,
       54,   55,   56,   57,   58,   59,   60,   61,   62,   63,
       64,   65,   66,   67,   68,   69,   70,   71,   72,   73,

       67,   67,   67,   40,   51,   52,   53,   54,   55,   56,
       57,   58,   59,   60,   61,   62,   63,   64,   65,   66,
       67,   68,   69,   70,   71,   72,   73,   67,   67,   67,
       74,   74,   74,   74,   80,   81,   82,   83,   86,   91,
       87,  117,  103,  105,  109,  118,   88,  104,   89,  106,
      110,  239,  107,   90,  111,  108,   85,  153,  154,   92,
      156,   74,  112,   74,   74,   86,   91,   87,  117,  103,
      105,  109,  118,   88,  104,   89,  106,  110,  239,  107,
       90,  111,  108,  113,  153,  154,   92,   93,  119,  112,
      114,  115,  120,  122,   94,  336,  116,  123,  121,  135,

      238,   95,  240,  136,   96,   97,  162,  163,  164,  165,
      113,   74,   74,  336,   93,  119,  161,  114,  115,  120,
      122,   94,  124,  116,  123,  121,  135,  132,   95,  240,
      136,   96,   97,   98,   80,   81,  125,   99,  133,  245,
      128,  100,  126,  127,  134,  151,  159,  101,  129,  124,
      102,  335,  130,  152,  132,  131,  238,  148,   79,  149,
       98,   77,  150,  125,   99,  133,  245,  128,  100,  126,
      127,  134,  151,  167,  101,  129,  256,  102,  243,  130,
      152,  244,  131,  137,  148,  138,  149,  185,  139,  150,
      237,  241,  186,  167,  257,  140,  141,  156,   74,  242,

      167,  166,  246,  256,  161,  243,  160,  200,  244,  193,
      137,  159,  138,  167,  185,  139,  247,  194,  241,  186,
      167,  257,  140,  141,  142,  143,  242,  167,  144,  246,
      167,  250,  145,  167,  200,  251,  193,  252,  146,  253,
      167,  147,  155,  247,  194,  162,  163,   84,   79,   78,
      167,  142,  143,   77,  167,  144,  248,  167,  250,  145,
      167,  167,  251,  249,  252,  146,  253,  939,  147,  155,
      155,  199,  155,  155,  155,  155,  155,  167,  155,  155,
      155,  167,  167,  248,  168,  264,  169,  265,  167,  191,
      249,  266,  170,  939,  171,  192,  271,  939,  199,  172,

      939,  939,  167,  939,  939,  939,  939,  939,  167,  167,
      939,  168,  264,  169,  265,  254,  191,  272,  266,  170,
      204,  171,  192,  271,  205,  255,  172,  155,  155,  167,
      155,  155,  155,  155,  155,  201,  155,  155,  155,  202,
      167,  273,  254,  173,  272,  203,  274,  204,  275,  217,
      233,  205,  255,  218,  167,  167,  939,  276,  234,  939,
      939,  281,  201,  174,  939,  939,  202,  167,  273,  167,
      173,  939,  203,  274,  167,  275,  217,  233,  939,  939,
      218,  167,  167,  167,  276,  234,  235,  236,  281,  258,
      174,  175,  262,  263,  259,  167,  167,  286,  176,  277,

      260,  167,  278,  167,  287,  177,  279,  261,  178,  179,
      167,  280,  939,  235,  236,  167,  258,  288,  175,  262,
      263,  259,  167,  289,  286,  176,  277,  260,  939,  278,
      167,  287,  177,  279,  261,  178,  179,  294,  280,  267,
      939,  268,  167,  180,  288,  269,  282,  181,  295,  296,
      289,  182,  270,  290,  297,  291,  283,  183,  298,  299,
      184,  284,  285,  292,  294,  293,  267,  167,  268,  300,
      180,  301,  269,  282,  181,  295,  296,  302,  182,  270,
      290,  297,  291,  283,  183,  298,  299,  184,  284,  285,
      292,  303,  293,  304,  167,  167,  300,  305,  301,  187,

      309,  306,  307,  310,  302,  188,  311,  308,  189,  313,
      314,  190,  315,  316,  312,  167,  939,  939,  303,  317,
      304,  939,  167,  322,  305,  939,  187,  309,  306,  307,
      310,  323,  188,  311,  308,  189,  313,  314,  190,  315,
      316,  312,  167,  167,  195,  318,  317,  320,  321,  326,
      322,  196,  197,  331,  329,  333,  319,  198,  323,  324,
      330,  327,  325,  167,  939,  328,  332,  334,  939,  433,
      167,  195,  318,  434,  320,  321,  326,  167,  196,  197,
      331,  329,  333,  319,  198,  939,  324,  330,  327,  325,
      167,  206,  328,  332,  334,  167,  433,  167,  337,  167,

      434,  939,  435,  939,  167,  207,  939,  939,  167,  436,
      437,  208,  209,  939,  167,  167,  939,  939,  206,  167,
      939,  939,  167,  338,  167,  337,  167,  341,  167,  435,
      342,  167,  207,  167,  167,  167,  436,  437,  208,  209,
      339,  167,  167,  167,  210,  939,  167,  343,  340,  167,
      338,  167,  211,  167,  341,  167,  212,  342,  167,  213,
      167,  167,  939,  167,  939,  939,  939,  339,  939,  167,
      167,  210,  167,  344,  343,  340,  167,  939,  167,  211,
      167,  939,  939,  212,  939,  348,  213,  345,  939,  349,
      167,  214,  167,  167,  438,  167,  167,  167,  439,  167,

      344,  440,  215,  939,  346,  939,  360,  361,  216,  167,
      939,  347,  348,  167,  345,  167,  349,  167,  214,  167,
      167,  438,  167,  939,  167,  439,  939,  167,  440,  215,
      167,  346,  167,  360,  361,  216,  167,  350,  347,  351,
      167,  352,  167,  219,  167,  220,  939,  167,  221,  354,
      167,  353,  167,  167,  167,  222,  223,  167,  441,  167,
      939,  167,  939,  363,  350,  167,  351,  939,  352,  167,
      219,  167,  220,  167,  167,  221,  354,  167,  353,  167,
      167,  442,  222,  223,  355,  441,  167,  362,  167,  167,
      363,  167,  167,  224,  225,  167,  167,  226,  167,  370,

      167,  227,  369,  364,  939,  167,  167,  228,  442,  443,
      229,  355,  444,  167,  362,  167,  167,  167,  167,  939,
      224,  225,  167,  445,  226,  167,  370,  939,  227,  369,
      364,  167,  167,  167,  228,  167,  443,  229,  939,  444,
      167,  371,  167,  167,  167,  167,  379,  372,  448,  449,
      445,  167,  167,  373,  230,  167,  231,  446,  167,  232,
      167,  447,  167,  167,  452,  167,  939,  167,  371,  167,
      167,  939,  167,  379,  372,  448,  449,  939,  167,  374,
      373,  230,  167,  231,  446,  167,  232,  167,  447,  167,
      167,  452,  167,  356,  167,  939,  167,  167,  357,  375,

      939,  453,  376,  377,  358,  167,  374,  167,  378,  939,
      939,  359,  167,  167,  167,  939,  167,  167,  939,  167,
      356,  167,  384,  385,  167,  357,  375,  386,  453,  376,
      377,  358,  167,  167,  167,  378,  167,  387,  359,  167,
      167,  167,  167,  454,  167,  365,  167,  366,  939,  384,
      385,  367,  939,  167,  386,  392,  167,  455,  368,  388,
      167,  389,  167,  167,  387,  939,  167,  167,  939,  167,
      454,  939,  365,  167,  366,  390,  456,  391,  367,  167,
      167,  167,  392,  167,  455,  368,  388,  457,  389,  167,
      393,  939,  167,  458,  167,  380,  167,  939,  167,  167,

      167,  167,  390,  456,  391,  381,  167,  394,  167,  939,
      382,  383,  167,  395,  457,  459,  167,  393,  167,  167,
      458,  167,  380,  167,  167,  167,  167,  460,  167,  397,
      939,  396,  381,  167,  394,  167,  398,  382,  383,  167,
      395,  167,  459,  167,  167,  167,  399,  167,  167,  167,
      939,  167,  167,  167,  460,  167,  397,  402,  396,  939,
      167,  167,  167,  398,  400,  401,  403,  167,  167,  167,
      404,  167,  167,  399,  167,  167,  167,  407,  461,  167,
      167,  167,  167,  939,  402,  462,  167,  167,  167,  167,
      408,  400,  401,  403,  167,  167,  167,  404,  405,  167,

      167,  939,  167,  406,  407,  461,  463,  167,  167,  167,
      411,  167,  462,  167,  167,  167,  167,  408,  409,  413,
      167,  414,  167,  167,  167,  405,  410,  167,  412,  464,
      406,  167,  167,  463,  167,  167,  167,  411,  167,  415,
      465,  167,  167,  167,  167,  409,  413,  167,  414,  416,
      167,  167,  167,  410,  167,  412,  464,  939,  167,  167,
      417,  167,  167,  939,  167,  420,  415,  465,  167,  167,
      167,  167,  418,  419,  167,  939,  416,  424,  167,  167,
      939,  167,  466,  467,  167,  421,  167,  417,  167,  167,
      422,  167,  420,  423,  431,  167,  167,  939,  167,  418,

      419,  167,  427,  425,  424,  167,  167,  426,  428,  466,
      467,  167,  421,  167,  167,  167,  167,  422,  429,  468,
      423,  431,  167,  167,  167,  167,  469,  470,  450,  427,
      425,  430,  471,  167,  426,  428,  472,  473,  167,  432,
      474,  167,  167,  451,  167,  429,  468,  475,  477,  478,
      167,  167,  479,  469,  470,  450,  480,  476,  430,  471,
      481,  482,  483,  472,  473,  167,  432,  474,  484,  485,
      451,  167,  486,  487,  475,  477,  478,  488,  489,  479,
      490,  491,  492,  480,  476,  494,  495,  481,  482,  483,
      496,  497,  498,  499,  500,  484,  485,  501,  502,  486,

      487,  493,  503,  504,  488,  489,  505,  490,  491,  492,
      506,  507,  494,  495,  508,  509,  510,  496,  497,  498,
      499,  500,  513,  514,  501,  502,  515,  516,  493,  503,
      504,  517,  511,  505,  512,  518,  519,  506,  507,  520,
      521,  508,  509,  510,  167,  522,  611,  939,  167,  513,
      514,  939,  612,  515,  516,  939,  523,  939,  517,  511,
      167,  512,  518,  519,  167,  167,  520,  521,  167,  167,
      167,  167,  522,  611,  167,  167,  167,  524,  167,  612,
      167,  939,  167,  523,  525,  527,  528,  167,  167,  167,
      167,  167,  167,  939,  167,  167,  167,  167,  167,  939,

      526,  167,  167,  167,  524,  167,  167,  167,  167,  167,
      939,  525,  527,  528,  167,  167,  167,  167,  530,  529,
      167,  167,  167,  939,  533,  167,  167,  526,  167,  167,
      531,  939,  167,  167,  167,  167,  167,  532,  613,  939,
      167,  167,  167,  939,  614,  530,  529,  167,  167,  167,
      534,  533,  167,  167,  535,  167,  167,  531,  536,  167,
      615,  167,  939,  167,  532,  613,  167,  167,  538,  167,
      542,  614,  167,  537,  539,  167,  167,  534,  167,  167,
      541,  535,  167,  167,  939,  536,  167,  615,  616,  540,
      167,  543,  167,  167,  167,  538,  167,  542,  939,  167,

      537,  539,  167,  167,  939,  167,  546,  541,  544,  167,
      167,  167,  547,  167,  167,  616,  540,  167,  543,  167,
      548,  167,  167,  167,  551,  545,  167,  939,  167,  167,
      167,  167,  167,  546,  167,  544,  167,  167,  167,  547,
      549,  167,  167,  550,  167,  939,  167,  548,  167,  167,
      939,  551,  545,  167,  167,  167,  167,  167,  167,  167,
      617,  167,  552,  167,  167,  167,  167,  549,  557,  167,
      550,  167,  553,  167,  167,  167,  167,  554,  939,  556,
      167,  167,  555,  167,  167,  167,  167,  617,  167,  552,
      167,  167,  167,  167,  618,  557,  167,  619,  560,  553,

      167,  167,  939,  167,  554,  558,  556,  167,  167,  555,
      167,  167,  167,  167,  167,  167,  561,  167,  562,  563,
      564,  618,  167,  167,  619,  560,  939,  167,  167,  559,
      565,  567,  558,  167,  167,  167,  167,  167,  167,  167,
      167,  167,  167,  561,  566,  562,  563,  564,  167,  167,
      569,  939,  939,  167,  620,  167,  559,  565,  567,  167,
      167,  167,  621,  167,  167,  167,  167,  167,  570,  167,
      167,  566,  571,  167,  568,  167,  939,  569,  572,  167,
      167,  620,  167,  167,  167,  573,  167,  939,  167,  621,
      939,  167,  939,  167,  939,  570,  167,  167,  167,  571,

      167,  568,  167,  167,  574,  572,  167,  167,  167,  167,
      167,  167,  573,  167,  575,  167,  167,  167,  167,  579,
      167,  578,  580,  167,  576,  167,  577,  167,  581,  167,
      167,  574,  167,  167,  167,  167,  622,  167,  939,  167,
      167,  575,  167,  167,  167,  167,  579,  582,  578,  580,
      167,  576,  167,  577,  167,  581,  167,  939,  586,  167,
      167,  584,  167,  622,  167,  583,  167,  167,  939,  167,
      167,  167,  623,  589,  582,  585,  167,  167,  939,  167,
      624,  167,  167,  167,  588,  586,  587,  167,  584,  167,
      590,  167,  583,  167,  167,  167,  939,  167,  167,  623,

      589,  167,  585,  167,  167,  167,  167,  624,  167,  167,
      167,  588,  625,  587,  167,  167,  167,  590,  167,  592,
      167,  593,  167,  591,  167,  167,  167,  167,  167,  167,
      939,  167,  167,  167,  594,  597,  167,  167,  167,  625,
      595,  939,  167,  167,  167,  939,  592,  167,  593,  167,
      591,  167,  167,  167,  167,  167,  167,  167,  598,  596,
      167,  594,  597,  167,  167,  167,  939,  595,  603,  599,
      626,  167,  167,  167,  167,  939,  167,  167,  167,  939,
      167,  167,  167,  602,  167,  598,  596,  167,  600,  627,
      601,  167,  167,  167,  167,  603,  599,  626,  167,  167,

      167,  167,  167,  604,  167,  167,  167,  167,  167,  606,
      602,  167,  167,  939,  167,  600,  627,  601,  605,  167,
      167,  167,  167,  628,  607,  167,  167,  608,  167,  167,
      604,  167,  167,  167,  629,  167,  606,  167,  167,  167,
      610,  167,  630,  631,  632,  605,  633,  634,  609,  167,
      628,  607,  635,  167,  608,  167,  636,  167,  167,  167,
      637,  629,  167,  638,  167,  639,  640,  610,  641,  630,
      631,  632,  642,  633,  634,  609,  645,  643,  646,  635,
      647,  648,  167,  636,  167,  649,  650,  637,  644,  651,
      638,  652,  639,  640,  653,  641,  654,  655,  656,  642,

      657,  658,  659,  645,  643,  646,  660,  647,  648,  661,
      662,  663,  649,  650,  664,  644,  651,  665,  652,  666,
      667,  653,  668,  654,  655,  656,  669,  657,  658,  659,
      670,  671,  672,  660,  673,  674,  661,  662,  663,  675,
      676,  664,  677,  678,  665,  939,  666,  667,  167,  668,
      939,  167,  167,  669,  683,  939,  167,  670,  671,  672,
      167,  673,  674,  747,  679,  680,  675,  676,  681,  677,
      678,  167,  167,  682,  167,  167,  167,  167,  167,  167,
      167,  683,  684,  167,  939,  167,  167,  167,  167,  939,
      747,  679,  680,  686,  685,  681,  939,  167,  167,  167,

      682,  167,  167,  167,  167,  167,  167,  167,  167,  684,
      167,  167,  167,  167,  167,  167,  690,  688,  748,  167,
      686,  685,  167,  687,  167,  689,  749,  750,  939,  167,
      167,  167,  167,  167,  167,  167,  167,  167,  167,  167,
      167,  167,  167,  690,  688,  748,  167,  691,  167,  167,
      687,  693,  689,  749,  750,  694,  167,  167,  167,  167,
      167,  167,  167,  167,  692,  939,  167,  167,  167,  167,
      695,  939,  167,  167,  691,  167,  167,  696,  693,  167,
      939,  167,  694,  167,  939,  751,  167,  167,  697,  167,
      939,  692,  167,  167,  167,  167,  167,  695,  167,  167,

      167,  167,  167,  167,  696,  698,  167,  702,  167,  699,
      167,  167,  751,  167,  167,  697,  939,  701,  167,  167,
      167,  167,  167,  167,  939,  167,  700,  167,  167,  167,
      167,  167,  698,  167,  702,  167,  699,  167,  167,  703,
      167,  167,  752,  167,  701,  167,  753,  167,  167,  167,
      939,  167,  167,  700,  167,  167,  167,  167,  167,  704,
      167,  705,  167,  167,  754,  167,  703,  167,  167,  752,
      167,  167,  167,  753,  167,  167,  167,  706,  167,  167,
      167,  939,  167,  167,  708,  167,  704,  167,  705,  167,
      167,  754,  167,  707,  167,  167,  939,  167,  167,  167,

      167,  167,  709,  167,  706,  755,  167,  167,  711,  167,
      710,  708,  167,  939,  167,  939,  167,  167,  167,  712,
      707,  167,  167,  167,  167,  713,  167,  167,  167,  709,
      939,  167,  755,  167,  939,  711,  167,  710,  167,  167,
      167,  716,  167,  167,  167,  167,  712,  939,  167,  167,
      167,  167,  713,  167,  714,  167,  939,  167,  167,  167,
      167,  167,  715,  167,  939,  167,  167,  167,  716,  167,
      167,  717,  167,  939,  720,  167,  718,  167,  167,  939,
      167,  714,  167,  167,  167,  756,  167,  167,  167,  715,
      167,  719,  167,  167,  167,  167,  167,  167,  717,  167,

      167,  720,  167,  718,  167,  723,  167,  167,  721,  722,
      167,  757,  756,  167,  939,  167,  167,  167,  719,  167,
      167,  167,  167,  167,  167,  724,  167,  167,  167,  167,
      725,  167,  723,  167,  167,  721,  722,  939,  757,  726,
      167,  727,  167,  167,  167,  167,  939,  758,  167,  167,
      167,  167,  724,  167,  167,  167,  167,  725,  167,  167,
      728,  167,  730,  731,  167,  167,  726,  729,  727,  759,
      167,  939,  167,  733,  758,  167,  167,  167,  167,  167,
      760,  167,  167,  167,  167,  939,  167,  728,  939,  730,
      731,  167,  167,  167,  729,  167,  759,  167,  167,  732,

      733,  167,  167,  167,  167,  736,  167,  760,  734,  167,
      167,  167,  737,  738,  167,  167,  939,  735,  167,  761,
      167,  167,  167,  167,  167,  167,  732,  167,  167,  167,
      167,  167,  736,  740,  167,  734,  743,  167,  167,  737,
      738,  167,  167,  739,  735,  167,  761,  167,  167,  167,
      167,  167,  744,  741,  167,  167,  167,  167,  167,  939,
      740,  167,  762,  743,  167,  167,  167,  763,  742,  167,
      739,  167,  746,  764,  167,  167,  167,  167,  765,  744,
      741,  766,  167,  167,  167,  167,  167,  745,  767,  762,
      768,  167,  167,  167,  763,  742,  167,  167,  167,  746,

      764,  769,  167,  770,  167,  765,  771,  772,  766,  773,
      774,  775,  776,  167,  745,  767,  777,  768,  167,  167,
      778,  779,  780,  781,  167,  782,  783,  784,  769,  785,
      770,  786,  787,  771,  772,  788,  773,  774,  775,  776,
      789,  790,  791,  777,  792,  793,  794,  778,  779,  780,
      781,  795,  782,  783,  784,  796,  785,  167,  786,  787,
      167,  798,  788,  799,  847,  167,  848,  789,  790,  791,
      939,  792,  793,  794,  800,  167,  167,  167,  795,  803,
      167,  167,  796,  167,  167,  167,  797,  167,  798,  167,
      799,  847,  167,  848,  939,  167,  167,  167,  801,  167,

      849,  800,  167,  167,  167,  939,  803,  167,  167,  167,
      167,  167,  167,  797,  939,  804,  167,  167,  939,  167,
      167,  802,  167,  167,  167,  801,  167,  849,  939,  807,
      805,  167,  167,  939,  167,  167,  167,  850,  167,  167,
      167,  806,  804,  810,  167,  811,  167,  167,  802,  167,
      808,  167,  167,  851,  167,  167,  807,  805,  167,  167,
      809,  167,  167,  167,  850,  167,  167,  167,  806,  167,
      810,  167,  811,  167,  939,  167,  167,  808,  167,  167,
      851,  167,  167,  167,  812,  852,  853,  809,  813,  167,
      167,  939,  167,  167,  939,  167,  167,  814,  167,  167,

      167,  167,  167,  167,  939,  815,  816,  167,  939,  817,
      167,  812,  852,  853,  854,  813,  167,  939,  167,  167,
      167,  167,  167,  167,  814,  939,  167,  167,  167,  167,
      167,  818,  815,  816,  167,  167,  817,  167,  167,  821,
      939,  854,  939,  167,  819,  167,  167,  167,  167,  167,
      167,  939,  820,  167,  167,  167,  167,  167,  818,  167,
      823,  822,  167,  167,  167,  167,  821,  167,  939,  167,
      167,  819,  167,  167,  167,  167,  167,  824,  167,  820,
      167,  167,  167,  167,  167,  855,  167,  823,  822,  167,
      167,  167,  167,  826,  167,  167,  167,  167,  167,  167,

      167,  167,  167,  167,  824,  167,  825,  827,  167,  939,
      167,  167,  855,  939,  939,  939,  167,  167,  167,  167,
      826,  830,  167,  167,  167,  167,  167,  167,  167,  167,
      167,  167,  167,  825,  827,  831,  832,  939,  167,  828,
      167,  167,  829,  939,  167,  856,  167,  857,  830,  167,
      167,  167,  167,  167,  167,  167,  167,  835,  167,  167,
      167,  167,  831,  832,  834,  167,  828,  167,  167,  829,
      833,  939,  856,  167,  857,  167,  167,  939,  167,  167,
      167,  167,  167,  167,  835,  167,  167,  167,  167,  167,
      939,  834,  167,  939,  836,  840,  837,  833,  839,  167,

      167,  838,  167,  167,  167,  858,  167,  167,  167,  167,
      167,  939,  167,  167,  841,  843,  167,  842,  167,  167,
      167,  836,  840,  837,  167,  839,  167,  167,  838,  167,
      167,  167,  858,  167,  167,  167,  167,  167,  167,  859,
      167,  841,  843,  844,  842,  167,  167,  167,  845,  167,
      846,  167,  167,  860,  167,  861,  167,  167,  862,  863,
      864,  167,  167,  865,  167,  167,  859,  167,  866,  867,
      844,  868,  167,  869,  167,  845,  167,  846,  870,  167,
      860,  167,  861,  871,  167,  862,  863,  864,  872,  873,
      865,  874,  875,  167,  167,  866,  867,  877,  868,  167,

      869,  167,  939,  876,  939,  870,  167,  903,  167,  167,
      871,  167,  167,  167,  167,  872,  873,  167,  874,  875,
      167,  167,  878,  880,  877,  167,  167,  167,  167,  167,
      876,  167,  879,  167,  903,  167,  167,  167,  167,  167,
      167,  167,  882,  167,  167,  167,  881,  167,  167,  878,
      880,  167,  167,  167,  167,  167,  167,  167,  167,  879,
      883,  167,  167,  167,  167,  884,  167,  939,  167,  882,
      167,  167,  167,  881,  167,  167,  167,  167,  167,  167,
      904,  167,  167,  939,  167,  167,  167,  883,  167,  167,
      167,  167,  884,  167,  167,  167,  167,  167,  167,  886,

      885,  939,  167,  167,  167,  888,  167,  904,  167,  167,
      167,  167,  167,  167,  167,  167,  939,  939,  167,  905,
      906,  167,  167,  167,  167,  167,  886,  885,  887,  167,
      167,  167,  888,  167,  892,  167,  939,  167,  167,  890,
      889,  167,  167,  167,  167,  167,  905,  906,  167,  167,
      939,  167,  167,  167,  167,  887,  907,  167,  167,  891,
      167,  892,  167,  167,  167,  893,  890,  889,  167,  939,
      167,  167,  167,  167,  894,  167,  167,  167,  167,  167,
      167,  167,  167,  907,  897,  167,  891,  895,  167,  896,
      167,  167,  893,  167,  898,  167,  167,  167,  167,  167,

      167,  894,  167,  167,  167,  167,  167,  167,  167,  167,
      167,  897,  167,  167,  895,  167,  896,  908,  167,  167,
      167,  898,  899,  167,  167,  167,  167,  167,  900,  167,
      167,  167,  167,  167,  167,  167,  167,  167,  909,  167,
      167,  939,  910,  911,  908,  167,  167,  912,  167,  899,
      939,  167,  167,  167,  167,  900,  167,  167,  167,  902,
      167,  901,  167,  167,  167,  909,  167,  167,  167,  910,
      911,  939,  167,  167,  912,  167,  167,  913,  167,  167,
      167,  914,  167,  167,  167,  167,  902,  167,  901,  167,
      167,  167,  939,  923,  167,  167,  167,  167,  167,  167,

      167,  167,  167,  167,  913,  167,  167,  167,  914,  167,
      167,  167,  167,  915,  167,  167,  939,  167,  167,  918,
      923,  167,  167,  167,  167,  167,  167,  167,  167,  167,
      167,  939,  167,  167,  167,  167,  916,  167,  167,  167,
      915,  167,  167,  917,  167,  167,  918,  924,  167,  167,
      167,  939,  167,  167,  167,  167,  167,  167,  167,  939,
      167,  167,  167,  916,  167,  167,  167,  919,  167,  167,
      917,  167,  167,  920,  924,  167,  167,  167,  167,  167,
      167,  922,  167,  167,  167,  167,  921,  167,  167,  167,
      167,  167,  925,  926,  919,  927,  167,  928,  167,  167,

      920,  167,  167,  167,  167,  167,  167,  167,  922,  167,
      167,  167,  167,  921,  167,  167,  167,  167,  167,  925,
      926,  930,  927,  929,  928,  167,  167,  167,  167,  167,
      931,  167,  167,  167,  167,  167,  167,  167,  167,  167,
      932,  167,  167,  167,  167,  167,  167,  167,  930,  935,
      929,  936,  167,  167,  167,  934,  167,  931,  939,  167,
      937,  167,  167,  933,  167,  167,  167,  932,  167,  167,
      167,  167,  167,  167,  167,  939,  935,  167,  936,  167,
      167,  167,  934,  938,  939,  167,  167,  937,  167,  167,
      933,  167,  939,  167,  939,  167,  167,  167,  939,  167,

      939,  167,  939,  939,  167,  167,  167,  167,  167,  939,
      938,  939,  167,  167,  939,  167,  167,  939,  939,  939,
      939,  939,  939,  939,  167,  939,  939,  939,  167,  939,
      939,  939,  167,  167,   75,  939,  939,   75,   76,  939,
       76,   76,  155,  939,  155,  155,  157,  939,  157,  157,
      158,  939,  158,  158,  167,  939,  167,  167,    5,  939,
      939,  939,  939,  939,  939,  939,  939,  939,  939,  939,
      939,  939,  939,  939,  939,  939,  939,  939,  939,  939,
      939,  939,  939,  939,  939,  939,  939,  939,  939,  939,
      939,  939,  939,  939,  939,  939,  939,  939,  939,  939,

      939,  939,  939,  939,  939,  939,  939,  939,  939,  939,
      939,  939,  939,  939,  939,  939,  939,  939,  939,  939,
      939,  939,  939,  939
    } ;

static yyconst flex_int16_t yy_chk[3825] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,

        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        7,    7,    8,    8,   14,   14,   15,   15,   17,   18,
       17,   26,   21,   22,   23,   27,   17,   21,   17,   22,
       23,   86,   22,   17,   24,   22,  942,   39,   39,   18,
       41,   41,   24,   42,   42,   17,   18,   17,   26,   21,
       22,   23,   27,   17,   21,   17,   22,   23,   86,   22,
       17,   24,   22,   25,   39,   39,   18,   19,   28,   24,
       25,   25,   28,   29,   19,  336,   25,   29,   28,   34,

      238,   19,   87,   34,   19,   19,   48,   48,   49,   49,
       25,   74,   74,  162,   19,   28,  161,   25,   25,   28,
       29,   19,   30,   25,   29,   28,   34,   32,   19,   87,
       34,   19,   19,   20,   81,   81,   30,   20,   32,   90,
       31,   20,   30,   30,   32,   38,  158,   20,   31,   30,
       20,  157,   31,   38,   32,   31,   80,   37,   79,   37,
       20,   76,   37,   30,   20,   32,   90,   31,   20,   30,
       30,   32,   38,   55,   20,   31,   97,   20,   89,   31,
       38,   89,   31,   35,   37,   35,   37,   55,   35,   37,
       75,   88,   55,   55,   98,   35,   35,  156,  156,   88,

       55,   50,   91,   97,   47,   89,   46,   61,   89,   58,
       35,   45,   35,   58,   55,   35,   91,   58,   88,   55,
       55,   98,   35,   35,   36,   36,   88,   61,   36,   91,
       67,   94,   36,   58,   61,   94,   58,   95,   36,   95,
       58,   36,   43,   91,   58,  163,  163,   16,   13,   12,
       67,   36,   36,   11,   61,   36,   93,   67,   94,   36,
       58,   60,   94,   93,   95,   36,   95,    5,   36,   51,
       51,   60,   51,   51,   51,   51,   51,   67,   51,   51,
       51,   60,   57,   93,   51,  101,   51,  102,   60,   57,
       93,  103,   51,    0,   51,   57,  105,    0,   60,   51,

        0,    0,   57,    0,    0,    0,    0,    0,   60,   57,
        0,   51,  101,   51,  102,   96,   57,  106,  103,   51,
       63,   51,   57,  105,   63,   96,   51,   52,   52,   57,
       52,   52,   52,   52,   52,   62,   52,   52,   52,   62,
       63,  107,   96,   52,  106,   62,  108,   63,  109,   68,
       72,   63,   96,   68,   72,   62,    0,  110,   72,    0,
        0,  114,   62,   52,    0,    0,   62,   63,  107,   68,
       52,    0,   62,  108,   72,  109,   68,   72,    0,    0,
       68,   72,   62,   73,  110,   72,   73,   73,  114,   99,
       52,   53,  100,  100,   99,   53,   68,  116,   53,  111,

       99,   72,  111,   73,  117,   53,  112,   99,   53,   53,
       73,  112,    0,   73,   73,   53,   99,  118,   53,  100,
      100,   99,   53,  119,  116,   53,  111,   99,    0,  111,
       73,  117,   53,  112,   99,   53,   53,  122,  112,  104,
        0,  104,   53,   54,  118,  104,  115,   54,  123,  124,
      119,   54,  104,  120,  125,  120,  115,   54,  126,  127,
       54,  115,  115,  121,  122,  121,  104,   54,  104,  128,
       54,  130,  104,  115,   54,  123,  124,  131,   54,  104,
      120,  125,  120,  115,   54,  126,  127,   54,  115,  115,
      121,  132,  121,  133,   54,   56,  128,  134,  130,   56,

      136,  134,  135,  137,  131,   56,  138,  135,   56,  139,
      140,   56,  141,  142,  138,   56,    0,    0,  132,  143,
      133,    0,   56,  146,  134,    0,   56,  136,  134,  135,
      137,  147,   56,  138,  135,   56,  139,  140,   56,  141,
      142,  138,   56,   59,   59,  144,  143,  145,  145,  149,
      146,   59,   59,  152,  151,  153,  144,   59,  147,  148,
      151,  150,  148,   59,    0,  150,  152,  154,    0,  240,
       59,   59,  144,  242,  145,  145,  149,  167,   59,   59,
      152,  151,  153,  144,   59,    0,  148,  151,  150,  148,
       59,   64,  150,  152,  154,   64,  240,  167,  168,  168,

      242,    0,  243,    0,  167,   64,    0,    0,  169,  246,
      247,   64,   64,    0,  174,   64,    0,    0,   64,  168,
        0,    0,   64,  169,  167,  168,  168,  171,  169,  243,
      171,  171,   64,  170,  174,  169,  246,  247,   64,   64,
      170,  174,   64,   65,   65,    0,  168,  172,  170,  172,
      169,  171,   65,  170,  171,  169,   65,  171,  171,   65,
      170,  174,    0,   65,    0,    0,    0,  170,    0,  172,
       65,   65,  173,  173,  172,  170,  172,    0,  171,   65,
      170,    0,    0,   65,    0,  176,   65,  173,    0,  176,
       65,   66,  173,  182,  248,   66,  172,  175,  249,  173,

      173,  250,   66,    0,  175,    0,  182,  182,   66,  176,
        0,  175,  176,  182,  173,   66,  176,  175,   66,  173,
      182,  248,   66,    0,  175,  249,    0,  195,  250,   66,
      177,  175,  179,  182,  182,   66,  176,  177,  175,  177,
      182,  178,   66,   69,  175,   69,    0,  195,   69,  179,
      177,  178,  179,  184,  195,   69,   69,  177,  251,  179,
        0,  178,    0,  184,  177,   69,  177,    0,  178,  180,
       69,  183,   69,  184,  195,   69,  179,  177,  178,  179,
      184,  252,   69,   69,  180,  251,  188,  183,  178,  180,
      184,  183,   69,   70,   70,  187,  180,   70,  183,  188,

      184,   70,  187,  185,    0,  185,  188,   70,  252,  253,
       70,  180,  254,  188,  183,  187,  180,   70,  183,    0,
       70,   70,  187,  255,   70,  185,  188,    0,   70,  187,
      185,  189,  185,  188,   70,  196,  253,   70,    0,  254,
      190,  189,  187,  191,   70,   71,  196,  190,  258,  259,
      255,  189,  185,  191,   71,  196,   71,  257,  189,   71,
      190,  257,  196,  191,  261,   71,    0,  190,  189,  192,
      191,    0,   71,  196,  190,  258,  259,    0,  189,  192,
      191,   71,  196,   71,  257,  193,   71,  190,  257,  192,
      191,  261,   71,  181,  194,    0,  192,  181,  181,  193,

        0,  262,  193,  194,  181,  193,  192,  200,  194,    0,
        0,  181,  193,  198,  194,    0,  192,  181,    0,  199,
      181,  194,  198,  199,  181,  181,  193,  200,  262,  193,
      194,  181,  193,  198,  200,  194,  201,  201,  181,  199,
      198,  194,  204,  263,  181,  186,  199,  186,    0,  198,
      199,  186,    0,  202,  200,  204,  201,  264,  186,  202,
      198,  202,  204,  201,  201,    0,  199,  186,    0,  204,
      263,    0,  186,  202,  186,  203,  265,  203,  186,  203,
      202,  205,  204,  201,  264,  186,  202,  266,  202,  204,
      205,    0,  206,  267,  186,  197,  197,    0,  207,  203,

      202,  205,  203,  265,  203,  197,  203,  206,  205,    0,
      197,  197,  206,  207,  266,  268,  197,  205,  207,  206,
      267,  211,  197,  197,  208,  207,  203,  269,  205,  209,
        0,  208,  197,  209,  206,  210,  210,  197,  197,  206,
      207,  211,  268,  197,  208,  207,  212,  212,  211,  213,
        0,  208,  214,  209,  269,  210,  209,  215,  208,    0,
      209,  215,  210,  210,  213,  214,  216,  212,  211,  213,
      216,  208,  214,  212,  212,  218,  213,  218,  270,  214,
      209,  215,  210,    0,  215,  271,  216,  219,  215,  217,
      219,  213,  214,  216,  212,  218,  213,  216,  217,  214,

      221,    0,  218,  217,  218,  270,  273,  219,  215,  217,
      221,  220,  271,  216,  219,  222,  217,  219,  220,  223,
      221,  224,  218,  223,  224,  217,  220,  221,  222,  274,
      217,  220,  225,  273,  219,  222,  217,  221,  220,  225,
      275,  226,  222,  223,  224,  220,  223,  221,  224,  226,
      223,  224,  225,  220,  228,  222,  274,    0,  220,  225,
      226,  226,  222,    0,  227,  228,  225,  275,  226,  229,
      223,  224,  227,  227,  228,    0,  226,  231,  231,  225,
        0,  228,  276,  277,  227,  229,  230,  226,  226,  229,
      230,  227,  228,  230,  235,  233,  229,    0,  231,  227,

      227,  228,  233,  232,  231,  231,  230,  232,  233,  276,
      277,  227,  229,  230,  235,  233,  229,  230,  234,  278,
      230,  235,  233,  232,  236,  231,  279,  280,  260,  233,
      232,  234,  281,  230,  232,  233,  282,  283,  234,  236,
      284,  235,  233,  260,  236,  234,  278,  285,  286,  287,
      232,  236,  289,  279,  280,  260,  290,  285,  234,  281,
      291,  292,  293,  282,  283,  234,  236,  284,  294,  295,
      260,  236,  296,  298,  285,  286,  287,  299,  300,  289,
      301,  302,  303,  290,  285,  304,  305,  291,  292,  293,
      306,  307,  308,  309,  310,  294,  295,  311,  313,  296,

      298,  303,  314,  315,  299,  300,  316,  301,  302,  303,
      318,  319,  304,  305,  320,  321,  323,  306,  307,  308,
      309,  310,  325,  326,  311,  313,  328,  329,  303,  314,
      315,  330,  324,  316,  324,  331,  332,  318,  319,  333,
      334,  320,  321,  323,  337,  338,  433,    0,  339,  325,
      326,    0,  434,  328,  329,    0,  340,    0,  330,  324,
      342,  324,  331,  332,  337,  338,  333,  334,  339,  343,
      341,  337,  338,  433,  344,  339,  340,  341,  346,  434,
      342,    0,  345,  340,  344,  346,  347,  342,  347,  343,
      341,  337,  338,    0,  344,  339,  343,  341,  346,    0,

      345,  344,  345,  340,  341,  346,  348,  342,  347,  345,
        0,  344,  346,  347,  350,  347,  343,  341,  349,  348,
      349,  344,  351,    0,  352,  346,  348,  345,  352,  345,
      350,    0,  354,  348,  350,  347,  353,  351,  435,    0,
      349,  350,  351,    0,  436,  349,  348,  349,  352,  351,
      353,  352,  354,  348,  355,  352,  353,  350,  355,  354,
      437,  350,    0,  353,  351,  435,  356,  349,  357,  351,
      360,  436,  357,  356,  358,  352,  361,  353,  355,  354,
      359,  355,  359,  353,    0,  355,  356,  437,  439,  358,
      360,  361,  357,  356,  358,  357,  361,  360,    0,  357,

      356,  358,  359,  361,    0,  355,  364,  359,  362,  359,
      364,  362,  365,  356,  363,  439,  358,  360,  361,  357,
      366,  358,  366,  361,  369,  363,  367,    0,  370,  359,
      364,  362,  365,  364,  363,  362,  368,  364,  362,  365,
      367,  363,  366,  368,  369,    0,  367,  366,  370,  366,
        0,  369,  363,  367,  371,  370,  368,  364,  362,  365,
      441,  363,  371,  368,  376,  372,  374,  367,  376,  366,
      368,  369,  372,  367,  371,  370,  375,  373,    0,  375,
      373,  371,  374,  368,  376,  372,  374,  441,  379,  371,
      377,  376,  372,  374,  442,  376,  375,  443,  379,  372,

      373,  371,    0,  375,  373,  377,  375,  373,  379,  374,
      377,  376,  372,  374,  378,  379,  380,  377,  381,  382,
      383,  442,  385,  375,  443,  379,    0,  373,  384,  378,
      383,  385,  377,  386,  378,  379,  380,  377,  381,  382,
      383,  378,  385,  380,  384,  381,  382,  383,  384,  385,
      388,    0,    0,  386,  444,  384,  378,  383,  385,  387,
      386,  378,  445,  380,  389,  381,  382,  383,  389,  385,
      388,  384,  390,  390,  387,  384,    0,  388,  391,  387,
      386,  444,  391,  392,  389,  392,  387,    0,  393,  445,
        0,  389,    0,  390,    0,  389,  395,  388,  394,  390,

      390,  387,  391,  392,  393,  391,  387,  398,  393,  391,
      392,  389,  392,  397,  394,  393,  395,  396,  394,  399,
      390,  398,  400,  395,  396,  394,  397,  398,  401,  391,
      392,  393,  401,  397,  398,  393,  446,  396,    0,  399,
      397,  394,  400,  395,  396,  394,  399,  401,  398,  400,
      403,  396,  401,  397,  398,  401,  402,    0,  405,  401,
      397,  403,  405,  446,  396,  402,  399,  404,    0,  400,
      403,  406,  448,  408,  401,  404,  402,  403,    0,  401,
      449,  407,  405,  402,  407,  405,  406,  404,  403,  405,
      409,  406,  402,  408,  404,  410,    0,  403,  406,  448,

      408,  407,  404,  402,  412,  411,  413,  449,  407,  405,
      409,  407,  450,  406,  404,  410,  415,  409,  406,  412,
      408,  413,  410,  411,  412,  411,  413,  414,  407,  416,
        0,  412,  411,  413,  414,  418,  415,  409,  419,  450,
      416,    0,  410,  415,  417,    0,  412,  414,  413,  416,
      411,  412,  411,  413,  414,  418,  416,  420,  419,  417,
      421,  414,  418,  415,  417,  419,    0,  416,  424,  421,
      451,  417,  424,  423,  414,    0,  416,  420,  422,    0,
      421,  425,  418,  423,  420,  419,  417,  421,  422,  453,
      422,  417,  424,  423,  426,  424,  421,  451,  422,  424,

      423,  425,  427,  426,  420,  422,  429,  421,  425,  428,
      423,  428,  430,    0,  426,  422,  453,  422,  427,  424,
      423,  426,  427,  454,  429,  422,  429,  430,  425,  427,
      426,  428,  430,  429,  455,  431,  428,  432,  428,  430,
      432,  426,  457,  458,  459,  427,  460,  461,  431,  427,
      454,  429,  465,  429,  430,  431,  466,  432,  428,  430,
      468,  455,  431,  470,  432,  471,  472,  432,  473,  457,
      458,  459,  474,  460,  461,  431,  477,  475,  481,  465,
      483,  484,  431,  466,  432,  485,  486,  468,  475,  488,
      470,  489,  471,  472,  490,  473,  491,  492,  495,  474,

      496,  497,  498,  477,  475,  481,  499,  483,  484,  500,
      501,  503,  485,  486,  504,  475,  488,  505,  489,  506,
      508,  490,  509,  491,  492,  495,  510,  496,  497,  498,
      511,  512,  513,  499,  514,  515,  500,  501,  503,  516,
      517,  504,  519,  520,  505,    0,  506,  508,  524,  509,
        0,  522,  523,  510,  526,    0,  527,  511,  512,  513,
      525,  514,  515,  613,  522,  523,  516,  517,  524,  519,
      520,  522,  523,  525,  526,  524,  527,  529,  522,  523,
      525,  526,  528,  527,    0,  531,  528,  525,  530,    0,
      613,  522,  523,  531,  530,  524,    0,  529,  522,  523,

      525,  526,  533,  527,  529,  531,  528,  525,  530,  528,
      532,  534,  531,  528,  536,  530,  535,  533,  614,  535,
      531,  530,  533,  532,  529,  534,  615,  616,    0,  533,
      532,  534,  531,  528,  536,  530,  539,  532,  534,  535,
      537,  536,  541,  535,  533,  614,  535,  537,  538,  533,
      532,  539,  534,  615,  616,  540,  539,  532,  534,  540,
      537,  536,  541,  539,  538,    0,  535,  537,  538,  541,
      542,    0,  542,  543,  537,  538,  545,  543,  539,  540,
        0,  544,  540,  539,    0,  618,  540,  537,  544,  541,
        0,  538,  542,  543,  546,  538,  545,  542,  547,  542,

      543,  544,  549,  545,  543,  546,  540,  550,  544,  547,
      548,  550,  618,  551,  546,  544,    0,  549,  547,  542,
      543,  546,  549,  545,    0,  547,  548,  552,  544,  549,
      548,  550,  546,  551,  550,  553,  547,  548,  550,  554,
      551,  546,  619,  554,  549,  547,  620,  552,  555,  549,
        0,  556,  557,  548,  552,  553,  558,  548,  550,  555,
      551,  557,  553,  554,  622,  561,  554,  559,  555,  619,
      554,  556,  557,  620,  552,  555,  558,  559,  556,  557,
      560,    0,  553,  558,  561,  561,  555,  559,  557,  562,
      554,  622,  561,  560,  559,  555,    0,  563,  556,  557,

      560,  565,  562,  558,  559,  623,  564,  560,  564,  562,
      563,  561,  561,    0,  559,    0,  562,  563,  566,  564,
      560,  565,  567,  568,  563,  566,  564,  560,  565,  562,
        0,  569,  623,  564,    0,  564,  562,  563,  566,  570,
      571,  573,  567,  568,  563,  566,  564,    0,  565,  567,
      568,  569,  566,  564,  570,  572,    0,  574,  569,  570,
      571,  573,  572,  575,    0,  566,  570,  571,  573,  567,
      568,  574,  576,    0,  578,  572,  575,  574,  569,    0,
      582,  570,  572,  575,  574,  624,  570,  571,  573,  572,
      575,  577,  576,  577,  578,  579,  580,  581,  574,  576,

      582,  578,  572,  575,  574,  581,  583,  582,  579,  580,
      575,  625,  624,  577,    0,  579,  580,  581,  577,  576,
      577,  578,  579,  580,  581,  584,  583,  582,  587,  584,
      585,  586,  581,  583,  585,  579,  580,    0,  625,  586,
      577,  587,  579,  580,  581,  588,    0,  627,  587,  584,
      591,  586,  584,  583,  585,  587,  584,  585,  586,  589,
      588,  585,  590,  592,  590,  588,  586,  589,  587,  628,
      591,    0,  588,  594,  627,  587,  584,  591,  586,  589,
      629,  585,  596,  592,  590,    0,  589,  588,    0,  590,
      592,  590,  588,  594,  589,  593,  628,  591,  595,  593,

      594,  598,  596,  597,  600,  598,  589,  629,  595,  596,
      592,  590,  599,  600,  599,  593,    0,  597,  595,  630,
      594,  598,  593,  597,  600,  595,  593,  601,  598,  596,
      597,  600,  598,  602,  599,  595,  605,  602,  603,  599,
      600,  599,  593,  601,  597,  595,  630,  601,  598,  606,
      597,  600,  606,  603,  601,  607,  605,  602,  603,    0,
      602,  599,  631,  605,  602,  603,  604,  632,  604,  606,
      601,  608,  609,  633,  601,  607,  606,  610,  634,  606,
      603,  635,  607,  605,  602,  603,  604,  608,  637,  631,
      638,  608,  609,  604,  632,  604,  606,  610,  608,  609,

      633,  639,  607,  642,  610,  634,  643,  644,  635,  645,
      650,  651,  652,  604,  608,  637,  655,  638,  608,  609,
      656,  657,  658,  659,  610,  661,  662,  663,  639,  664,
      642,  665,  666,  643,  644,  667,  645,  650,  651,  652,
      668,  669,  671,  655,  672,  673,  675,  656,  657,  658,
      659,  676,  661,  662,  663,  677,  664,  679,  665,  666,
      680,  682,  667,  683,  747,  681,  749,  668,  669,  671,
        0,  672,  673,  675,  684,  684,  685,  679,  676,  688,
      680,  682,  677,  683,  679,  681,  681,  680,  682,  686,
      683,  747,  681,  749,    0,  684,  685,  689,  686,  688,

      750,  684,  684,  685,  679,    0,  688,  680,  682,  686,
      683,  687,  681,  681,    0,  690,  686,  689,    0,  690,
      691,  687,  684,  685,  689,  686,  688,  750,    0,  693,
      691,  687,  694,    0,  692,  695,  686,  751,  687,  690,
      691,  692,  690,  697,  689,  698,  690,  691,  687,  693,
      695,  696,  694,  752,  692,  695,  693,  691,  687,  694,
      696,  692,  695,  697,  751,  698,  690,  691,  692,  699,
      697,  696,  698,  700,    0,  704,  693,  695,  696,  694,
      752,  692,  695,  701,  699,  754,  755,  696,  700,  699,
      697,    0,  698,  700,    0,  704,  699,  701,  696,  703,

      700,  702,  704,  701,    0,  702,  703,  705,    0,  705,
      701,  699,  754,  755,  756,  700,  699,    0,  706,  703,
      700,  702,  704,  708,  701,    0,  703,  705,  702,  707,
      701,  706,  702,  703,  705,  709,  705,  710,  706,  711,
        0,  756,    0,  708,  707,  706,  703,  712,  702,  707,
      708,    0,  710,  713,  705,  709,  707,  710,  706,  711,
      713,  712,  709,  714,  710,  706,  711,  712,    0,  715,
      708,  707,  716,  713,  712,  717,  707,  718,  720,  710,
      713,  718,  709,  714,  710,  759,  711,  713,  712,  715,
      714,  721,  716,  720,  712,  717,  715,  722,  720,  716,

      713,  718,  717,  719,  718,  720,  719,  723,  718,    0,
      714,  721,  759,    0,    0,    0,  715,  722,  721,  716,
      720,  726,  717,  719,  722,  720,  724,  723,  718,  725,
      719,  727,  728,  719,  723,  727,  729,    0,  721,  724,
      729,  726,  725,    0,  722,  763,  724,  765,  726,  725,
      719,  727,  728,  724,  723,  730,  725,  732,  727,  728,
      729,  732,  727,  729,  731,  731,  724,  729,  726,  725,
      730,    0,  763,  724,  765,  730,  725,    0,  727,  728,
      733,  732,  730,  734,  732,  731,  735,  729,  732,  736,
        0,  731,  731,    0,  733,  737,  734,  730,  736,  737,

      733,  735,  730,  734,  738,  768,  735,  733,  732,  736,
      734,    0,  731,  735,  739,  741,  736,  740,  740,  737,
      742,  733,  737,  734,  738,  736,  737,  733,  735,  743,
      734,  738,  768,  735,  739,  741,  736,  746,  740,  771,
      742,  739,  741,  743,  740,  740,  737,  742,  744,  743,
      745,  738,  744,  772,  745,  774,  743,  746,  775,  777,
      778,  739,  741,  779,  746,  740,  771,  742,  781,  782,
      743,  785,  744,  787,  745,  744,  743,  745,  788,  744,
      772,  745,  774,  789,  746,  775,  777,  778,  790,  795,
      779,  796,  797,  798,  799,  781,  782,  800,  785,  744,

      787,  745,    0,  799,    0,  788,  803,  852,  801,  804,
      789,  807,  797,  798,  799,  790,  795,  800,  796,  797,
      798,  799,  801,  804,  800,  802,  803,  806,  801,  804,
      799,  807,  802,  803,  852,  801,  804,  808,  807,  797,
      798,  799,  806,  810,  800,  802,  805,  806,  805,  801,
      804,  811,  802,  803,  806,  801,  804,  808,  807,  802,
      809,  812,  809,  810,  808,  813,  814,    0,  805,  806,
      810,  811,  802,  805,  806,  805,  816,  817,  811,  818,
      853,  812,  809,    0,  808,  813,  814,  809,  812,  809,
      810,  815,  813,  814,  819,  805,  816,  817,  811,  818,

      815,    0,  820,  816,  817,  822,  818,  853,  812,  809,
      823,  815,  813,  814,  819,  821,    0,    0,  815,  855,
      860,  819,  820,  816,  817,  822,  818,  815,  821,  820,
      823,  826,  822,  824,  828,  821,    0,  823,  815,  825,
      824,  819,  821,  825,  827,  829,  855,  860,  830,  820,
        0,  826,  822,  824,  828,  821,  862,  823,  826,  827,
      824,  828,  821,  825,  827,  829,  825,  824,  830,    0,
      825,  827,  829,  832,  831,  830,  831,  833,  826,  834,
      824,  828,  835,  862,  837,  836,  827,  832,  837,  835,
      825,  827,  829,  832,  838,  830,  831,  833,  838,  834,

      832,  831,  835,  831,  833,  836,  834,  839,  837,  835,
      841,  837,  836,  840,  832,  837,  835,  863,  838,  842,
      832,  838,  839,  831,  833,  838,  834,  839,  840,  835,
      841,  843,  836,  840,  839,  837,  844,  841,  866,  842,
      840,    0,  869,  870,  863,  838,  842,  872,  845,  839,
        0,  843,  846,  875,  839,  840,  844,  841,  843,  846,
      840,  845,  876,  844,  877,  866,  842,  878,  845,  869,
      870,    0,  846,  875,  872,  845,  879,  880,  843,  846,
      875,  881,  876,  844,  877,  881,  846,  878,  845,  876,
      882,  877,    0,  903,  878,  845,  879,  880,  883,  846,

      875,  884,  885,  879,  880,  881,  886,  887,  881,  876,
      882,  877,  881,  883,  878,  889,    0,  882,  883,  891,
      903,  884,  885,  879,  880,  883,  886,  887,  884,  885,
      890,    0,  881,  886,  887,  889,  888,  882,  888,  891,
      883,  892,  889,  890,  893,  883,  891,  904,  884,  885,
      890,    0,  894,  886,  887,  895,  896,  890,  888,    0,
      897,  892,  889,  888,  893,  888,  891,  894,  892,  899,
      890,  893,  894,  897,  904,  895,  896,  890,  898,  894,
      897,  900,  895,  896,  901,  888,  898,  897,  892,  899,
      902,  893,  906,  908,  894,  910,  899,  911,  898,  894,

      897,  900,  895,  896,  901,  898,  914,  897,  900,  913,
      902,  901,  915,  898,  917,  916,  899,  902,  919,  906,
      908,  914,  910,  913,  911,  898,  914,  918,  900,  913,
      916,  901,  915,  914,  917,  916,  913,  902,  919,  915,
      918,  917,  916,  920,  921,  919,  922,  918,  914,  924,
      913,  926,  929,  914,  918,  921,  913,  916,    0,  915,
      930,  917,  916,  920,  921,  919,  922,  918,  931,  932,
      920,  921,  929,  922,  918,    0,  924,  933,  926,  929,
      930,  934,  921,  932,    0,  937,  938,  930,  931,  932,
      920,  921,    0,  922,    0,  931,  932,  933,    0,  929,

        0,  934,    0,    0,  933,  937,  938,  930,  934,    0,
      932,    0,  937,  938,    0,  931,  932,    0,    0,    0,
        0,    0,    0,    0,  933,    0,    0,    0,  934,    0,
        0,    0,  937,  938,  940,    0,    0,  940,  941,    0,
      941,  941,  943,    0,  943,  943,  944,    0,  944,  944,
      945,    0,  945,  945,  946,    0,  946,  946,  939,  939,
      939,  939,  939,  939,  939,  939,  939,  939,  939,  939,
      939,  939,  939,  939,  939,  939,  939,  939,  939,  939,
      939,  939,  939,  939,  939,  939,  939,  939,  939,  939,
      939,  939,  939,  939,  939,  939,  939,  939,  939,  939,

      939,  939,  939,  939,  939,  939,  939,  939,  939,  939,
      939,  939,  939,  939,  939,  939,  939,  939,  939,  939,
      939,  939,  939,  939
    } ;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "flex_lexer.l"
/**
 * lexer
 *
 *
 */
/***************************
 ** Section 1: Definitions
 ***************************/
#line 12 "flex_lexer.l"

#include "../sql/Expr.h"
#include "bison_parser.h"
#include <stdio.h>

#define TOKEN(name) { return SQL_##name; }

/***************************
 ** Section 2: Rules
 ***************************/
/* Define the output files */
/* Make reentrant */
/* performance tweeks */
/* other flags */
/* %option nodefault */

/***************************
 ** Section 3: Rules
 ***************************/
#line 1623 "flex_lexer.cpp"

#define INITIAL 0
#define COMMENT 1

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

/* Holds the entire state of the reentrant scanner. */
struct yyguts_t
    {

    /* User-defined. Not touched by flex. */
    YY_EXTRA_TYPE yyextra_r;

    /* The rest are the same as the globals declared in the non-reentrant scanner. */
    FILE *yyin_r, *yyout_r;
    size_t yy_buffer_stack_top; /**< index of top of stack. */
    size_t yy_buffer_stack_max; /**< capacity of stack. */
    YY_BUFFER_STATE * yy_buffer_stack; /**< Stack as an array. */
    char yy_hold_char;
    int yy_n_chars;
    int yyleng_r;
    char *yy_c_buf_p;
    int yy_init;
    int yy_start;
    int yy_did_buffer_switch_on_eof;
    int yy_start_stack_ptr;
    int yy_start_stack_depth;
    int *yy_start_stack;
    yy_state_type yy_last_accepting_state;
    char* yy_last_accepting_cpos;

    int yylineno_r;
    int yy_flex_debug_r;

    char *yytext_r;
    int yy_more_flag;
    int yy_more_len;

    YYSTYPE * yylval_r;

    YYLTYPE * yylloc_r;

    }; /* end struct yyguts_t */

static int yy_init_globals (yyscan_t yyscanner );

    /* This must go here because YYSTYPE and YYLTYPE are included
     * from bison output in section 1.*/
    #    define yylval yyg->yylval_r
    
    #    define yylloc yyg->yylloc_r
    
int hsql_lex_init (yyscan_t* scanner);

int hsql_lex_init_extra (YY_EXTRA_TYPE user_defined,yyscan_t* scanner);

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int hsql_lex_destroy (yyscan_t yyscanner );

int hsql_get_debug (yyscan_t yyscanner );

void hsql_set_debug (int debug_flag ,yyscan_t yyscanner );

YY_EXTRA_TYPE hsql_get_extra (yyscan_t yyscanner );

void hsql_set_extra (YY_EXTRA_TYPE user_defined ,yyscan_t yyscanner );

FILE *hsql_get_in (yyscan_t yyscanner );

void hsql_set_in  (FILE * in_str ,yyscan_t yyscanner );

FILE *hsql_get_out (yyscan_t yyscanner );

void hsql_set_out  (FILE * out_str ,yyscan_t yyscanner );

int hsql_get_leng (yyscan_t yyscanner );

char *hsql_get_text (yyscan_t yyscanner );

int hsql_get_lineno (yyscan_t yyscanner );

void hsql_set_lineno (int line_number ,yyscan_t yyscanner );

YYSTYPE * hsql_get_lval (yyscan_t yyscanner );

void hsql_set_lval (YYSTYPE * yylval_param ,yyscan_t yyscanner );

       YYLTYPE *hsql_get_lloc (yyscan_t yyscanner );
    
        void hsql_set_lloc (YYLTYPE * yylloc_param ,yyscan_t yyscanner );
    
/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int hsql_wrap (yyscan_t yyscanner );
#else
extern int hsql_wrap (yyscan_t yyscanner );
#endif
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int ,yyscan_t yyscanner);
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * ,yyscan_t yyscanner);
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (yyscan_t yyscanner );
#else
static int input (yyscan_t yyscanner );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, yyleng, 1, yyout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, yyin))==0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg , yyscanner)
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int hsql_lex \
               (YYSTYPE * yylval_param,YYLTYPE * yylloc_param ,yyscan_t yyscanner);

#define YY_DECL int hsql_lex \
               (YYSTYPE * yylval_param, YYLTYPE * yylloc_param , yyscan_t yyscanner)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

#line 51 "flex_lexer.l"


#line 1871 "flex_lexer.cpp"

    yylval = yylval_param;

    yylloc = yylloc_param;

	if ( !yyg->yy_init )
		{
		yyg->yy_init = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yyg->yy_start )
			yyg->yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			hsql_ensure_buffer_stack (yyscanner);
			YY_CURRENT_BUFFER_LVALUE =
				hsql__create_buffer(yyin,YY_BUF_SIZE ,yyscanner);
		}

		hsql__load_buffer_state(yyscanner );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yyg->yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yyg->yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yyg->yy_start;
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				yyg->yy_last_accepting_state = yy_current_state;
				yyg->yy_last_accepting_cpos = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 940 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_current_state != 939 );
		yy_cp = yyg->yy_last_accepting_cpos;
		yy_current_state = yyg->yy_last_accepting_state;

yy_find_action:
		yy_act = yy_accept[yy_current_state];

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = yyg->yy_hold_char;
			yy_cp = yyg->yy_last_accepting_cpos;
			yy_current_state = yyg->yy_last_accepting_state;
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 53 "flex_lexer.l"
BEGIN(COMMENT);
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 54 "flex_lexer.l"
/* skipping comment content until a end of line is read */;
	YY_BREAK
case 3:
/* rule 3 can match eol */
YY_RULE_SETUP
#line 55 "flex_lexer.l"
BEGIN(INITIAL);
	YY_BREAK
case 4:
/* rule 4 can match eol */
YY_RULE_SETUP
#line 58 "flex_lexer.l"
/* skip whitespace */;
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 62 "flex_lexer.l"
TOKEN(DEALLOCATE)
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 63 "flex_lexer.l"
TOKEN(PARAMETERS)
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 64 "flex_lexer.l"
TOKEN(INTERSECT)
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 65 "flex_lexer.l"
TOKEN(TEMPORARY)
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 66 "flex_lexer.l"
TOKEN(TIMESTAMP)
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 67 "flex_lexer.l"
TOKEN(DISTINCT)
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 68 "flex_lexer.l"
TOKEN(NVARCHAR)
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 69 "flex_lexer.l"
TOKEN(RESTRICT)
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 70 "flex_lexer.l"
TOKEN(TRUNCATE)
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 71 "flex_lexer.l"
TOKEN(ANALYZE)
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 72 "flex_lexer.l"
TOKEN(BETWEEN)
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 73 "flex_lexer.l"
TOKEN(CASCADE)
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 74 "flex_lexer.l"
TOKEN(COLUMNS)
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 75 "flex_lexer.l"
TOKEN(CONTROL)
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 76 "flex_lexer.l"
TOKEN(DEFAULT)
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 77 "flex_lexer.l"
TOKEN(EXECUTE)
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 78 "flex_lexer.l"
TOKEN(EXPLAIN)
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 79 "flex_lexer.l"
TOKEN(HISTORY)
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 80 "flex_lexer.l"
TOKEN(INTEGER)
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 81 "flex_lexer.l"
TOKEN(NATURAL)
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 82 "flex_lexer.l"
TOKEN(PREPARE)
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 83 "flex_lexer.l"
TOKEN(PRIMARY)
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 84 "flex_lexer.l"
TOKEN(SCHEMAS)
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 85 "flex_lexer.l"
TOKEN(SPATIAL)
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 86 "flex_lexer.l"
TOKEN(VIRTUAL)
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 87 "flex_lexer.l"
TOKEN(BEFORE)
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 88 "flex_lexer.l"
TOKEN(COLUMN)
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 89 "flex_lexer.l"
TOKEN(CREATE)
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 90 "flex_lexer.l"
TOKEN(DELETE)
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 91 "flex_lexer.l"
TOKEN(DIRECT)
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 92 "flex_lexer.l"
TOKEN(DOUBLE)
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 93 "flex_lexer.l"
TOKEN(ESCAPE)
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 94 "flex_lexer.l"
TOKEN(EXCEPT)
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 95 "flex_lexer.l"
TOKEN(EXISTS)
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 96 "flex_lexer.l"
TOKEN(GLOBAL)
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 97 "flex_lexer.l"
TOKEN(HAVING)
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 98 "flex_lexer.l"
TOKEN(IMPORT)
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 99 "flex_lexer.l"
TOKEN(INSERT)
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 100 "flex_lexer.l"
TOKEN(ISNULL)
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 101 "flex_lexer.l"
TOKEN(OFFSET)
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 102 "flex_lexer.l"
TOKEN(RENAME)
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 103 "flex_lexer.l"
TOKEN(SCHEMA)
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 104 "flex_lexer.l"
TOKEN(SELECT)
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 105 "flex_lexer.l"
TOKEN(SORTED)
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 106 "flex_lexer.l"
TOKEN(TABLES)
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 107 "flex_lexer.l"
TOKEN(UNIQUE)
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 108 "flex_lexer.l"
TOKEN(UNLOAD)
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 109 "flex_lexer.l"
TOKEN(UPDATE)
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 110 "flex_lexer.l"
TOKEN(VALUES)
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 111 "flex_lexer.l"
TOKEN(AFTER)
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 112 "flex_lexer.l"
TOKEN(ALTER)
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 113 "flex_lexer.l"
TOKEN(CROSS)
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 114 "flex_lexer.l"
TOKEN(DELTA)
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 115 "flex_lexer.l"
TOKEN(GROUP)
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 116 "flex_lexer.l"
TOKEN(INDEX)
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 117 "flex_lexer.l"
TOKEN(INNER)
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 118 "flex_lexer.l"
TOKEN(LIMIT)
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 119 "flex_lexer.l"
TOKEN(LOCAL)
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 120 "flex_lexer.l"
TOKEN(MERGE)
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 121 "flex_lexer.l"
TOKEN(MINUS)
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 122 "flex_lexer.l"
TOKEN(ORDER)
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 123 "flex_lexer.l"
TOKEN(OUTER)
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 124 "flex_lexer.l"
TOKEN(RIGHT)
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 125 "flex_lexer.l"
TOKEN(TABLE)
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 126 "flex_lexer.l"
TOKEN(UNION)
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 127 "flex_lexer.l"
TOKEN(USING)
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 128 "flex_lexer.l"
TOKEN(WHERE)
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 129 "flex_lexer.l"
TOKEN(CALL)
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 130 "flex_lexer.l"
TOKEN(DATE)
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 131 "flex_lexer.l"
TOKEN(DESC)
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 132 "flex_lexer.l"
TOKEN(DROP)
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 133 "flex_lexer.l"
TOKEN(FILE)
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 134 "flex_lexer.l"
TOKEN(FROM)
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 135 "flex_lexer.l"
TOKEN(FULL)
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 136 "flex_lexer.l"
TOKEN(HASH)
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 137 "flex_lexer.l"
TOKEN(HINT)
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 138 "flex_lexer.l"
TOKEN(INTO)
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 139 "flex_lexer.l"
TOKEN(JOIN)
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 140 "flex_lexer.l"
TOKEN(LEFT)
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 141 "flex_lexer.l"
TOKEN(LIKE)
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 142 "flex_lexer.l"
TOKEN(LOAD)
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 143 "flex_lexer.l"
TOKEN(NULL)
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 144 "flex_lexer.l"
TOKEN(PART)
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 145 "flex_lexer.l"
TOKEN(PLAN)
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 146 "flex_lexer.l"
TOKEN(SHOW)
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 147 "flex_lexer.l"
TOKEN(TEXT)
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 148 "flex_lexer.l"
TOKEN(TIME)
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 149 "flex_lexer.l"
TOKEN(VIEW)
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 150 "flex_lexer.l"
TOKEN(WITH)
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 151 "flex_lexer.l"
TOKEN(ADD)
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 152 "flex_lexer.l"
TOKEN(ALL)
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 153 "flex_lexer.l"
TOKEN(AND)
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 154 "flex_lexer.l"
TOKEN(ASC)
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 155 "flex_lexer.l"
TOKEN(CSV)
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 156 "flex_lexer.l"
TOKEN(FOR)
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 157 "flex_lexer.l"
TOKEN(INT)
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 158 "flex_lexer.l"
TOKEN(KEY)
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 159 "flex_lexer.l"
TOKEN(NOT)
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 160 "flex_lexer.l"
TOKEN(OFF)
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 161 "flex_lexer.l"
TOKEN(SET)
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 162 "flex_lexer.l"
TOKEN(TBL)
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 163 "flex_lexer.l"
TOKEN(TOP)
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 164 "flex_lexer.l"
TOKEN(AS)
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 165 "flex_lexer.l"
TOKEN(BY)
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 166 "flex_lexer.l"
TOKEN(IF)
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 167 "flex_lexer.l"
TOKEN(IN)
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 168 "flex_lexer.l"
TOKEN(IS)
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 169 "flex_lexer.l"
TOKEN(OF)
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 170 "flex_lexer.l"
TOKEN(ON)
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 171 "flex_lexer.l"
TOKEN(OR)
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 172 "flex_lexer.l"
TOKEN(TO)
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 173 "flex_lexer.l"
TOKEN(DATABASE)
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 174 "flex_lexer.l"
TOKEN(DATABASES)
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 175 "flex_lexer.l"
TOKEN(VARCHAR)
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 176 "flex_lexer.l"
TOKEN(TINYINT)
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 177 "flex_lexer.l"
TOKEN(CHAR)
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 178 "flex_lexer.l"
TOKEN(USE)
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 179 "flex_lexer.l"
TOKEN(CHECK)
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 183 "flex_lexer.l"
TOKEN(NOTEQUALS)
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 184 "flex_lexer.l"
TOKEN(LESSEQ)
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 185 "flex_lexer.l"
TOKEN(GREATEREQ)
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 188 "flex_lexer.l"
{ return yytext[0]; }
	YY_BREAK
case 127:
#line 192 "flex_lexer.l"
case 128:
YY_RULE_SETUP
#line 192 "flex_lexer.l"
{
	yylval->fval = atof(yytext);
	return SQL_FLOATVAL;
}
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 197 "flex_lexer.l"
{
	yylval->ival = atol(yytext);
	return SQL_INTVAL;
}
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 202 "flex_lexer.l"
{
	// Crop the leading and trailing quote char
	yylval->sval = hsql::substr(yytext, 1, strlen(yytext)-1);
	return SQL_IDENTIFIER;
}
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 208 "flex_lexer.l"
{
	yylval->sval = strdup(yytext);
	return SQL_IDENTIFIER;
}
	YY_BREAK
case 132:
YY_RULE_SETUP
#line 214 "flex_lexer.l"
{
	// Crop the leading and trailing quote char
	yylval->sval = hsql::substr(yytext, 1, strlen(yytext)-1);
	return SQL_STRING;
}
	YY_BREAK
case 133:
YY_RULE_SETUP
#line 220 "flex_lexer.l"
{ fprintf(stderr, "[SQL-Lexer-Error] Unknown Character: %c\n", yytext[0]); return 0; }
	YY_BREAK
case 134:
YY_RULE_SETUP
#line 223 "flex_lexer.l"
ECHO;
	YY_BREAK
#line 2640 "flex_lexer.cpp"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(COMMENT):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yyg->yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yyg->yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * hsql_lex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yyg->yy_c_buf_p <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yyg->yy_c_buf_p = yyg->yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state( yyscanner );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state , yyscanner);

			yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yyg->yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yyg->yy_last_accepting_cpos;
				yy_current_state = yyg->yy_last_accepting_state;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer( yyscanner ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yyg->yy_did_buffer_switch_on_eof = 0;

				if ( hsql_wrap(yyscanner ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yyg->yy_c_buf_p = yyg->yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yyg->yy_c_buf_p =
					yyg->yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yyg->yy_c_buf_p =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars];

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of hsql_lex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = yyg->yytext_ptr;
	register int number_to_move, i;
	int ret_val;

	if ( yyg->yy_c_buf_p > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yyg->yy_c_buf_p - yyg->yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yyg->yy_c_buf_p - yyg->yytext_ptr) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

			int yy_c_buf_p_offset =
				(int) (yyg->yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					hsql_realloc((void *) b->yy_ch_buf,b->yy_buf_size + 2 ,yyscanner );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yyg->yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			yyg->yy_n_chars, (size_t) num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	if ( yyg->yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			hsql_restart(yyin  ,yyscanner);
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) (yyg->yy_n_chars + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = yyg->yy_n_chars + number_to_move + (yyg->yy_n_chars >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) hsql_realloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size ,yyscanner );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	yyg->yy_n_chars += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yyg->yytext_ptr = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (yyscan_t yyscanner)
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	yy_current_state = yyg->yy_start;

	for ( yy_cp = yyg->yytext_ptr + YY_MORE_ADJ; yy_cp < yyg->yy_c_buf_p; ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			yyg->yy_last_accepting_state = yy_current_state;
			yyg->yy_last_accepting_cpos = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 940 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state , yyscan_t yyscanner)
{
	register int yy_is_jam;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner; /* This var may be unused depending upon options. */
	register char *yy_cp = yyg->yy_c_buf_p;

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		yyg->yy_last_accepting_state = yy_current_state;
		yyg->yy_last_accepting_cpos = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 940 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 939);

	return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (yyscan_t yyscanner)
#else
    static int input  (yyscan_t yyscanner)
#endif

{
	int c;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	*yyg->yy_c_buf_p = yyg->yy_hold_char;

	if ( *yyg->yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yyg->yy_c_buf_p < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			/* This was really a NUL. */
			*yyg->yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = yyg->yy_c_buf_p - yyg->yytext_ptr;
			++yyg->yy_c_buf_p;

			switch ( yy_get_next_buffer( yyscanner ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					hsql_restart(yyin ,yyscanner);

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( hsql_wrap(yyscanner ) )
						return EOF;

					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput(yyscanner);
#else
					return input(yyscanner);
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yyg->yy_c_buf_p = yyg->yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yyg->yy_c_buf_p;	/* cast for 8-bit char's */
	*yyg->yy_c_buf_p = '\0';	/* preserve yytext */
	yyg->yy_hold_char = *++yyg->yy_c_buf_p;

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * @param yyscanner The scanner object.
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void hsql_restart  (FILE * input_file , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! YY_CURRENT_BUFFER ){
        hsql_ensure_buffer_stack (yyscanner);
		YY_CURRENT_BUFFER_LVALUE =
            hsql__create_buffer(yyin,YY_BUF_SIZE ,yyscanner);
	}

	hsql__init_buffer(YY_CURRENT_BUFFER,input_file ,yyscanner);
	hsql__load_buffer_state(yyscanner );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * @param yyscanner The scanner object.
 */
    void hsql__switch_to_buffer  (YY_BUFFER_STATE  new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	/* TODO. We should be able to replace this entire function body
	 * with
	 *		hsql_pop_buffer_state();
	 *		hsql_push_buffer_state(new_buffer);
     */
	hsql_ensure_buffer_stack (yyscanner);
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	hsql__load_buffer_state(yyscanner );

	/* We don't actually know whether we did this switch during
	 * EOF (hsql_wrap()) processing, but the only time this flag
	 * is looked at is after hsql_wrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yyg->yy_did_buffer_switch_on_eof = 1;
}

static void hsql__load_buffer_state  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	yyg->yytext_ptr = yyg->yy_c_buf_p = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	yyg->yy_hold_char = *yyg->yy_c_buf_p;
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * @param yyscanner The scanner object.
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE hsql__create_buffer  (FILE * file, int  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) hsql_alloc(sizeof( struct yy_buffer_state ) ,yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in hsql__create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) hsql_alloc(b->yy_buf_size + 2 ,yyscanner );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in hsql__create_buffer()" );

	b->yy_is_our_buffer = 1;

	hsql__init_buffer(b,file ,yyscanner);

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with hsql__create_buffer()
 * @param yyscanner The scanner object.
 */
    void hsql__delete_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		hsql_free((void *) b->yy_ch_buf ,yyscanner );

	hsql_free((void *) b ,yyscanner );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a hsql_restart() or at EOF.
 */
    static void hsql__init_buffer  (YY_BUFFER_STATE  b, FILE * file , yyscan_t yyscanner)

{
	int oerrno = errno;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	hsql__flush_buffer(b ,yyscanner);

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then hsql__init_buffer was _probably_
     * called from hsql_restart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * @param yyscanner The scanner object.
 */
    void hsql__flush_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		hsql__load_buffer_state(yyscanner );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  @param yyscanner The scanner object.
 */
void hsql_push_buffer_state (YY_BUFFER_STATE new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (new_buffer == NULL)
		return;

	hsql_ensure_buffer_stack(yyscanner);

	/* This block is copied from hsql__switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		yyg->yy_buffer_stack_top++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from hsql__switch_to_buffer. */
	hsql__load_buffer_state(yyscanner );
	yyg->yy_did_buffer_switch_on_eof = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  @param yyscanner The scanner object.
 */
void hsql_pop_buffer_state (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (!YY_CURRENT_BUFFER)
		return;

	hsql__delete_buffer(YY_CURRENT_BUFFER ,yyscanner);
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if (yyg->yy_buffer_stack_top > 0)
		--yyg->yy_buffer_stack_top;

	if (YY_CURRENT_BUFFER) {
		hsql__load_buffer_state(yyscanner );
		yyg->yy_did_buffer_switch_on_eof = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void hsql_ensure_buffer_stack (yyscan_t yyscanner)
{
	int num_to_alloc;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if (!yyg->yy_buffer_stack) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		yyg->yy_buffer_stack = (struct yy_buffer_state**)hsql_alloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in hsql_ensure_buffer_stack()" );
								  
		memset(yyg->yy_buffer_stack, 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		yyg->yy_buffer_stack_max = num_to_alloc;
		yyg->yy_buffer_stack_top = 0;
		return;
	}

	if (yyg->yy_buffer_stack_top >= (yyg->yy_buffer_stack_max) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = yyg->yy_buffer_stack_max + grow_size;
		yyg->yy_buffer_stack = (struct yy_buffer_state**)hsql_realloc
								(yyg->yy_buffer_stack,
								num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in hsql_ensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset(yyg->yy_buffer_stack + yyg->yy_buffer_stack_max, 0, grow_size * sizeof(struct yy_buffer_state*));
		yyg->yy_buffer_stack_max = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE hsql__scan_buffer  (char * base, yy_size_t  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) hsql_alloc(sizeof( struct yy_buffer_state ) ,yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in hsql__scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	hsql__switch_to_buffer(b ,yyscanner );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to hsql_lex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       hsql__scan_bytes() instead.
 */
YY_BUFFER_STATE hsql__scan_string (yyconst char * yystr , yyscan_t yyscanner)
{
    
	return hsql__scan_bytes(yystr,strlen(yystr) ,yyscanner);
}

/** Setup the input buffer state to scan the given bytes. The next call to hsql_lex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE hsql__scan_bytes  (yyconst char * yybytes, int  _yybytes_len , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) hsql_alloc(n ,yyscanner );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in hsql__scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = hsql__scan_buffer(buf,n ,yyscanner);
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in hsql__scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg , yyscan_t yyscanner)
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = yyg->yy_hold_char; \
		yyg->yy_c_buf_p = yytext + yyless_macro_arg; \
		yyg->yy_hold_char = *yyg->yy_c_buf_p; \
		*yyg->yy_c_buf_p = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the user-defined data for this scanner.
 * @param yyscanner The scanner object.
 */
YY_EXTRA_TYPE hsql_get_extra  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyextra;
}

/** Get the current line number.
 * @param yyscanner The scanner object.
 */
int hsql_get_lineno  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    
        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yylineno;
}

/** Get the current column number.
 * @param yyscanner The scanner object.
 */
int hsql_get_column  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    
        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yycolumn;
}

/** Get the input stream.
 * @param yyscanner The scanner object.
 */
FILE *hsql_get_in  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyin;
}

/** Get the output stream.
 * @param yyscanner The scanner object.
 */
FILE *hsql_get_out  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyout;
}

/** Get the length of the current token.
 * @param yyscanner The scanner object.
 */
int hsql_get_leng  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyleng;
}

/** Get the current token.
 * @param yyscanner The scanner object.
 */

char *hsql_get_text  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yytext;
}

/** Set the user-defined data. This data is never touched by the scanner.
 * @param user_defined The data to be associated with this scanner.
 * @param yyscanner The scanner object.
 */
void hsql_set_extra (YY_EXTRA_TYPE  user_defined , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyextra = user_defined ;
}

/** Set the current line number.
 * @param line_number
 * @param yyscanner The scanner object.
 */
void hsql_set_lineno (int  line_number , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* lineno is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           yy_fatal_error( "hsql_set_lineno called with no buffer" , yyscanner); 
    
    yylineno = line_number;
}

/** Set the current column.
 * @param line_number
 * @param yyscanner The scanner object.
 */
void hsql_set_column (int  column_no , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* column is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           yy_fatal_error( "hsql_set_column called with no buffer" , yyscanner); 
    
    yycolumn = column_no;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * @param yyscanner The scanner object.
 * @see hsql__switch_to_buffer
 */
void hsql_set_in (FILE *  in_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyin = in_str ;
}

void hsql_set_out (FILE *  out_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyout = out_str ;
}

int hsql_get_debug  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yy_flex_debug;
}

void hsql_set_debug (int  bdebug , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yy_flex_debug = bdebug ;
}

/* Accessor methods for yylval and yylloc */

YYSTYPE * hsql_get_lval  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yylval;
}

void hsql_set_lval (YYSTYPE *  yylval_param , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yylval = yylval_param;
}

YYLTYPE *hsql_get_lloc  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yylloc;
}
    
void hsql_set_lloc (YYLTYPE *  yylloc_param , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yylloc = yylloc_param;
}
    
/* User-visible API */

/* hsql_lex_init is special because it creates the scanner itself, so it is
 * the ONLY reentrant function that doesn't take the scanner as the last argument.
 * That's why we explicitly handle the declaration, instead of using our macros.
 */

int hsql_lex_init(yyscan_t* ptr_yy_globals)

{
    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) hsql_alloc ( sizeof( struct yyguts_t ), NULL );

    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));

    return yy_init_globals ( *ptr_yy_globals );
}

/* hsql_lex_init_extra has the same functionality as hsql_lex_init, but follows the
 * convention of taking the scanner as the last argument. Note however, that
 * this is a *pointer* to a scanner, as it will be allocated by this call (and
 * is the reason, too, why this function also must handle its own declaration).
 * The user defined value in the first argument will be available to hsql_alloc in
 * the yyextra field.
 */

int hsql_lex_init_extra(YY_EXTRA_TYPE yy_user_defined,yyscan_t* ptr_yy_globals )

{
    struct yyguts_t dummy_yyguts;

    hsql_set_extra (yy_user_defined, &dummy_yyguts);

    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }
	
    *ptr_yy_globals = (yyscan_t) hsql_alloc ( sizeof( struct yyguts_t ), &dummy_yyguts );
	
    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }
    
    /* By setting to 0xAA, we expose bugs in
    yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));
    
    hsql_set_extra (yy_user_defined, *ptr_yy_globals);
    
    return yy_init_globals ( *ptr_yy_globals );
}

static int yy_init_globals (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from hsql_lex_destroy(), so don't allocate here.
     */

    yyg->yy_buffer_stack = 0;
    yyg->yy_buffer_stack_top = 0;
    yyg->yy_buffer_stack_max = 0;
    yyg->yy_c_buf_p = (char *) 0;
    yyg->yy_init = 0;
    yyg->yy_start = 0;

    yyg->yy_start_stack_ptr = 0;
    yyg->yy_start_stack_depth = 0;
    yyg->yy_start_stack =  NULL;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = (FILE *) 0;
    yyout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * hsql_lex_init()
     */
    return 0;
}

/* hsql_lex_destroy is for both reentrant and non-reentrant scanners. */
int hsql_lex_destroy  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		hsql__delete_buffer(YY_CURRENT_BUFFER ,yyscanner );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		hsql_pop_buffer_state(yyscanner);
	}

	/* Destroy the stack itself. */
	hsql_free(yyg->yy_buffer_stack ,yyscanner);
	yyg->yy_buffer_stack = NULL;

    /* Destroy the start condition stack. */
        hsql_free(yyg->yy_start_stack ,yyscanner );
        yyg->yy_start_stack = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * hsql_lex() is called, initialization will occur. */
    yy_init_globals( yyscanner);

    /* Destroy the main struct (reentrant only). */
    hsql_free ( yyscanner , yyscanner );
    yyscanner = NULL;
    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n , yyscan_t yyscanner)
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s , yyscan_t yyscanner)
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *hsql_alloc (yy_size_t  size , yyscan_t yyscanner)
{
	return (void *) malloc( size );
}

void *hsql_realloc  (void * ptr, yy_size_t  size , yyscan_t yyscanner)
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void hsql_free (void * ptr , yyscan_t yyscanner)
{
	free( (char *) ptr );	/* see hsql_realloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 223 "flex_lexer.l"


/***************************
 ** Section 3: User code
 ***************************/

int yyerror(const char *msg) {
    fprintf(stderr, "[SQL-Lexer-Error] %s\n",msg); return 0;
}

