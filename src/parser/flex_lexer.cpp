#line 2 "flex_lexer.cpp"

#line 4 "flex_lexer.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* An opaque pointer. */
#ifndef YY_TYPEDEF_YY_SCANNER_T
#define YY_TYPEDEF_YY_SCANNER_T
typedef void* yyscan_t;
#endif

/* For convenience, these vars (plus the bison vars far below)
   are macros in the reentrant scanner. */
#define yyin yyg->yyin_r
#define yyout yyg->yyout_r
#define yyextra yyg->yyextra_r
#define yyleng yyg->yyleng_r
#define yytext yyg->yytext_r
#define yylineno (YY_CURRENT_BUFFER_LVALUE->yy_bs_lineno)
#define yycolumn (YY_CURRENT_BUFFER_LVALUE->yy_bs_column)
#define yy_flex_debug yyg->yy_flex_debug_r

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yyg->yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yyg->yy_start - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE hsql_restart(yyin ,yyscanner )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = yyg->yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yyg->yy_c_buf_p = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, yyg->yytext_ptr , yyscanner )

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via hsql_restart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( yyg->yy_buffer_stack \
                          ? yyg->yy_buffer_stack[yyg->yy_buffer_stack_top] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE yyg->yy_buffer_stack[yyg->yy_buffer_stack_top]

void hsql_restart (FILE *input_file ,yyscan_t yyscanner );
void hsql__switch_to_buffer (YY_BUFFER_STATE new_buffer ,yyscan_t yyscanner );
YY_BUFFER_STATE hsql__create_buffer (FILE *file,int size ,yyscan_t yyscanner );
void hsql__delete_buffer (YY_BUFFER_STATE b ,yyscan_t yyscanner );
void hsql__flush_buffer (YY_BUFFER_STATE b ,yyscan_t yyscanner );
void hsql_push_buffer_state (YY_BUFFER_STATE new_buffer ,yyscan_t yyscanner );
void hsql_pop_buffer_state (yyscan_t yyscanner );

static void hsql_ensure_buffer_stack (yyscan_t yyscanner );
static void hsql__load_buffer_state (yyscan_t yyscanner );
static void hsql__init_buffer (YY_BUFFER_STATE b,FILE *file ,yyscan_t yyscanner );

#define YY_FLUSH_BUFFER hsql__flush_buffer(YY_CURRENT_BUFFER ,yyscanner)

YY_BUFFER_STATE hsql__scan_buffer (char *base,yy_size_t size ,yyscan_t yyscanner );
YY_BUFFER_STATE hsql__scan_string (yyconst char *yy_str ,yyscan_t yyscanner );
YY_BUFFER_STATE hsql__scan_bytes (yyconst char *bytes,int len ,yyscan_t yyscanner );

void *hsql_alloc (yy_size_t ,yyscan_t yyscanner );
void *hsql_realloc (void *,yy_size_t ,yyscan_t yyscanner );
void hsql_free (void * ,yyscan_t yyscanner );

#define yy_new_buffer hsql__create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        hsql_ensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            hsql__create_buffer(yyin,YY_BUF_SIZE ,yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        hsql_ensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            hsql__create_buffer(yyin,YY_BUF_SIZE ,yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define hsql_wrap(n) 1
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

typedef int yy_state_type;

#define yytext_ptr yytext_r

static yy_state_type yy_get_previous_state (yyscan_t yyscanner );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  ,yyscan_t yyscanner);
static int yy_get_next_buffer (yyscan_t yyscanner );
static void yy_fatal_error (yyconst char msg[] ,yyscan_t yyscanner );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yyg->yytext_ptr = yy_bp; \
	yyleng = (size_t) (yy_cp - yy_bp); \
	yyg->yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yyg->yy_c_buf_p = yy_cp;

#define YY_NUM_RULES 132
#define YY_END_OF_BUFFER 133
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[932] =
    {   0,
        0,    0,    2,    2,  133,  131,    4,    4,  131,  124,
      131,  124,  124,  127,  124,  124,  129,  129,  129,  129,
      129,  129,  129,  129,  129,  129,  129,  129,  129,  129,
      129,  129,  129,  129,  129,  129,  129,  129,  129,    2,
        2,    3,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    4,    0,    0,  130,    1,  126,  125,
      127,  122,  121,  123,  129,  129,  129,  129,  129,  107,
      129,  108,  129,  129,  129,  129,  129,  129,  129,  129,

      129,  129,  129,  129,  129,  129,  129,  129,  129,  129,
      129,  129,  109,  129,  110,  111,  129,  129,  129,  129,
      129,  129,  129,  129,  129,  129,  129,  112,  113,  114,
      129,  129,  129,  129,  129,  129,  129,  129,  129,  129,
      129,  129,  129,  129,  129,  115,  129,  129,  129,  129,
      129,  129,  129,  129,    2,    2,    2,    2,    2,    1,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,

        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,  128,  125,   94,  129,
       95,  129,  129,   96,   97,  129,  129,  129,  129,  129,
      129,  129,  129,  129,   98,  129,  129,  129,  129,  129,
      129,  129,  129,  129,  129,  129,  129,  129,  129,  129,
       99,  129,  129,  129,  129,  129,  129,  129,  129,  129,
      129,  129,  129,  100,  129,  129,  101,  129,  129,  129,
      129,  129,  129,  129,  129,  102,  129,  129,  103,  129,

      129,  129,  129,  129,  129,  129,  129,  129,  129,  129,
      104,  129,  129,  129,  129,  105,  129,  129,  129,  129,
      106,  129,  129,  129,  129,  129,  129,  129,  129,  129,
      129,  129,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,

        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,  129,  129,
      129,  129,  129,   72,  129,  120,  129,  129,  129,  129,
      129,   73,  129,  129,  129,  129,   74,  129,  129,  129,
       75,  129,  129,  129,  129,  129,   76,   77,   78,  129,
      129,   79,  129,   80,  129,  129,  129,  129,  129,  129,
       81,  129,   82,   83,   84,  129,   85,  129,  129,  129,
      129,   86,  129,  129,  129,  129,  129,   87,   88,  129,
      129,  129,  129,  129,  129,  129,   89,  129,  129,  129,

      129,   90,   91,  129,  129,  129,  129,  129,  129,  129,
      129,  129,   92,  129,  129,   93,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,

        2,    2,    2,    2,   54,   55,  129,  129,  129,  129,
      129,  129,  129,   56,  129,  129,  129,  129,   57,  129,
      129,  129,  129,  129,  129,  129,  129,  129,   58,  129,
      129,  129,   59,   60,  129,  129,  129,  129,   61,   62,
       63,   64,  129,  129,  129,   65,   66,  129,  129,  129,
      129,  129,   67,  129,  129,  129,  129,   68,  129,  129,
      129,  129,   69,  129,  129,  129,   70,  129,  129,  129,
       71,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,

        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,  129,   30,
      129,  129,   31,  129,   32,  129,  129,  129,   33,   34,
      129,   35,   36,   37,  129,   38,  129,   39,   40,  129,
       41,   42,  129,  129,   43,  129,  129,   44,  129,  129,
      129,   45,  129,   46,   47,   48,  129,   49,  129,  129,
      129,  129,   50,   51,   52,   53,  129,  129,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,

        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,   14,   15,
       16,   17,   18,  129,  129,   19,  129,   20,   21,   22,
       23,  129,   24,  129,  129,   25,   26,  129,   27,   28,
      129,  129,  119,  129,  118,   29,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,  116,  129,   10,  129,   11,  129,

       12,  129,  129,   13,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,  117,  129,    7,  129,    8,    9,
        2,    2,    2,    2,    2,    2,    5,    6,    2,    2,
        0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    1,    4,    1,    1,    5,    1,    6,    5,
        5,    5,    5,    5,    7,    8,    5,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    5,    5,   10,
       11,   12,    5,    1,   13,   14,   15,   16,   17,   18,
       19,   20,   21,   22,   23,   24,   25,   26,   27,   28,
       29,   30,   31,   32,   33,   34,   35,   36,   37,   38,
        1,    1,    1,    5,   39,    1,   40,   41,   42,   43,

       44,   45,   46,   47,   48,   49,   50,   51,   52,   53,
       54,   55,   56,   57,   58,   59,   60,   61,   62,   63,
       64,   65,    5,    1,    5,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[66] =
    {   0,
        1,    1,    2,    3,    1,    1,    1,    1,    4,    1,
        1,    1,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4
    } ;

static yyconst flex_int16_t yy_base[939] =
    {   0,
        0,    0,   65,    0,  388, 3752,  129,  131,    0, 3752,
      362,  347,  341,  127,  126,  338,  123,  123,  175,  221,
      112,  123,  121,  142,  166,  115,  129,  172,  177,  210,
      223,  215,    0,  183,  269,  312,  232,  233,  138,    0,
      159,  162,  344,    0,  337,  305,  298,  199,  198,  291,
      369,  427,  479,  531,  257,  579,  366,  297,  627,  345,
      291,  419,  404,  679,  727,  779,  314,  433,  829,  881,
      929,  438,  467,  210,  287,  256, 3752, 3752,  250,  248,
      227, 3752, 3752, 3752,    0,  136,  171,  268,  266,  225,
      285,    0,  333,  264,  312,  278,  306,  327,  477,  385,

      359,  370,  403,  525,  402,  417,  422,  434,  435,  439,
      469,  481,    0,  466,  531,  472,  484,  481,  506,  531,
      551,  508,  523,  518,  523,  535,  547,  552,    0,  556,
      546,  562,  581,  581,  577,  582,  584,  583,  583,  581,
      600,  600,  596,  621,  623,  596,  599,  639,  634,  633,
      631,  653,  645,  634,    0,  296,  248,  241,    0,    0,
      208,  205,  338,    0,    0,    0,  657,  683,  692,  717,
      715,  733,  756,  661,  781,  698,  787,  810,  816,  853,
      981,  777,  845,  842,  886, 1031,  883,  907,  899,  924,
      915,  953,  969,  978,  746,  937, 1080,  997, 1003,  811,

     1020, 1037, 1063, 1026, 1065,  855, 1076, 1097, 1109, 1113,
      991, 1055, 1115, 1125, 1143, 1147, 1155, 1159, 1173, 1177,
     1185, 1201, 1213, 1210, 1218, 1223, 1246, 1251, 1247, 1268,
     1277, 1280, 1301, 1292, 1099, 1310, 3752,  192,    0,  651,
        0,  686,  771,    0,    0,  772,  767,  837,  889,  883,
      916,  924,  945,  931,    0, 1313,  978, 1045, 1264, 1062,
     1071, 1078, 1156, 1143, 1175, 1189, 1201, 1194, 1210, 1229,
        0, 1251, 1289, 1319, 1301, 1315, 1316, 1307, 1311, 1319,
     1331, 1333, 1334, 1354, 1322, 1333,    0, 1331, 1350, 1347,
     1356, 1363, 1360, 1347, 1350,    0, 1360, 1355, 1356, 1371,

     1372, 1387, 1365, 1365, 1371, 1384, 1369, 1382, 1387, 1388,
        0, 1374, 1381, 1385, 1397,    0, 1394, 1393, 1409, 1393,
        0, 1407, 1408, 1407, 1425, 1413, 1408, 1427, 1408, 1413,
     1417, 1430,    0,  187, 1434, 1438, 1439, 1442, 1456, 1450,
     1464, 1468, 1474, 1473, 1498, 1504, 1506, 1512, 1514, 1516,
     1482, 1542, 1540, 1550, 1556, 1566, 1508, 1575, 1581, 1596,
     1592, 1552, 1584, 1600, 1618, 1606, 1610, 1624, 1629, 1658,
     1646, 1661, 1670, 1660, 1679, 1700, 1684, 1692, 1695, 1703,
     1698, 1724, 1709, 1728, 1732, 1734, 1758, 1753, 1762, 1767,
     1772, 1766, 1796, 1777, 1798, 1801, 1802, 1811, 1827, 1835,

     1832, 1837, 1841, 1866, 1850, 1851, 1865, 1881, 1875, 1889,
     1880, 1891, 1910, 1905, 1915, 1919, 1923, 1924, 1949, 1945,
     1958, 1964, 1963, 1977, 1989, 1993, 1974, 1995, 1459, 1545,
     1574, 1627, 1642,    0, 1654,    0, 1760, 1863, 1914, 1926,
     1944,    0, 1946, 1983, 1988, 2016,    0, 2019, 2014, 2012,
        0, 2012, 2016, 2012, 2014, 2035,    0,    0,    0, 2036,
     2022,    0, 2028,    0, 2028, 2028, 2024, 2034, 2035, 2049,
        0, 2042,    0,    0,    0, 2037,    0, 2046, 2057, 2047,
     2050,    0, 2068, 2067, 2056, 2058, 2064,    0,    0, 2077,
     2081, 2073, 2069, 2068, 2077, 2088,    0, 2087, 2087, 2092,

     2085,    0, 2083, 2097, 2104, 2094, 2089, 2110, 2092, 2109,
     2115, 2113,    0, 2101, 2120,    0, 2126, 2135, 2125, 2136,
     2131, 2137, 2154, 2140, 2171, 2180, 2170, 2188, 2189, 2194,
     2203, 2222, 2204, 2232, 2233, 2247, 2244, 2256, 2234, 2257,
     2262, 2285, 2287, 2296, 2266, 2288, 2297, 2310, 2311, 2298,
     2327, 2321, 2340, 2326, 2342, 2351, 2352, 2380, 2356, 2390,
     2375, 2381, 2384, 2406, 2385, 2416, 2414, 2415, 2425, 2419,
     2449, 2440, 2444, 2455, 2470, 2459, 2473, 2481, 2489, 2499,
     2498, 2515, 2513, 2524, 2523, 2527, 2552, 2539, 2553, 2541,
     2555, 2577, 2567, 2589, 2585, 2595, 2606, 2611, 2603, 2607,

     2619, 2629, 2635, 2641,    0,    0, 2120, 2165, 2169, 2200,
     2234, 2349, 2483,    0, 2535, 2527, 2586, 2617,    0, 2628,
     2638, 2651, 2652, 2642, 2644, 2646, 2659, 2657,    0, 2663,
     2654, 2654,    0,    0, 2656, 2673, 2661, 2670,    0,    0,
        0,    0, 2684, 2678, 2668,    0,    0, 2685, 2676, 2680,
     2695, 2693,    0, 2703, 2686, 2704, 2709, 2692, 2696, 2696,
     2704, 2718,    0, 2715, 2718, 2718,    0, 2705, 2725, 2727,
        0, 2727, 2729, 2731, 2735, 2737, 2760, 2761, 2763, 2765,
     2769, 2771, 2793, 2795, 2799, 2801, 2817, 2814, 2804, 2825,
     2838, 2847, 2843, 2856, 2866, 2855, 2877, 2868, 2892, 2871,

     2896, 2905, 2901, 2917, 2922, 2926, 2930, 2935, 2940, 2945,
     2951, 2959, 2963, 2975, 2976, 2980, 2984, 2985, 3009, 2988,
     3018, 3019, 3017, 3030, 3028, 3047, 3058, 3059, 3076, 3062,
     3063, 3071, 3081, 3084, 3093, 3092, 3121, 3102, 2739,    0,
     2797, 2809, 2813, 2902,    0, 2897, 2996, 3010,    0,    0,
     3118,    0,    0,    0, 3124,    0, 3116,    0,    0, 3106,
        0,    0, 3114, 3130,    0, 3125, 3137,    0, 3120, 3136,
     3117,    0, 3140, 3128,    0,    0, 3138,    0, 3150, 3151,
     3135, 3140,    0,    0,    0,    0, 3143, 3151, 3161, 3166,
     3167, 3170, 3175, 3171, 3179, 3201, 3209, 3204, 3200, 3210,

     3225, 3212, 3233, 3235, 3238, 3241, 3254, 3244, 3249, 3266,
     3267, 3275, 3279, 3277, 3278, 3300, 3312, 3283, 3316, 3317,
     3318, 3321, 3342, 3346, 3329, 3350, 3354, 3351, 3379, 3384,
     3385, 3394, 3383, 3395, 3396, 3408, 3420, 3417,    0,    0,
        0,    0,    0, 3184, 3247,    0, 3269,    0,    0,    0,
        0, 3330,    0, 3373, 3391,    0,    0, 3377,    0,    0,
     3412, 3421,    0, 3434,    0,    0, 3438, 3439, 3448, 3449,
     3450, 3453, 3478, 3462, 3472, 3463, 3484, 3488, 3493, 3518,
     3502, 3517, 3506, 3507, 3512, 3521, 3542, 3546, 3547, 3550,
     3551, 3552, 3555, 3556, 3440, 3546,    0, 3565,    0, 3568,

        0, 3564, 3575,    0, 3590, 3600, 3592, 3601, 3605, 3609,
     3606, 3614, 3624, 3618,    0, 3596,    0, 3616,    0,    0,
     3640, 3646, 3650, 3654, 3655, 3658,    0,    0, 3659, 3663,
     3752, 3727, 3731,  153, 3735, 3739, 3743, 3747
    } ;

static yyconst flex_int16_t yy_def[939] =
    {   0,
      931,    1,  931,    3,  931,  931,  931,  931,  932,  931,
      933,  931,  931,  931,  931,  931,  934,  934,  934,  934,
      934,  934,  934,  934,  934,  934,  934,  934,  934,  934,
      934,  934,  934,  934,  934,  934,  934,  934,  934,  935,
      935,  931,  936,  935,  937,  935,  935,  935,  935,  935,
      938,  938,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,  931,  932,  933,  931,  931,  931,  931,
      931,  931,  931,  931,  934,  934,  934,  934,  934,  934,
      934,  934,  934,  934,  934,  934,  934,  934,  934,  934,

      934,  934,  934,  934,  934,  934,  934,  934,  934,  934,
      934,  934,  934,  934,  934,  934,  934,  934,  934,  934,
      934,  934,  934,  934,  934,  934,  934,  934,  934,  934,
      934,  934,  934,  934,  934,  934,  934,  934,  934,  934,
      934,  934,  934,  934,  934,  934,  934,  934,  934,  934,
      934,  934,  934,  934,  935,  935,  936,  937,  935,  935,
      935,  935,  935,  935,  935,  935,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,

       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,  931,  931,  934,  934,
      934,  934,  934,  934,  934,  934,  934,  934,  934,  934,
      934,  934,  934,  934,  934,  934,  934,  934,  934,  934,
      934,  934,  934,  934,  934,  934,  934,  934,  934,  934,
      934,  934,  934,  934,  934,  934,  934,  934,  934,  934,
      934,  934,  934,  934,  934,  934,  934,  934,  934,  934,
      934,  934,  934,  934,  934,  934,  934,  934,  934,  934,

      934,  934,  934,  934,  934,  934,  934,  934,  934,  934,
      934,  934,  934,  934,  934,  934,  934,  934,  934,  934,
      934,  934,  934,  934,  934,  934,  934,  934,  934,  934,
      934,  934,  935,  935,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,

       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,  934,  934,
      934,  934,  934,  934,  934,  934,  934,  934,  934,  934,
      934,  934,  934,  934,  934,  934,  934,  934,  934,  934,
      934,  934,  934,  934,  934,  934,  934,  934,  934,  934,
      934,  934,  934,  934,  934,  934,  934,  934,  934,  934,
      934,  934,  934,  934,  934,  934,  934,  934,  934,  934,
      934,  934,  934,  934,  934,  934,  934,  934,  934,  934,
      934,  934,  934,  934,  934,  934,  934,  934,  934,  934,

      934,  934,  934,  934,  934,  934,  934,  934,  934,  934,
      934,  934,  934,  934,  934,  934,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,

       52,   52,   52,   52,  934,  934,  934,  934,  934,  934,
      934,  934,  934,  934,  934,  934,  934,  934,  934,  934,
      934,  934,  934,  934,  934,  934,  934,  934,  934,  934,
      934,  934,  934,  934,  934,  934,  934,  934,  934,  934,
      934,  934,  934,  934,  934,  934,  934,  934,  934,  934,
      934,  934,  934,  934,  934,  934,  934,  934,  934,  934,
      934,  934,  934,  934,  934,  934,  934,  934,  934,  934,
      934,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,

       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,  934,  934,
      934,  934,  934,  934,  934,  934,  934,  934,  934,  934,
      934,  934,  934,  934,  934,  934,  934,  934,  934,  934,
      934,  934,  934,  934,  934,  934,  934,  934,  934,  934,
      934,  934,  934,  934,  934,  934,  934,  934,  934,  934,
      934,  934,  934,  934,  934,  934,  934,  934,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,

       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,  934,  934,
      934,  934,  934,  934,  934,  934,  934,  934,  934,  934,
      934,  934,  934,  934,  934,  934,  934,  934,  934,  934,
      934,  934,  934,  934,  934,  934,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,  934,  934,  934,  934,  934,  934,

      934,  934,  934,  934,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,  934,  934,  934,  934,  934,  934,
       52,   52,   52,   52,   52,   52,  934,  934,   52,   52,
        0,  931,  931,  931,  931,  931,  931,  931
    } ;

static yyconst flex_int16_t yy_nxt[3818] =
    {   0,
        6,    7,    8,    9,   10,   11,   12,   13,   14,   15,
       10,   16,   17,   18,   19,   20,   21,   22,   23,   24,
       25,   26,   27,   28,   29,   30,   31,   32,   33,   34,
       35,   36,   37,   38,   39,   33,   33,   33,    6,   17,
       18,   19,   20,   21,   22,   23,   24,   25,   26,   27,
       28,   29,   30,   31,   32,   33,   34,   35,   36,   37,
       38,   39,   33,   33,   33,   40,   41,   42,   43,   44,
       45,   46,   47,   48,   49,   44,   50,   51,   52,   53,
       54,   55,   56,   57,   58,   59,   60,   61,   62,   63,
       64,   65,   66,   67,   68,   69,   70,   71,   72,   73,

       67,   67,   67,   40,   51,   52,   53,   54,   55,   56,
       57,   58,   59,   60,   61,   62,   63,   64,   65,   66,
       67,   68,   69,   70,   71,   72,   73,   67,   67,   67,
       74,   74,   74,   74,   80,   81,   82,   83,   86,   91,
       87,  117,  103,  105,  109,  118,   88,  104,   89,  106,
      110,  239,  107,   90,  111,  108,   85,  153,  154,   92,
      156,   74,  112,   74,   74,   86,   91,   87,  117,  103,
      105,  109,  118,   88,  104,   89,  106,  110,  239,  107,
       90,  111,  108,  113,  153,  154,   92,   93,  119,  112,
      114,  115,  120,  122,   94,  334,  116,  123,  121,  135,

      238,   95,  240,  136,   96,   97,  162,  163,  164,  165,
      113,   74,   74,  334,   93,  119,  161,  114,  115,  120,
      122,   94,  124,  116,  123,  121,  135,  132,   95,  240,
      136,   96,   97,   98,   80,   81,  125,   99,  133,  245,
      128,  100,  126,  127,  134,  151,  159,  101,  129,  124,
      102,  333,  130,  152,  132,  131,  238,  148,   79,  149,
       98,   77,  150,  125,   99,  133,  245,  128,  100,  126,
      127,  134,  151,  167,  101,  129,  250,  102,  243,  130,
      152,  244,  131,  137,  148,  138,  149,  185,  139,  150,
      237,  241,  186,  167,  253,  140,  141,  156,   74,  242,

      167,  166,  246,  250,  254,  243,  161,  200,  244,  193,
      137,  160,  138,  167,  185,  139,  247,  194,  241,  186,
      167,  253,  140,  141,  142,  143,  242,  167,  144,  246,
      167,  254,  145,  167,  200,  251,  193,  252,  146,  255,
      167,  147,  159,  247,  194,  162,  163,  155,   84,   79,
      167,  142,  143,   78,  167,  144,  248,  167,  256,  145,
      167,  167,  251,  249,  252,  146,  255,   77,  147,  155,
      155,  199,  155,  155,  155,  155,  155,  167,  155,  155,
      155,  167,  167,  248,  168,  256,  169,  931,  167,  191,
      249,  263,  170,  931,  171,  192,  264,  931,  199,  172,

      931,  931,  167,  931,  931,  931,  931,  931,  167,  167,
      931,  168,  931,  169,  261,  262,  191,  265,  263,  170,
      204,  171,  192,  264,  205,  270,  172,  155,  155,  167,
      155,  155,  155,  155,  155,  201,  155,  155,  155,  202,
      167,  261,  262,  173,  265,  203,  271,  204,  272,  217,
      233,  205,  270,  218,  167,  167,  931,  273,  234,  931,
      931,  274,  201,  174,  931,  275,  202,  167,  931,  167,
      173,  931,  203,  271,  167,  272,  217,  233,  931,  931,
      218,  167,  167,  167,  273,  234,  235,  236,  274,  257,
      174,  175,  275,  280,  258,  167,  167,  285,  176,  276,

      259,  167,  277,  167,  286,  177,  278,  260,  178,  179,
      167,  279,  931,  235,  236,  167,  257,  287,  175,  931,
      280,  258,  167,  288,  285,  176,  276,  259,  931,  277,
      167,  286,  177,  278,  260,  178,  179,  293,  279,  266,
      931,  267,  167,  180,  287,  268,  281,  181,  294,  295,
      288,  182,  269,  289,  296,  290,  282,  183,  297,  298,
      184,  283,  284,  291,  293,  292,  266,  167,  267,  299,
      180,  300,  268,  281,  181,  294,  295,  301,  182,  269,
      289,  296,  290,  282,  183,  297,  298,  184,  283,  284,
      291,  302,  292,  303,  167,  167,  299,  304,  300,  187,

      308,  305,  306,  309,  301,  188,  310,  307,  189,  312,
      313,  190,  314,  315,  311,  167,  931,  931,  302,  316,
      303,  931,  167,  321,  304,  931,  187,  308,  305,  306,
      309,  322,  188,  310,  307,  189,  312,  313,  190,  314,
      315,  311,  167,  167,  195,  317,  316,  319,  320,  325,
      321,  196,  197,  326,  327,  931,  318,  198,  322,  323,
      328,  331,  324,  167,  931,  332,  931,  429,  931,  329,
      167,  195,  317,  167,  319,  320,  325,  167,  196,  197,
      326,  327,  330,  318,  198,  931,  323,  328,  331,  324,
      167,  206,  332,  167,  429,  167,  329,  167,  335,  167,

      167,  931,  430,  931,  167,  207,  931,  931,  167,  330,
      346,  208,  209,  931,  167,  167,  931,  931,  206,  167,
      167,  931,  167,  336,  167,  335,  167,  339,  167,  430,
      340,  167,  207,  167,  167,  167,  931,  346,  208,  209,
      337,  167,  167,  167,  210,  931,  167,  341,  338,  167,
      336,  167,  211,  167,  339,  167,  212,  340,  167,  213,
      167,  167,  167,  167,  931,  931,  931,  337,  931,  167,
      167,  210,  167,  342,  341,  338,  167,  931,  167,  211,
      167,  931,  167,  212,  931,  931,  213,  343,  931,  167,
      167,  214,  167,  167,  431,  167,  167,  167,  432,  167,

      342,  433,  215,  167,  344,  931,  357,  358,  216,  167,
      347,  345,  348,  167,  343,  167,  931,  167,  214,  167,
      167,  431,  167,  167,  167,  432,  349,  167,  433,  215,
      167,  344,  167,  357,  358,  216,  350,  347,  345,  348,
      167,  931,  167,  219,  167,  220,  167,  383,  221,  351,
      167,  931,  167,  349,  167,  222,  223,  931,  167,  167,
      434,  167,  931,  350,  931,  167,  931,  931,  360,  167,
      219,  167,  220,  167,  383,  221,  351,  359,  167,  167,
      931,  167,  222,  223,  352,  167,  391,  434,  167,  167,
      931,  167,  167,  224,  225,  360,  167,  226,  167,  167,

      361,  227,  167,  435,  359,  167,  366,  228,  167,  931,
      229,  352,  436,  391,  931,  167,  167,  167,  167,  167,
      224,  225,  167,  167,  226,  368,  167,  361,  227,  167,
      435,  167,  931,  366,  228,  167,  367,  229,  931,  436,
      167,  370,  167,  167,  167,  167,  167,  369,  437,  167,
      167,  167,  368,  167,  230,  438,  231,  439,  167,  232,
      167,  440,  167,  367,  376,  167,  931,  167,  370,  167,
      167,  931,  167,  167,  369,  437,  931,  931,  167,  371,
      167,  230,  438,  231,  439,  167,  232,  167,  440,  167,
      931,  376,  167,  353,  167,  931,  167,  167,  354,  372,

      167,  443,  373,  374,  355,  167,  371,  167,  375,  931,
      931,  356,  167,  167,  167,  931,  167,  167,  931,  167,
      353,  167,  381,  382,  167,  354,  372,  167,  443,  373,
      374,  355,  167,  167,  167,  375,  167,  384,  356,  167,
      167,  167,  167,  931,  167,  362,  167,  363,  931,  381,
      382,  364,  931,  167,  167,  389,  167,  444,  365,  385,
      167,  386,  167,  167,  384,  931,  167,  167,  931,  167,
      396,  167,  362,  167,  363,  387,  447,  388,  364,  167,
      167,  167,  389,  167,  444,  365,  385,  448,  386,  167,
      390,  167,  167,  931,  167,  377,  167,  396,  167,  167,

      167,  167,  387,  447,  388,  378,  167,  392,  167,  449,
      379,  380,  167,  167,  448,  427,  167,  390,  167,  167,
      393,  394,  377,  167,  931,  167,  167,  931,  167,  167,
      395,  167,  378,  167,  392,  167,  449,  379,  380,  167,
      167,  167,  427,  167,  931,  167,  397,  393,  394,  167,
      931,  167,  167,  931,  398,  399,  167,  395,  167,  167,
      167,  167,  167,  400,  931,  931,  931,  401,  167,  450,
      451,  167,  167,  397,  931,  167,  167,  404,  167,  167,
      402,  398,  399,  167,  931,  403,  167,  452,  167,  167,
      400,  167,  405,  167,  401,  167,  450,  451,  167,  931,

      406,  167,  167,  931,  404,  453,  167,  402,  407,  167,
      167,  408,  403,  167,  452,  454,  167,  167,  167,  405,
      167,  167,  167,  411,  455,  410,  167,  406,  167,  167,
      409,  931,  453,  456,  167,  407,  167,  167,  408,  167,
      167,  412,  454,  931,  167,  457,  167,  413,  167,  167,
      411,  455,  410,  167,  167,  931,  167,  409,  414,  167,
      456,  167,  167,  167,  167,  931,  167,  167,  412,  931,
      415,  416,  457,  167,  413,  458,  167,  931,  417,  418,
      445,  167,  167,  167,  167,  414,  167,  167,  419,  167,
      167,  420,  421,  167,  167,  446,  167,  415,  416,  931,

      422,  931,  458,  931,  167,  417,  418,  445,  425,  167,
      167,  167,  459,  167,  167,  419,  167,  167,  420,  421,
      167,  426,  446,  167,  423,  441,  167,  422,  167,  442,
      424,  167,  460,  461,  462,  425,  463,  167,  464,  459,
      167,  428,  465,  167,  167,  466,  167,  467,  426,  468,
      469,  423,  441,  167,  472,  167,  442,  424,  473,  460,
      461,  462,  474,  463,  167,  464,  475,  476,  428,  465,
      470,  477,  466,  167,  467,  478,  468,  469,  479,  480,
      471,  472,  481,  482,  483,  473,  484,  485,  486,  474,
      489,  931,  490,  475,  476,  491,  492,  470,  477,  487,

      493,  494,  478,  495,  496,  479,  480,  471,  497,  481,
      482,  483,  498,  484,  485,  486,  499,  489,  488,  490,
      500,  501,  491,  492,  502,  503,  487,  493,  494,  504,
      495,  496,  505,  508,  506,  497,  507,  509,  510,  498,
      511,  512,  513,  499,  514,  488,  515,  500,  501,  516,
      167,  502,  503,  931,  517,  167,  504,  931,  518,  505,
      508,  506,  931,  507,  509,  510,  167,  511,  512,  513,
      167,  514,  167,  515,  167,  167,  516,  167,  167,  519,
      167,  517,  167,  931,  167,  518,  167,  931,  605,  167,
      167,  931,  167,  167,  520,  931,  522,  167,  167,  167,

      167,  167,  167,  931,  167,  167,  519,  167,  521,  167,
      167,  167,  523,  167,  167,  605,  167,  167,  167,  167,
      167,  520,  167,  522,  536,  167,  527,  167,  167,  931,
      167,  167,  167,  524,  167,  521,  167,  167,  525,  523,
      167,  167,  167,  526,  167,  167,  528,  167,  167,  167,
      167,  536,  167,  527,  529,  167,  167,  167,  530,  167,
      524,  167,  532,  531,  931,  525,  167,  167,  541,  167,
      526,  167,  533,  528,  606,  167,  167,  167,  167,  167,
      535,  529,  167,  167,  931,  530,  167,  534,  167,  532,
      531,  167,  167,  167,  538,  541,  931,  167,  542,  533,

      167,  606,  167,  167,  540,  167,  537,  535,  167,  167,
      607,  167,  167,  167,  534,  167,  167,  167,  167,  167,
      167,  538,  545,  539,  167,  542,  167,  167,  167,  167,
      543,  540,  167,  537,  167,  167,  167,  607,  167,  167,
      167,  544,  167,  167,  167,  167,  167,  167,  546,  545,
      539,  931,  547,  167,  167,  167,  608,  543,  609,  167,
      167,  167,  167,  167,  931,  167,  610,  167,  544,  167,
      931,  548,  167,  167,  167,  546,  167,  167,  549,  547,
      550,  167,  167,  608,  931,  609,  167,  167,  931,  167,
      551,  552,  167,  610,  167,  167,  167,  167,  548,  931,

      555,  167,  931,  167,  167,  549,  167,  550,  556,  167,
      553,  557,  931,  167,  167,  167,  167,  551,  552,  558,
      167,  167,  167,  167,  167,  167,  554,  555,  167,  559,
      560,  167,  931,  167,  167,  556,  167,  553,  557,  167,
      167,  167,  167,  167,  167,  167,  558,  167,  563,  561,
      167,  931,  167,  554,  564,  167,  559,  560,  167,  562,
      167,  167,  931,  167,  167,  566,  167,  167,  167,  167,
      167,  167,  167,  565,  167,  563,  561,  167,  167,  931,
      567,  564,  167,  167,  611,  931,  562,  167,  167,  167,
      931,  167,  566,  167,  167,  167,  167,  167,  167,  568,

      565,  167,  167,  167,  569,  167,  571,  567,  167,  167,
      167,  611,  167,  167,  167,  167,  167,  573,  574,  570,
      167,  167,  931,  575,  931,  167,  568,  167,  572,  167,
      167,  569,  167,  571,  167,  167,  931,  167,  167,  167,
      167,  167,  576,  167,  573,  574,  570,  167,  167,  580,
      575,  167,  577,  167,  167,  572,  579,  167,  931,  167,
      931,  167,  578,  167,  167,  167,  583,  584,  167,  576,
      167,  167,  581,  167,  167,  167,  580,  167,  167,  577,
      167,  167,  167,  579,  167,  582,  167,  167,  931,  578,
      167,  167,  612,  583,  584,  167,  167,  167,  167,  581,

      167,  167,  167,  588,  167,  167,  586,  167,  167,  167,
      931,  167,  582,  167,  167,  585,  167,  167,  167,  612,
      587,  167,  931,  167,  167,  167,  167,  167,  167,  167,
      588,  591,  167,  586,  167,  167,  590,  589,  167,  167,
      167,  167,  585,  167,  167,  613,  167,  587,  167,  593,
      931,  167,  167,  167,  167,  592,  614,  615,  591,  167,
      167,  167,  167,  590,  589,  167,  167,  167,  167,  616,
      597,  596,  613,  167,  167,  594,  593,  595,  167,  167,
      167,  167,  592,  614,  615,  167,  167,  167,  167,  598,
      167,  600,  167,  167,  167,  599,  616,  597,  596,  167,

      167,  167,  594,  603,  595,  167,  167,  167,  167,  167,
      167,  167,  167,  167,  604,  617,  598,  167,  600,  618,
      167,  167,  599,  601,  602,  167,  167,  167,  619,  167,
      603,  167,  167,  620,  621,  622,  167,  167,  167,  623,
      167,  604,  617,  624,  625,  626,  618,  627,  628,  629,
      601,  602,  167,  630,  631,  619,  167,  632,  167,  633,
      620,  621,  622,  634,  635,  638,  623,  636,  639,  640,
      624,  625,  626,  641,  627,  628,  629,  642,  637,  643,
      630,  631,  644,  645,  632,  646,  633,  647,  648,  649,
      634,  635,  638,  650,  636,  639,  640,  651,  652,  653,

      641,  654,  655,  656,  642,  637,  643,  657,  658,  644,
      645,  659,  646,  660,  647,  648,  649,  661,  662,  663,
      650,  664,  665,  666,  651,  652,  653,  667,  654,  655,
      656,  668,  669,  670,  657,  658,  671,  931,  659,  931,
      660,  167,  167,  931,  661,  662,  663,  676,  664,  665,
      666,  167,  167,  167,  667,  672,  167,  739,  668,  669,
      670,  674,  167,  671,  673,  675,  677,  167,  167,  167,
      167,  167,  167,  167,  676,  931,  167,  931,  167,  167,
      167,  740,  672,  167,  739,  741,  167,  167,  674,  167,
      167,  673,  675,  677,  167,  678,  167,  167,  167,  167,

      167,  680,  682,  167,  167,  167,  167,  167,  740,  679,
      167,  931,  741,  167,  167,  742,  167,  167,  681,  167,
      167,  931,  678,  167,  167,  167,  683,  931,  680,  682,
      167,  167,  167,  167,  167,  685,  679,  167,  167,  167,
      167,  931,  742,  167,  686,  681,  167,  167,  167,  167,
      167,  167,  167,  683,  684,  931,  931,  167,  167,  743,
      167,  687,  685,  167,  688,  167,  167,  167,  167,  167,
      167,  686,  167,  167,  931,  167,  167,  167,  167,  689,
      167,  684,  167,  167,  690,  167,  743,  167,  687,  691,
      167,  688,  167,  167,  931,  167,  167,  167,  167,  167,

      167,  167,  167,  167,  167,  167,  689,  167,  694,  167,
      167,  690,  167,  167,  167,  931,  691,  692,  693,  167,
      167,  167,  695,  167,  167,  167,  167,  167,  167,  167,
      167,  167,  167,  167,  167,  694,  931,  167,  696,  167,
      167,  167,  167,  167,  692,  693,  167,  167,  167,  695,
      167,  167,  697,  167,  167,  699,  167,  167,  167,  167,
      167,  167,  167,  167,  167,  696,  698,  167,  167,  167,
      167,  931,  167,  167,  167,  744,  167,  700,  167,  697,
      701,  702,  699,  167,  167,  167,  931,  167,  167,  167,
      167,  167,  167,  698,  167,  167,  167,  167,  703,  167,

      167,  167,  744,  167,  700,  167,  167,  701,  702,  704,
      931,  167,  931,  705,  167,  167,  167,  167,  167,  167,
      167,  167,  167,  167,  167,  703,  167,  167,  167,  931,
      708,  167,  167,  167,  931,  167,  704,  706,  167,  707,
      705,  167,  167,  167,  167,  709,  931,  167,  167,  167,
      167,  167,  167,  167,  710,  167,  712,  708,  167,  167,
      167,  167,  167,  711,  706,  167,  707,  931,  167,  167,
      931,  167,  709,  713,  931,  167,  167,  167,  167,  167,
      167,  710,  167,  712,  714,  167,  167,  167,  167,  167,
      711,  167,  167,  716,  715,  167,  931,  167,  167,  745,

      713,  717,  167,  167,  931,  167,  167,  167,  931,  167,
      931,  714,  167,  167,  167,  167,  167,  167,  167,  931,
      716,  715,  167,  718,  167,  167,  745,  719,  717,  167,
      931,  167,  167,  167,  167,  167,  167,  721,  722,  167,
      167,  167,  167,  723,  167,  931,  720,  746,  931,  167,
      718,  167,  167,  747,  719,  725,  167,  167,  167,  167,
      167,  167,  167,  167,  721,  722,  167,  167,  167,  167,
      723,  167,  724,  720,  746,  167,  167,  167,  167,  726,
      747,  729,  725,  167,  167,  727,  167,  167,  167,  167,
      167,  167,  931,  167,  931,  167,  167,  728,  167,  724,

      931,  167,  167,  167,  167,  167,  726,  732,  729,  748,
      167,  167,  727,  167,  730,  167,  167,  731,  167,  735,
      167,  167,  167,  167,  728,  167,  736,  167,  167,  734,
      167,  167,  167,  749,  732,  167,  748,  733,  167,  167,
      167,  730,  167,  167,  731,  167,  735,  167,  167,  167,
      167,  738,  167,  736,  167,  167,  734,  167,  167,  750,
      749,  737,  167,  751,  733,  167,  167,  752,  753,  167,
      167,  167,  167,  754,  167,  755,  756,  167,  738,  757,
      758,  759,  167,  760,  167,  761,  750,  762,  737,  763,
      751,  764,  167,  765,  752,  753,  766,  767,  167,  768,

      754,  769,  755,  756,  167,  770,  757,  758,  759,  771,
      760,  772,  761,  773,  762,  774,  763,  775,  764,  776,
      765,  777,  778,  766,  767,  779,  768,  780,  769,  781,
      782,  783,  770,  784,  785,  786,  771,  787,  772,  788,
      773,  931,  774,  167,  775,  167,  776,  167,  777,  778,
      931,  790,  779,  791,  780,  839,  781,  782,  783,  931,
      784,  785,  786,  167,  787,  167,  788,  167,  789,  931,
      167,  167,  167,  167,  167,  792,  167,  167,  790,  167,
      791,  795,  839,  796,  931,  167,  793,  167,  931,  794,
      167,  931,  167,  931,  167,  789,  167,  167,  167,  167,

      167,  167,  792,  167,  167,  167,  167,  167,  795,  167,
      796,  167,  167,  793,  167,  799,  794,  167,  798,  797,
      802,  931,  840,  167,  167,  841,  167,  931,  167,  167,
      167,  167,  167,  167,  167,  167,  167,  167,  167,  801,
      167,  803,  799,  842,  167,  798,  797,  802,  800,  840,
      167,  931,  841,  167,  167,  931,  167,  167,  167,  167,
      167,  167,  167,  167,  167,  931,  801,  167,  803,  804,
      842,  167,  167,  806,  167,  800,  807,  167,  805,  167,
      167,  167,  167,  167,  167,  931,  167,  167,  167,  808,
      167,  167,  167,  167,  931,  809,  804,  810,  167,  167,

      806,  167,  167,  807,  167,  805,  167,  167,  167,  167,
      167,  167,  167,  167,  167,  931,  808,  813,  167,  167,
      167,  167,  809,  811,  810,  843,  931,  844,  167,  167,
      931,  167,  167,  167,  167,  167,  812,  167,  167,  167,
      167,  167,  167,  931,  813,  815,  167,  814,  167,  931,
      811,  167,  843,  167,  844,  167,  167,  816,  167,  167,
      167,  167,  167,  812,  167,  167,  167,  167,  167,  167,
      817,  167,  815,  167,  814,  167,  167,  931,  167,  167,
      167,  167,  931,  167,  816,  167,  931,  167,  167,  167,
      818,  167,  819,  167,  167,  167,  167,  817,  167,  167,

      167,  822,  167,  167,  167,  931,  167,  931,  167,  820,
      845,  167,  167,  821,  167,  931,  167,  818,  167,  819,
      167,  167,  167,  167,  167,  167,  167,  167,  822,  823,
      824,  167,  826,  167,  167,  167,  820,  845,  167,  167,
      821,  846,  827,  167,  167,  167,  167,  167,  167,  931,
      825,  167,  167,  167,  167,  167,  823,  824,  828,  826,
      167,  167,  167,  167,  167,  931,  167,  931,  846,  827,
      931,  167,  167,  167,  167,  167,  829,  825,  167,  833,
      167,  167,  167,  167,  831,  828,  834,  167,  832,  830,
      167,  167,  167,  167,  167,  167,  931,  835,  167,  167,

      167,  167,  167,  829,  837,  167,  833,  167,  167,  167,
      167,  831,  167,  834,  167,  832,  830,  167,  167,  167,
      167,  167,  167,  836,  835,  167,  167,  167,  167,  167,
      931,  837,  847,  838,  167,  167,  167,  167,  167,  167,
      848,  849,  850,  851,  167,  167,  852,  167,  853,  854,
      836,  855,  856,  857,  858,  167,  167,  167,  859,  847,
      838,  860,  861,  862,  167,  167,  863,  848,  849,  850,
      851,  864,  865,  852,  866,  853,  854,  867,  855,  856,
      857,  858,  167,  167,  167,  859,  869,  167,  860,  861,
      862,  167,  868,  863,  871,  167,  931,  167,  864,  865,

      895,  866,  167,  167,  867,  870,  167,  167,  931,  167,
      167,  167,  931,  869,  167,  167,  167,  167,  167,  868,
      167,  871,  167,  873,  167,  167,  167,  895,  167,  167,
      167,  872,  870,  167,  167,  874,  167,  167,  167,  875,
      167,  167,  167,  167,  167,  167,  167,  167,  167,  167,
      873,  167,  167,  167,  876,  167,  931,  167,  872,  896,
      167,  167,  874,  167,  167,  167,  875,  167,  167,  167,
      167,  167,  167,  167,  167,  167,  167,  167,  167,  877,
      167,  876,  167,  167,  167,  167,  896,  167,  167,  931,
      167,  167,  167,  880,  167,  167,  167,  167,  167,  167,

      897,  167,  878,  167,  167,  931,  877,  167,  879,  167,
      167,  167,  167,  167,  167,  167,  167,  167,  167,  167,
      880,  167,  167,  881,  882,  931,  167,  897,  167,  878,
      167,  931,  167,  884,  167,  879,  167,  167,  167,  931,
      167,  167,  167,  167,  898,  167,  167,  883,  167,  931,
      881,  882,  167,  167,  885,  167,  886,  167,  167,  167,
      884,  167,  167,  167,  167,  167,  167,  167,  931,  931,
      167,  898,  167,  931,  883,  167,  887,  888,  167,  167,
      167,  885,  167,  886,  167,  167,  167,  167,  931,  167,
      167,  889,  167,  167,  167,  167,  890,  167,  931,  167,

      167,  167,  899,  887,  888,  167,  931,  900,  901,  167,
      167,  167,  167,  167,  167,  167,  891,  167,  889,  167,
      167,  167,  167,  890,  167,  892,  167,  167,  167,  899,
      167,  167,  167,  167,  900,  901,  167,  167,  167,  167,
      894,  902,  167,  891,  167,  903,  167,  167,  167,  893,
      904,  167,  892,  167,  167,  167,  167,  167,  167,  167,
      167,  931,  931,  167,  167,  167,  167,  894,  902,  905,
      915,  167,  903,  931,  167,  167,  893,  904,  167,  167,
      167,  167,  167,  167,  167,  167,  167,  931,  167,  167,
      906,  167,  167,  167,  167,  931,  905,  915,  167,  167,

      167,  167,  167,  907,  167,  167,  167,  931,  167,  167,
      931,  167,  167,  167,  167,  167,  167,  906,  167,  931,
      167,  167,  910,  167,  167,  167,  167,  167,  167,  167,
      907,  167,  908,  167,  167,  167,  167,  167,  167,  931,
      931,  167,  167,  167,  931,  167,  909,  167,  167,  910,
      167,  167,  911,  167,  167,  167,  167,  167,  167,  908,
      167,  167,  167,  167,  167,  167,  167,  167,  914,  167,
      167,  167,  167,  909,  913,  167,  912,  916,  167,  911,
      167,  167,  167,  167,  167,  167,  167,  167,  167,  167,
      167,  167,  167,  167,  167,  914,  917,  918,  167,  167,

      919,  913,  920,  912,  916,  167,  167,  931,  167,  167,
      167,  931,  927,  167,  167,  167,  167,  167,  167,  167,
      921,  167,  167,  917,  918,  167,  167,  919,  167,  920,
      167,  922,  923,  167,  167,  167,  167,  167,  924,  927,
      167,  167,  167,  167,  167,  167,  928,  921,  167,  167,
      925,  926,  167,  167,  167,  167,  167,  167,  922,  923,
      167,  167,  929,  167,  167,  924,  167,  167,  167,  167,
      167,  167,  167,  928,  167,  167,  167,  925,  926,  167,
      931,  167,  167,  167,  930,  931,  167,  167,  931,  929,
      167,  167,  931,  167,  167,  167,  931,  167,  167,  167,

      931,  167,  167,  167,  931,  931,  167,  931,  931,  167,
      931,  930,  931,  167,  931,  931,  931,  167,  167,  931,
      931,  167,  167,  931,  931,  931,  167,   75,  931,  931,
       75,   76,  931,   76,   76,  155,  931,  155,  155,  157,
      931,  157,  157,  158,  931,  158,  158,  167,  931,  167,
      167,    5,  931,  931,  931,  931,  931,  931,  931,  931,
      931,  931,  931,  931,  931,  931,  931,  931,  931,  931,
      931,  931,  931,  931,  931,  931,  931,  931,  931,  931,
      931,  931,  931,  931,  931,  931,  931,  931,  931,  931,
      931,  931,  931,  931,  931,  931,  931,  931,  931,  931,

      931,  931,  931,  931,  931,  931,  931,  931,  931,  931,
      931,  931,  931,  931,  931,  931,  931
    } ;

static yyconst flex_int16_t yy_chk[3818] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,

        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        7,    7,    8,    8,   14,   14,   15,   15,   17,   18,
       17,   26,   21,   22,   23,   27,   17,   21,   17,   22,
       23,   86,   22,   17,   24,   22,  934,   39,   39,   18,
       41,   41,   24,   42,   42,   17,   18,   17,   26,   21,
       22,   23,   27,   17,   21,   17,   22,   23,   86,   22,
       17,   24,   22,   25,   39,   39,   18,   19,   28,   24,
       25,   25,   28,   29,   19,  334,   25,   29,   28,   34,

      238,   19,   87,   34,   19,   19,   48,   48,   49,   49,
       25,   74,   74,  162,   19,   28,  161,   25,   25,   28,
       29,   19,   30,   25,   29,   28,   34,   32,   19,   87,
       34,   19,   19,   20,   81,   81,   30,   20,   32,   90,
       31,   20,   30,   30,   32,   38,  158,   20,   31,   30,
       20,  157,   31,   38,   32,   31,   80,   37,   79,   37,
       20,   76,   37,   30,   20,   32,   90,   31,   20,   30,
       30,   32,   38,   55,   20,   31,   94,   20,   89,   31,
       38,   89,   31,   35,   37,   35,   37,   55,   35,   37,
       75,   88,   55,   55,   96,   35,   35,  156,  156,   88,

       55,   50,   91,   94,   96,   89,   47,   61,   89,   58,
       35,   46,   35,   58,   55,   35,   91,   58,   88,   55,
       55,   96,   35,   35,   36,   36,   88,   61,   36,   91,
       67,   96,   36,   58,   61,   95,   58,   95,   36,   97,
       58,   36,   45,   91,   58,  163,  163,   43,   16,   13,
       67,   36,   36,   12,   61,   36,   93,   67,   98,   36,
       58,   60,   95,   93,   95,   36,   97,   11,   36,   51,
       51,   60,   51,   51,   51,   51,   51,   67,   51,   51,
       51,   60,   57,   93,   51,   98,   51,    5,   60,   57,
       93,  101,   51,    0,   51,   57,  102,    0,   60,   51,

        0,    0,   57,    0,    0,    0,    0,    0,   60,   57,
        0,   51,    0,   51,  100,  100,   57,  103,  101,   51,
       63,   51,   57,  102,   63,  105,   51,   52,   52,   57,
       52,   52,   52,   52,   52,   62,   52,   52,   52,   62,
       63,  100,  100,   52,  103,   62,  106,   63,  107,   68,
       72,   63,  105,   68,   72,   62,    0,  108,   72,    0,
        0,  109,   62,   52,    0,  110,   62,   63,    0,   68,
       52,    0,   62,  106,   72,  107,   68,   72,    0,    0,
       68,   72,   62,   73,  108,   72,   73,   73,  109,   99,
       52,   53,  110,  114,   99,   53,   68,  116,   53,  111,

       99,   72,  111,   73,  117,   53,  112,   99,   53,   53,
       73,  112,    0,   73,   73,   53,   99,  118,   53,    0,
      114,   99,   53,  119,  116,   53,  111,   99,    0,  111,
       73,  117,   53,  112,   99,   53,   53,  122,  112,  104,
        0,  104,   53,   54,  118,  104,  115,   54,  123,  124,
      119,   54,  104,  120,  125,  120,  115,   54,  126,  127,
       54,  115,  115,  121,  122,  121,  104,   54,  104,  128,
       54,  130,  104,  115,   54,  123,  124,  131,   54,  104,
      120,  125,  120,  115,   54,  126,  127,   54,  115,  115,
      121,  132,  121,  133,   54,   56,  128,  134,  130,   56,

      136,  134,  135,  137,  131,   56,  138,  135,   56,  139,
      140,   56,  141,  142,  138,   56,    0,    0,  132,  143,
      133,    0,   56,  146,  134,    0,   56,  136,  134,  135,
      137,  147,   56,  138,  135,   56,  139,  140,   56,  141,
      142,  138,   56,   59,   59,  144,  143,  145,  145,  149,
      146,   59,   59,  150,  151,    0,  144,   59,  147,  148,
      151,  153,  148,   59,    0,  154,    0,  240,    0,  152,
       59,   59,  144,  167,  145,  145,  149,  174,   59,   59,
      150,  151,  152,  144,   59,    0,  148,  151,  153,  148,
       59,   64,  154,  167,  240,   64,  152,  174,  168,  168,

      167,    0,  242,    0,  174,   64,    0,    0,  169,  152,
      176,   64,   64,    0,  176,   64,    0,    0,   64,  168,
      167,    0,   64,  169,  174,  168,  168,  171,  169,  242,
      171,  171,   64,  170,  176,  169,    0,  176,   64,   64,
      170,  176,   64,   65,   65,    0,  168,  172,  170,  172,
      169,  171,   65,  170,  171,  169,   65,  171,  171,   65,
      170,  176,  195,   65,    0,    0,    0,  170,    0,  172,
       65,   65,  173,  173,  172,  170,  172,    0,  171,   65,
      170,    0,  195,   65,    0,    0,   65,  173,    0,  195,
       65,   66,  173,  182,  243,   66,  172,  175,  246,  173,

      173,  247,   66,  177,  175,    0,  182,  182,   66,  195,
      177,  175,  177,  182,  173,   66,    0,  175,   66,  173,
      182,  243,   66,  177,  175,  246,  178,  200,  247,   66,
      177,  175,  179,  182,  182,   66,  178,  177,  175,  177,
      182,    0,   66,   69,  175,   69,  178,  200,   69,  179,
      177,    0,  179,  178,  200,   69,   69,    0,  184,  179,
      248,  183,    0,  178,    0,   69,    0,    0,  184,  180,
       69,  206,   69,  178,  200,   69,  179,  183,  184,  179,
        0,  183,   69,   69,  180,  184,  206,  248,  183,  180,
        0,  206,   69,   70,   70,  184,  180,   70,  206,  187,

      185,   70,  185,  249,  183,  184,  187,   70,  183,    0,
       70,  180,  250,  206,    0,  189,  180,   70,  206,  187,
       70,   70,  185,  188,   70,  189,  187,  185,   70,  185,
      249,  191,    0,  187,   70,  189,  188,   70,    0,  250,
      190,  191,  189,  188,   70,   71,  187,  190,  251,  185,
      188,  191,  189,  196,   71,  252,   71,  253,  191,   71,
      190,  254,  189,  188,  196,   71,    0,  190,  191,  192,
      188,    0,   71,  196,  190,  251,    0,    0,  191,  192,
      196,   71,  252,   71,  253,  193,   71,  190,  254,  192,
        0,  196,   71,  181,  194,    0,  192,  181,  181,  193,

      196,  257,  193,  194,  181,  193,  192,  211,  194,    0,
        0,  181,  193,  198,  194,    0,  192,  181,    0,  199,
      181,  194,  198,  199,  181,  181,  193,  211,  257,  193,
      194,  181,  193,  198,  211,  194,  201,  201,  181,  199,
      198,  194,  204,    0,  181,  186,  199,  186,    0,  198,
      199,  186,    0,  202,  211,  204,  201,  258,  186,  202,
      198,  202,  204,  201,  201,    0,  199,  186,    0,  204,
      212,  212,  186,  202,  186,  203,  260,  203,  186,  203,
      202,  205,  204,  201,  258,  186,  202,  261,  202,  204,
      205,  212,  207,    0,  186,  197,  197,  212,  212,  203,

      202,  205,  203,  260,  203,  197,  203,  207,  205,  262,
      197,  197,  207,  208,  261,  235,  197,  205,  212,  207,
      208,  209,  197,  197,    0,  209,  203,    0,  205,  210,
      210,  213,  197,  208,  207,  235,  262,  197,  197,  207,
      208,  214,  235,  197,    0,  209,  213,  208,  209,  210,
        0,  213,  209,    0,  214,  215,  210,  210,  213,  215,
      208,  214,  235,  216,    0,    0,    0,  216,  214,  263,
      264,  217,  209,  213,    0,  218,  210,  218,  213,  215,
      217,  214,  215,  216,    0,  217,  215,  265,  214,  219,
      216,  217,  219,  220,  216,  218,  263,  264,  217,    0,

      220,  221,  218,    0,  218,  266,  215,  217,  220,  219,
      216,  221,  217,  220,  265,  267,  219,  222,  217,  219,
      220,  221,  218,  224,  268,  223,  224,  220,  221,  223,
      222,    0,  266,  269,  225,  220,  219,  222,  221,  226,
      220,  225,  267,    0,  222,  270,  224,  226,  221,  223,
      224,  268,  223,  224,  225,    0,  223,  222,  226,  226,
      269,  225,  227,  229,  222,    0,  226,  228,  225,    0,
      227,  227,  270,  224,  226,  272,  223,    0,  228,  229,
      259,  225,  227,  229,  230,  226,  226,  228,  230,  227,
      229,  230,  231,  231,  228,  259,  232,  227,  227,    0,

      232,    0,  272,    0,  230,  228,  229,  259,  234,  227,
      229,  230,  273,  231,  228,  230,  232,  233,  230,  231,
      231,  234,  259,  232,  233,  256,  236,  232,  234,  256,
      233,  230,  274,  275,  276,  234,  277,  233,  278,  273,
      231,  236,  279,  232,  233,  280,  236,  281,  234,  282,
      283,  233,  256,  236,  285,  234,  256,  233,  286,  274,
      275,  276,  288,  277,  233,  278,  289,  290,  236,  279,
      284,  291,  280,  236,  281,  292,  282,  283,  293,  294,
      284,  285,  295,  297,  298,  286,  299,  300,  301,  288,
      303,    0,  304,  289,  290,  305,  306,  284,  291,  302,

      307,  308,  292,  309,  310,  293,  294,  284,  312,  295,
      297,  298,  313,  299,  300,  301,  314,  303,  302,  304,
      315,  317,  305,  306,  318,  319,  302,  307,  308,  320,
      309,  310,  322,  324,  323,  312,  323,  325,  326,  313,
      327,  328,  329,  314,  330,  302,  331,  315,  317,  332,
      335,  318,  319,    0,  336,  337,  320,    0,  338,  322,
      324,  323,    0,  323,  325,  326,  340,  327,  328,  329,
      335,  330,  339,  331,  336,  337,  332,  335,  338,  339,
      341,  336,  337,    0,  342,  338,  340,    0,  429,  344,
      343,    0,  339,  340,  342,    0,  344,  335,  351,  339,

      341,  336,  337,    0,  342,  338,  339,  341,  343,  344,
      343,  342,  345,  340,  345,  429,  344,  343,  351,  339,
      346,  342,  347,  344,  357,  351,  349,  341,  348,    0,
      349,  342,  350,  346,  345,  343,  344,  343,  347,  345,
      346,  345,  347,  348,  357,  351,  350,  346,  348,  347,
      349,  357,  350,  349,  352,  348,  353,  349,  352,  350,
      346,  345,  354,  353,    0,  347,  354,  346,  362,  347,
      348,  357,  355,  350,  430,  348,  353,  349,  352,  350,
      356,  352,  356,  353,    0,  352,  354,  355,  362,  354,
      353,  358,  355,  354,  359,  362,    0,  359,  363,  355,

      363,  430,  356,  353,  361,  352,  358,  356,  361,  356,
      431,  358,  360,  354,  355,  362,  364,  359,  358,  355,
      363,  359,  366,  360,  359,  363,  367,  363,  361,  356,
      364,  361,  360,  358,  365,  361,  364,  431,  358,  360,
      368,  365,  366,  364,  359,  369,  367,  363,  368,  366,
      360,    0,  369,  367,  365,  361,  432,  364,  433,  360,
      368,  365,  371,  364,    0,  369,  435,  368,  365,  366,
        0,  370,  369,  367,  370,  368,  374,  372,  371,  369,
      372,  365,  371,  432,    0,  433,  373,  368,    0,  371,
      373,  374,  369,  435,  370,  375,  374,  372,  370,    0,

      377,  370,    0,  374,  372,  371,  373,  372,  378,  371,
      375,  379,    0,  373,  381,  375,  376,  373,  374,  380,
      377,  370,  375,  374,  372,  383,  376,  377,  378,  380,
      381,  379,    0,  373,  381,  378,  376,  375,  379,  380,
      382,  381,  375,  376,  384,  383,  380,  377,  385,  382,
      386,    0,  383,  376,  386,  378,  380,  381,  379,  384,
      382,  381,    0,  376,  384,  388,  380,  382,  385,  388,
      386,  384,  383,  387,  387,  385,  382,  386,  389,    0,
      389,  386,  392,  390,  437,    0,  384,  382,  391,  388,
        0,  384,  388,  394,  387,  385,  388,  386,  389,  390,

      387,  387,  392,  390,  391,  389,  394,  389,  391,  392,
      390,  437,  393,  394,  395,  391,  388,  396,  397,  393,
      394,  387,    0,  398,    0,  389,  390,  398,  395,  392,
      390,  391,  393,  394,  395,  391,    0,  396,  397,  393,
      394,  395,  398,  399,  396,  397,  393,  398,  401,  402,
      398,  400,  399,  402,  398,  395,  401,  403,    0,  393,
        0,  395,  400,  399,  396,  397,  405,  406,  401,  398,
      399,  400,  403,  402,  398,  401,  402,  403,  400,  399,
      402,  407,  404,  401,  403,  404,  405,  406,    0,  400,
      399,  409,  438,  405,  406,  401,  411,  408,  400,  403,

      402,  407,  404,  411,  403,  410,  409,  412,  407,  404,
        0,  409,  404,  405,  406,  408,  411,  408,  409,  438,
      410,  414,    0,  411,  408,  410,  413,  412,  407,  404,
      411,  415,  410,  409,  412,  416,  414,  413,  409,  417,
      418,  414,  408,  411,  408,  439,  413,  410,  414,  418,
        0,  415,  410,  413,  412,  416,  440,  441,  415,  417,
      418,  420,  416,  414,  413,  419,  417,  418,  414,  443,
      421,  420,  439,  413,  421,  419,  418,  419,  415,  423,
      422,  420,  416,  440,  441,  419,  417,  418,  420,  422,
      427,  424,  419,  424,  421,  423,  443,  421,  420,  423,

      422,  421,  419,  427,  419,  425,  423,  422,  420,  426,
      427,  428,  419,  424,  428,  444,  422,  427,  424,  445,
      424,  421,  423,  425,  426,  425,  423,  422,  446,  426,
      427,  428,  425,  448,  449,  450,  426,  427,  428,  452,
      424,  428,  444,  453,  454,  455,  445,  456,  460,  461,
      425,  426,  425,  463,  465,  446,  426,  466,  428,  467,
      448,  449,  450,  468,  469,  472,  452,  470,  476,  478,
      453,  454,  455,  479,  456,  460,  461,  480,  470,  481,
      463,  465,  483,  484,  466,  485,  467,  486,  487,  490,
      468,  469,  472,  491,  470,  476,  478,  492,  493,  494,

      479,  495,  496,  498,  480,  470,  481,  499,  500,  483,
      484,  501,  485,  503,  486,  487,  490,  504,  505,  506,
      491,  507,  508,  509,  492,  493,  494,  510,  495,  496,
      498,  511,  512,  514,  499,  500,  515,    0,  501,    0,
      503,  519,  517,    0,  504,  505,  506,  521,  507,  508,
      509,  518,  520,  522,  510,  517,  524,  607,  511,  512,
      514,  519,  517,  515,  518,  520,  523,  521,  519,  517,
      523,  518,  520,  522,  521,    0,  524,    0,  518,  520,
      522,  608,  517,  524,  607,  609,  527,  525,  519,  517,
      523,  518,  520,  523,  521,  525,  526,  523,  518,  520,

      522,  527,  529,  524,  528,  529,  527,  525,  608,  526,
      530,    0,  609,  527,  525,  610,  526,  523,  528,  531,
      533,    0,  525,  526,  528,  529,  531,    0,  527,  529,
      530,  528,  529,  527,  525,  533,  526,  530,  532,  531,
      533,    0,  610,  526,  534,  528,  531,  533,  534,  535,
      539,  528,  529,  531,  532,    0,    0,  530,  532,  611,
      537,  536,  533,  536,  537,  532,  531,  533,  534,  535,
      539,  534,  538,  540,    0,  534,  535,  539,  541,  538,
      537,  532,  545,  536,  540,  532,  611,  537,  536,  541,
      536,  537,  538,  540,    0,  534,  535,  539,  541,  538,

      540,  542,  545,  543,  546,  541,  538,  537,  544,  545,
      536,  540,  544,  547,  550,    0,  541,  542,  543,  538,
      540,  542,  548,  543,  546,  541,  548,  549,  542,  545,
      543,  546,  544,  547,  550,  544,    0,  552,  549,  544,
      547,  550,  554,  551,  542,  543,  548,  549,  542,  548,
      543,  546,  551,  548,  549,  554,  553,  552,  555,  544,
      547,  550,  554,  551,  552,  549,  553,  556,  557,  554,
      551,    0,  559,  548,  549,  612,  553,  555,  555,  551,
      556,  557,  554,  553,  552,  555,    0,  556,  557,  554,
      551,  561,  559,  553,  556,  557,  558,  562,  558,  559,

      563,  565,  612,  553,  555,  555,  560,  556,  557,  558,
        0,  561,    0,  560,  556,  557,  558,  562,  561,  559,
      563,  565,  564,  558,  562,  558,  560,  563,  565,    0,
      567,  568,  566,  560,    0,  570,  558,  564,  561,  566,
      560,  569,  564,  558,  562,  568,    0,  563,  565,  564,
      567,  568,  566,  560,  569,  570,  572,  567,  568,  566,
      573,  569,  570,  571,  564,  571,  566,    0,  569,  564,
        0,  574,  568,  573,    0,  576,  572,  567,  568,  566,
      573,  569,  570,  572,  574,  571,  575,  573,  569,  577,
      571,  574,  571,  578,  575,  576,    0,  578,  574,  613,

      573,  579,  576,  572,    0,  579,  575,  573,    0,  577,
        0,  574,  571,  575,  581,  580,  577,  578,  574,    0,
      578,  575,  576,  580,  578,  579,  613,  581,  579,  583,
        0,  582,  579,  575,  581,  580,  577,  583,  584,  585,
      584,  581,  580,  586,  578,    0,  582,  615,    0,  583,
      580,  582,  579,  616,  581,  588,  583,  590,  582,  585,
      584,  581,  580,  586,  583,  584,  585,  584,  587,  589,
      586,  591,  587,  582,  615,  588,  583,  590,  582,  589,
      616,  593,  588,  593,  590,  591,  585,  584,  587,  589,
      586,  591,    0,  592,    0,  587,  589,  592,  591,  587,

        0,  595,  588,  593,  590,  594,  589,  596,  593,  617,
      593,  596,  591,  592,  594,  587,  589,  595,  591,  599,
      592,  595,  597,  600,  592,  594,  600,  598,  595,  598,
      593,  596,  594,  618,  596,  601,  617,  597,  596,  599,
      592,  594,  597,  600,  595,  602,  599,  598,  595,  597,
      600,  603,  594,  600,  598,  601,  598,  604,  596,  620,
      618,  602,  601,  621,  597,  602,  599,  622,  623,  597,
      600,  603,  602,  624,  598,  625,  626,  604,  603,  627,
      628,  630,  601,  631,  604,  632,  620,  635,  602,  636,
      621,  637,  602,  638,  622,  623,  643,  644,  603,  645,

      624,  648,  625,  626,  604,  649,  627,  628,  630,  650,
      631,  651,  632,  652,  635,  654,  636,  655,  637,  656,
      638,  657,  658,  643,  644,  659,  645,  660,  648,  661,
      662,  664,  649,  665,  666,  668,  650,  669,  651,  670,
      652,    0,  654,  672,  655,  673,  656,  674,  657,  658,
        0,  675,  659,  676,  660,  739,  661,  662,  664,    0,
      665,  666,  668,  672,  669,  673,  670,  674,  674,    0,
      672,  675,  673,  676,  674,  677,  677,  678,  675,  679,
      676,  680,  739,  682,    0,  681,  678,  682,    0,  679,
      672,    0,  673,    0,  674,  674,  677,  678,  675,  679,

      676,  680,  677,  677,  678,  681,  679,  682,  680,  683,
      682,  684,  681,  678,  682,  685,  679,  686,  684,  683,
      689,    0,  741,  677,  678,  742,  679,    0,  680,  683,
      688,  684,  681,  687,  682,  685,  683,  686,  684,  688,
      689,  690,  685,  743,  686,  684,  683,  689,  687,  741,
      688,    0,  742,  687,  691,    0,  683,  688,  684,  693,
      687,  690,  685,  692,  686,    0,  688,  689,  690,  691,
      743,  696,  694,  693,  691,  687,  694,  688,  692,  693,
      687,  691,  695,  692,  698,    0,  693,  700,  690,  695,
      692,  696,  694,  697,    0,  697,  691,  698,  696,  694,

      693,  691,  695,  694,  698,  692,  693,  700,  699,  695,
      692,  698,  701,  697,  700,    0,  695,  703,  696,  694,
      697,  702,  697,  699,  698,  744,    0,  746,  699,  695,
        0,  698,  701,  704,  700,  699,  702,  703,  705,  701,
      697,  702,  706,    0,  703,  705,  707,  704,  702,    0,
      699,  708,  744,  704,  746,  699,  709,  710,  705,  701,
      704,  710,  706,  702,  703,  705,  707,  711,  702,  706,
      711,  708,  705,  707,  704,  712,  709,    0,  708,  713,
      704,  710,    0,  709,  710,  705,    0,  711,  710,  706,
      712,  714,  715,  707,  711,  712,  716,  711,  708,  713,

      717,  718,  712,  709,  720,    0,  713,    0,  710,  716,
      747,  714,  715,  717,  711,    0,  716,  712,  714,  715,
      717,  718,  712,  716,  720,  719,  713,  717,  718,  719,
      721,  720,  723,  723,  721,  722,  716,  747,  714,  715,
      717,  748,  724,  716,  725,  719,  724,  717,  718,    0,
      722,  720,  719,  723,  721,  722,  719,  721,  725,  723,
      723,  721,  722,  726,  725,    0,  724,    0,  748,  724,
        0,  725,  719,  724,  727,  728,  726,  722,  730,  731,
      723,  721,  722,  726,  728,  725,  732,  732,  729,  727,
      726,  725,  729,  724,  727,  728,    0,  733,  730,  731,

      734,  727,  728,  726,  736,  730,  731,  732,  736,  735,
      726,  728,  729,  732,  732,  729,  727,  733,  738,  729,
      734,  727,  728,  735,  733,  730,  731,  734,  736,  735,
        0,  736,  751,  737,  732,  736,  735,  737,  738,  729,
      755,  757,  760,  763,  733,  738,  764,  734,  766,  767,
      735,  769,  770,  771,  773,  736,  735,  737,  774,  751,
      737,  777,  779,  780,  737,  738,  781,  755,  757,  760,
      763,  782,  787,  764,  788,  766,  767,  789,  769,  770,
      771,  773,  790,  791,  737,  774,  792,  794,  777,  779,
      780,  793,  791,  781,  794,  795,    0,  789,  782,  787,

      844,  788,  790,  791,  789,  793,  792,  794,    0,  790,
      791,  793,    0,  792,  794,  795,  799,  796,  793,  791,
      798,  794,  795,  797,  789,  797,  800,  844,  802,  790,
      791,  796,  793,  792,  794,  798,  799,  796,  793,  801,
      798,  801,  795,  799,  796,  797,  800,  798,  802,  803,
      797,  804,  797,  800,  805,  802,    0,  806,  796,  845,
      808,  801,  798,  799,  796,  809,  801,  798,  801,  803,
      807,  804,  797,  800,  805,  802,  803,  806,  804,  807,
      808,  805,  810,  811,  806,  809,  845,  808,  801,    0,
      807,  812,  809,  814,  815,  813,  803,  807,  804,  818,

      847,  805,  810,  811,  806,    0,  807,  808,  813,  810,
      811,  812,  809,  814,  815,  813,  816,  807,  812,  818,
      814,  815,  813,  816,  817,    0,  818,  847,  817,  810,
      811,    0,  819,  820,  821,  813,  816,  822,  812,    0,
      814,  815,  813,  816,  852,  825,  818,  819,  817,    0,
      816,  817,  819,  820,  821,  817,  823,  822,  823,  819,
      820,  821,  824,  816,  822,  825,  826,  828,    0,    0,
      827,  852,  825,    0,  819,  817,  824,  827,  823,  819,
      820,  821,  824,  823,  822,  823,  826,  828,    0,  824,
      827,  829,  825,  826,  828,  829,  830,  827,    0,  833,

      830,  831,  854,  824,  827,  823,    0,  855,  858,  824,
      832,  834,  835,  826,  828,  829,  831,  827,  829,  833,
      830,  831,  829,  830,  836,  832,  833,  830,  831,  854,
      832,  834,  835,  838,  855,  858,  837,  832,  834,  835,
      838,  861,  829,  831,  836,  862,  833,  830,  831,  837,
      864,  836,  832,  838,  867,  868,  837,  832,  834,  835,
      838,    0,    0,  837,  869,  870,  871,  838,  861,  872,
      895,  836,  862,    0,  867,  868,  837,  864,  874,  876,
      838,  867,  868,  837,  869,  870,  871,    0,  875,  872,
      873,  869,  870,  871,  873,    0,  872,  895,  874,  876,

      877,  867,  868,  875,  878,  874,  876,    0,  875,  879,
        0,  869,  870,  871,  873,  875,  872,  873,  881,    0,
      877,  873,  883,  884,  878,  874,  876,  877,  885,  879,
      875,  878,  880,  882,  880,  875,  879,  886,  881,    0,
        0,  873,  883,  884,    0,  881,  882,  877,  885,  883,
      884,  878,  886,  882,  880,  885,  879,  886,  887,  880,
      882,  880,  888,  889,  886,  881,  890,  891,  892,  883,
      884,  893,  894,  882,  890,  885,  889,  896,  887,  886,
      882,  880,  888,  889,  886,  887,  890,  891,  892,  888,
      889,  893,  894,  890,  891,  892,  898,  900,  893,  894,

      902,  890,  903,  889,  896,  887,  905,    0,  907,  888,
      889,    0,  916,  890,  891,  892,  906,  908,  893,  894,
      905,  909,  911,  898,  900,  910,  905,  902,  907,  903,
      912,  906,  908,  905,  914,  907,  906,  908,  910,  916,
      913,  909,  911,  906,  908,  910,  918,  905,  909,  911,
      912,  913,  910,  905,  914,  907,  921,  912,  906,  908,
      913,  914,  922,  906,  908,  910,  923,  913,  909,  911,
      924,  925,  910,  918,  926,  929,  921,  912,  913,  930,
        0,  914,  922,  921,  924,    0,  923,  913,    0,  922,
      924,  925,    0,  923,  926,  929,    0,  924,  925,  930,

        0,  926,  929,  921,    0,    0,  930,    0,    0,  922,
        0,  924,    0,  923,    0,    0,    0,  924,  925,    0,
        0,  926,  929,    0,    0,    0,  930,  932,    0,    0,
      932,  933,    0,  933,  933,  935,    0,  935,  935,  936,
        0,  936,  936,  937,    0,  937,  937,  938,    0,  938,
      938,  931,  931,  931,  931,  931,  931,  931,  931,  931,
      931,  931,  931,  931,  931,  931,  931,  931,  931,  931,
      931,  931,  931,  931,  931,  931,  931,  931,  931,  931,
      931,  931,  931,  931,  931,  931,  931,  931,  931,  931,
      931,  931,  931,  931,  931,  931,  931,  931,  931,  931,

      931,  931,  931,  931,  931,  931,  931,  931,  931,  931,
      931,  931,  931,  931,  931,  931,  931
    } ;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "flex_lexer.l"
/**
 * lexer
 *
 *
 */
/***************************
 ** Section 1: Definitions
 ***************************/
#line 12 "flex_lexer.l"

#include "../sql/Expr.h"
#include "bison_parser.h"
#include <stdio.h>

#define TOKEN(name) { return SQL_##name; }

/***************************
 ** Section 2: Rules
 ***************************/
/* Define the output files */
/* Make reentrant */
/* performance tweeks */
/* other flags */
/* %option nodefault */

/***************************
 ** Section 3: Rules
 ***************************/
#line 1619 "flex_lexer.cpp"

#define INITIAL 0
#define COMMENT 1

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

/* Holds the entire state of the reentrant scanner. */
struct yyguts_t
    {

    /* User-defined. Not touched by flex. */
    YY_EXTRA_TYPE yyextra_r;

    /* The rest are the same as the globals declared in the non-reentrant scanner. */
    FILE *yyin_r, *yyout_r;
    size_t yy_buffer_stack_top; /**< index of top of stack. */
    size_t yy_buffer_stack_max; /**< capacity of stack. */
    YY_BUFFER_STATE * yy_buffer_stack; /**< Stack as an array. */
    char yy_hold_char;
    int yy_n_chars;
    int yyleng_r;
    char *yy_c_buf_p;
    int yy_init;
    int yy_start;
    int yy_did_buffer_switch_on_eof;
    int yy_start_stack_ptr;
    int yy_start_stack_depth;
    int *yy_start_stack;
    yy_state_type yy_last_accepting_state;
    char* yy_last_accepting_cpos;

    int yylineno_r;
    int yy_flex_debug_r;

    char *yytext_r;
    int yy_more_flag;
    int yy_more_len;

    YYSTYPE * yylval_r;

    YYLTYPE * yylloc_r;

    }; /* end struct yyguts_t */

static int yy_init_globals (yyscan_t yyscanner );

    /* This must go here because YYSTYPE and YYLTYPE are included
     * from bison output in section 1.*/
    #    define yylval yyg->yylval_r
    
    #    define yylloc yyg->yylloc_r
    
int hsql_lex_init (yyscan_t* scanner);

int hsql_lex_init_extra (YY_EXTRA_TYPE user_defined,yyscan_t* scanner);

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int hsql_lex_destroy (yyscan_t yyscanner );

int hsql_get_debug (yyscan_t yyscanner );

void hsql_set_debug (int debug_flag ,yyscan_t yyscanner );

YY_EXTRA_TYPE hsql_get_extra (yyscan_t yyscanner );

void hsql_set_extra (YY_EXTRA_TYPE user_defined ,yyscan_t yyscanner );

FILE *hsql_get_in (yyscan_t yyscanner );

void hsql_set_in  (FILE * in_str ,yyscan_t yyscanner );

FILE *hsql_get_out (yyscan_t yyscanner );

void hsql_set_out  (FILE * out_str ,yyscan_t yyscanner );

int hsql_get_leng (yyscan_t yyscanner );

char *hsql_get_text (yyscan_t yyscanner );

int hsql_get_lineno (yyscan_t yyscanner );

void hsql_set_lineno (int line_number ,yyscan_t yyscanner );

YYSTYPE * hsql_get_lval (yyscan_t yyscanner );

void hsql_set_lval (YYSTYPE * yylval_param ,yyscan_t yyscanner );

       YYLTYPE *hsql_get_lloc (yyscan_t yyscanner );
    
        void hsql_set_lloc (YYLTYPE * yylloc_param ,yyscan_t yyscanner );
    
/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int hsql_wrap (yyscan_t yyscanner );
#else
extern int hsql_wrap (yyscan_t yyscanner );
#endif
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int ,yyscan_t yyscanner);
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * ,yyscan_t yyscanner);
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (yyscan_t yyscanner );
#else
static int input (yyscan_t yyscanner );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, yyleng, 1, yyout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, yyin))==0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg , yyscanner)
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int hsql_lex \
               (YYSTYPE * yylval_param,YYLTYPE * yylloc_param ,yyscan_t yyscanner);

#define YY_DECL int hsql_lex \
               (YYSTYPE * yylval_param, YYLTYPE * yylloc_param , yyscan_t yyscanner)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

#line 51 "flex_lexer.l"


#line 1867 "flex_lexer.cpp"

    yylval = yylval_param;

    yylloc = yylloc_param;

	if ( !yyg->yy_init )
		{
		yyg->yy_init = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yyg->yy_start )
			yyg->yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			hsql_ensure_buffer_stack (yyscanner);
			YY_CURRENT_BUFFER_LVALUE =
				hsql__create_buffer(yyin,YY_BUF_SIZE ,yyscanner);
		}

		hsql__load_buffer_state(yyscanner );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yyg->yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yyg->yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yyg->yy_start;
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				yyg->yy_last_accepting_state = yy_current_state;
				yyg->yy_last_accepting_cpos = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 932 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_current_state != 931 );
		yy_cp = yyg->yy_last_accepting_cpos;
		yy_current_state = yyg->yy_last_accepting_state;

yy_find_action:
		yy_act = yy_accept[yy_current_state];

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = yyg->yy_hold_char;
			yy_cp = yyg->yy_last_accepting_cpos;
			yy_current_state = yyg->yy_last_accepting_state;
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 53 "flex_lexer.l"
BEGIN(COMMENT);
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 54 "flex_lexer.l"
/* skipping comment content until a end of line is read */;
	YY_BREAK
case 3:
/* rule 3 can match eol */
YY_RULE_SETUP
#line 55 "flex_lexer.l"
BEGIN(INITIAL);
	YY_BREAK
case 4:
/* rule 4 can match eol */
YY_RULE_SETUP
#line 58 "flex_lexer.l"
/* skip whitespace */;
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 62 "flex_lexer.l"
TOKEN(DEALLOCATE)
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 63 "flex_lexer.l"
TOKEN(PARAMETERS)
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 64 "flex_lexer.l"
TOKEN(INTERSECT)
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 65 "flex_lexer.l"
TOKEN(TEMPORARY)
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 66 "flex_lexer.l"
TOKEN(TIMESTAMP)
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 67 "flex_lexer.l"
TOKEN(DISTINCT)
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 68 "flex_lexer.l"
TOKEN(NVARCHAR)
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 69 "flex_lexer.l"
TOKEN(RESTRICT)
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 70 "flex_lexer.l"
TOKEN(TRUNCATE)
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 71 "flex_lexer.l"
TOKEN(ANALYZE)
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 72 "flex_lexer.l"
TOKEN(BETWEEN)
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 73 "flex_lexer.l"
TOKEN(CASCADE)
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 74 "flex_lexer.l"
TOKEN(COLUMNS)
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 75 "flex_lexer.l"
TOKEN(CONTROL)
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 76 "flex_lexer.l"
TOKEN(DEFAULT)
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 77 "flex_lexer.l"
TOKEN(EXECUTE)
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 78 "flex_lexer.l"
TOKEN(EXPLAIN)
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 79 "flex_lexer.l"
TOKEN(HISTORY)
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 80 "flex_lexer.l"
TOKEN(INTEGER)
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 81 "flex_lexer.l"
TOKEN(NATURAL)
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 82 "flex_lexer.l"
TOKEN(PREPARE)
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 83 "flex_lexer.l"
TOKEN(PRIMARY)
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 84 "flex_lexer.l"
TOKEN(SCHEMAS)
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 85 "flex_lexer.l"
TOKEN(SPATIAL)
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 86 "flex_lexer.l"
TOKEN(VIRTUAL)
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 87 "flex_lexer.l"
TOKEN(BEFORE)
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 88 "flex_lexer.l"
TOKEN(COLUMN)
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 89 "flex_lexer.l"
TOKEN(CREATE)
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 90 "flex_lexer.l"
TOKEN(DELETE)
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 91 "flex_lexer.l"
TOKEN(DIRECT)
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 92 "flex_lexer.l"
TOKEN(DOUBLE)
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 93 "flex_lexer.l"
TOKEN(ESCAPE)
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 94 "flex_lexer.l"
TOKEN(EXCEPT)
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 95 "flex_lexer.l"
TOKEN(EXISTS)
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 96 "flex_lexer.l"
TOKEN(GLOBAL)
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 97 "flex_lexer.l"
TOKEN(HAVING)
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 98 "flex_lexer.l"
TOKEN(IMPORT)
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 99 "flex_lexer.l"
TOKEN(INSERT)
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 100 "flex_lexer.l"
TOKEN(ISNULL)
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 101 "flex_lexer.l"
TOKEN(OFFSET)
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 102 "flex_lexer.l"
TOKEN(RENAME)
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 103 "flex_lexer.l"
TOKEN(SCHEMA)
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 104 "flex_lexer.l"
TOKEN(SELECT)
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 105 "flex_lexer.l"
TOKEN(SORTED)
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 106 "flex_lexer.l"
TOKEN(TABLES)
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 107 "flex_lexer.l"
TOKEN(UNIQUE)
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 108 "flex_lexer.l"
TOKEN(UNLOAD)
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 109 "flex_lexer.l"
TOKEN(UPDATE)
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 110 "flex_lexer.l"
TOKEN(VALUES)
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 111 "flex_lexer.l"
TOKEN(AFTER)
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 112 "flex_lexer.l"
TOKEN(ALTER)
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 113 "flex_lexer.l"
TOKEN(CROSS)
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 114 "flex_lexer.l"
TOKEN(DELTA)
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 115 "flex_lexer.l"
TOKEN(GROUP)
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 116 "flex_lexer.l"
TOKEN(INDEX)
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 117 "flex_lexer.l"
TOKEN(INNER)
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 118 "flex_lexer.l"
TOKEN(LIMIT)
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 119 "flex_lexer.l"
TOKEN(LOCAL)
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 120 "flex_lexer.l"
TOKEN(MERGE)
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 121 "flex_lexer.l"
TOKEN(MINUS)
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 122 "flex_lexer.l"
TOKEN(ORDER)
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 123 "flex_lexer.l"
TOKEN(OUTER)
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 124 "flex_lexer.l"
TOKEN(RIGHT)
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 125 "flex_lexer.l"
TOKEN(TABLE)
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 126 "flex_lexer.l"
TOKEN(UNION)
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 127 "flex_lexer.l"
TOKEN(USING)
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 128 "flex_lexer.l"
TOKEN(WHERE)
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 129 "flex_lexer.l"
TOKEN(CALL)
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 130 "flex_lexer.l"
TOKEN(DATE)
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 131 "flex_lexer.l"
TOKEN(DESC)
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 132 "flex_lexer.l"
TOKEN(DROP)
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 133 "flex_lexer.l"
TOKEN(FILE)
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 134 "flex_lexer.l"
TOKEN(FROM)
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 135 "flex_lexer.l"
TOKEN(FULL)
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 136 "flex_lexer.l"
TOKEN(HASH)
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 137 "flex_lexer.l"
TOKEN(HINT)
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 138 "flex_lexer.l"
TOKEN(INTO)
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 139 "flex_lexer.l"
TOKEN(JOIN)
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 140 "flex_lexer.l"
TOKEN(LEFT)
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 141 "flex_lexer.l"
TOKEN(LIKE)
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 142 "flex_lexer.l"
TOKEN(LOAD)
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 143 "flex_lexer.l"
TOKEN(NULL)
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 144 "flex_lexer.l"
TOKEN(PART)
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 145 "flex_lexer.l"
TOKEN(PLAN)
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 146 "flex_lexer.l"
TOKEN(SHOW)
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 147 "flex_lexer.l"
TOKEN(TEXT)
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 148 "flex_lexer.l"
TOKEN(TIME)
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 149 "flex_lexer.l"
TOKEN(VIEW)
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 150 "flex_lexer.l"
TOKEN(WITH)
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 151 "flex_lexer.l"
TOKEN(ADD)
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 152 "flex_lexer.l"
TOKEN(ALL)
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 153 "flex_lexer.l"
TOKEN(AND)
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 154 "flex_lexer.l"
TOKEN(ASC)
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 155 "flex_lexer.l"
TOKEN(CSV)
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 156 "flex_lexer.l"
TOKEN(FOR)
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 157 "flex_lexer.l"
TOKEN(INT)
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 158 "flex_lexer.l"
TOKEN(KEY)
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 159 "flex_lexer.l"
TOKEN(NOT)
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 160 "flex_lexer.l"
TOKEN(OFF)
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 161 "flex_lexer.l"
TOKEN(SET)
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 162 "flex_lexer.l"
TOKEN(TBL)
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 163 "flex_lexer.l"
TOKEN(TOP)
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 164 "flex_lexer.l"
TOKEN(AS)
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 165 "flex_lexer.l"
TOKEN(BY)
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 166 "flex_lexer.l"
TOKEN(IF)
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 167 "flex_lexer.l"
TOKEN(IN)
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 168 "flex_lexer.l"
TOKEN(IS)
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 169 "flex_lexer.l"
TOKEN(OF)
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 170 "flex_lexer.l"
TOKEN(ON)
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 171 "flex_lexer.l"
TOKEN(OR)
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 172 "flex_lexer.l"
TOKEN(TO)
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 173 "flex_lexer.l"
TOKEN(DATABASE)
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 174 "flex_lexer.l"
TOKEN(DATABASES)
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 175 "flex_lexer.l"
TOKEN(VARCHAR)
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 176 "flex_lexer.l"
TOKEN(TINYINT)
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 177 "flex_lexer.l"
TOKEN(CHAR)
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 181 "flex_lexer.l"
TOKEN(NOTEQUALS)
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 182 "flex_lexer.l"
TOKEN(LESSEQ)
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 183 "flex_lexer.l"
TOKEN(GREATEREQ)
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 186 "flex_lexer.l"
{ return yytext[0]; }
	YY_BREAK
case 125:
#line 190 "flex_lexer.l"
case 126:
YY_RULE_SETUP
#line 190 "flex_lexer.l"
{
	yylval->fval = atof(yytext);
	return SQL_FLOATVAL;
}
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 195 "flex_lexer.l"
{
	yylval->ival = atol(yytext);
	return SQL_INTVAL;
}
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 200 "flex_lexer.l"
{
	// Crop the leading and trailing quote char
	yylval->sval = hsql::substr(yytext, 1, strlen(yytext)-1);
	return SQL_IDENTIFIER;
}
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 206 "flex_lexer.l"
{
	yylval->sval = strdup(yytext);
	return SQL_IDENTIFIER;
}
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 212 "flex_lexer.l"
{
	// Crop the leading and trailing quote char
	yylval->sval = hsql::substr(yytext, 1, strlen(yytext)-1);
	return SQL_STRING;
}
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 218 "flex_lexer.l"
{ fprintf(stderr, "[SQL-Lexer-Error] Unknown Character: %c\n", yytext[0]); return 0; }
	YY_BREAK
case 132:
YY_RULE_SETUP
#line 221 "flex_lexer.l"
ECHO;
	YY_BREAK
#line 2626 "flex_lexer.cpp"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(COMMENT):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yyg->yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yyg->yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * hsql_lex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yyg->yy_c_buf_p <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yyg->yy_c_buf_p = yyg->yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state( yyscanner );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state , yyscanner);

			yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yyg->yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yyg->yy_last_accepting_cpos;
				yy_current_state = yyg->yy_last_accepting_state;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer( yyscanner ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yyg->yy_did_buffer_switch_on_eof = 0;

				if ( hsql_wrap(yyscanner ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yyg->yy_c_buf_p = yyg->yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yyg->yy_c_buf_p =
					yyg->yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yyg->yy_c_buf_p =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars];

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of hsql_lex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = yyg->yytext_ptr;
	register int number_to_move, i;
	int ret_val;

	if ( yyg->yy_c_buf_p > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yyg->yy_c_buf_p - yyg->yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yyg->yy_c_buf_p - yyg->yytext_ptr) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

			int yy_c_buf_p_offset =
				(int) (yyg->yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					hsql_realloc((void *) b->yy_ch_buf,b->yy_buf_size + 2 ,yyscanner );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yyg->yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			yyg->yy_n_chars, (size_t) num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	if ( yyg->yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			hsql_restart(yyin  ,yyscanner);
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) (yyg->yy_n_chars + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = yyg->yy_n_chars + number_to_move + (yyg->yy_n_chars >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) hsql_realloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size ,yyscanner );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	yyg->yy_n_chars += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yyg->yytext_ptr = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (yyscan_t yyscanner)
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	yy_current_state = yyg->yy_start;

	for ( yy_cp = yyg->yytext_ptr + YY_MORE_ADJ; yy_cp < yyg->yy_c_buf_p; ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			yyg->yy_last_accepting_state = yy_current_state;
			yyg->yy_last_accepting_cpos = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 932 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state , yyscan_t yyscanner)
{
	register int yy_is_jam;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner; /* This var may be unused depending upon options. */
	register char *yy_cp = yyg->yy_c_buf_p;

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		yyg->yy_last_accepting_state = yy_current_state;
		yyg->yy_last_accepting_cpos = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 932 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 931);

	return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (yyscan_t yyscanner)
#else
    static int input  (yyscan_t yyscanner)
#endif

{
	int c;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	*yyg->yy_c_buf_p = yyg->yy_hold_char;

	if ( *yyg->yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yyg->yy_c_buf_p < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			/* This was really a NUL. */
			*yyg->yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = yyg->yy_c_buf_p - yyg->yytext_ptr;
			++yyg->yy_c_buf_p;

			switch ( yy_get_next_buffer( yyscanner ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					hsql_restart(yyin ,yyscanner);

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( hsql_wrap(yyscanner ) )
						return EOF;

					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput(yyscanner);
#else
					return input(yyscanner);
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yyg->yy_c_buf_p = yyg->yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yyg->yy_c_buf_p;	/* cast for 8-bit char's */
	*yyg->yy_c_buf_p = '\0';	/* preserve yytext */
	yyg->yy_hold_char = *++yyg->yy_c_buf_p;

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * @param yyscanner The scanner object.
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void hsql_restart  (FILE * input_file , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! YY_CURRENT_BUFFER ){
        hsql_ensure_buffer_stack (yyscanner);
		YY_CURRENT_BUFFER_LVALUE =
            hsql__create_buffer(yyin,YY_BUF_SIZE ,yyscanner);
	}

	hsql__init_buffer(YY_CURRENT_BUFFER,input_file ,yyscanner);
	hsql__load_buffer_state(yyscanner );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * @param yyscanner The scanner object.
 */
    void hsql__switch_to_buffer  (YY_BUFFER_STATE  new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	/* TODO. We should be able to replace this entire function body
	 * with
	 *		hsql_pop_buffer_state();
	 *		hsql_push_buffer_state(new_buffer);
     */
	hsql_ensure_buffer_stack (yyscanner);
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	hsql__load_buffer_state(yyscanner );

	/* We don't actually know whether we did this switch during
	 * EOF (hsql_wrap()) processing, but the only time this flag
	 * is looked at is after hsql_wrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yyg->yy_did_buffer_switch_on_eof = 1;
}

static void hsql__load_buffer_state  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	yyg->yytext_ptr = yyg->yy_c_buf_p = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	yyg->yy_hold_char = *yyg->yy_c_buf_p;
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * @param yyscanner The scanner object.
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE hsql__create_buffer  (FILE * file, int  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) hsql_alloc(sizeof( struct yy_buffer_state ) ,yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in hsql__create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) hsql_alloc(b->yy_buf_size + 2 ,yyscanner );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in hsql__create_buffer()" );

	b->yy_is_our_buffer = 1;

	hsql__init_buffer(b,file ,yyscanner);

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with hsql__create_buffer()
 * @param yyscanner The scanner object.
 */
    void hsql__delete_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		hsql_free((void *) b->yy_ch_buf ,yyscanner );

	hsql_free((void *) b ,yyscanner );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a hsql_restart() or at EOF.
 */
    static void hsql__init_buffer  (YY_BUFFER_STATE  b, FILE * file , yyscan_t yyscanner)

{
	int oerrno = errno;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	hsql__flush_buffer(b ,yyscanner);

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then hsql__init_buffer was _probably_
     * called from hsql_restart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * @param yyscanner The scanner object.
 */
    void hsql__flush_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		hsql__load_buffer_state(yyscanner );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  @param yyscanner The scanner object.
 */
void hsql_push_buffer_state (YY_BUFFER_STATE new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (new_buffer == NULL)
		return;

	hsql_ensure_buffer_stack(yyscanner);

	/* This block is copied from hsql__switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		yyg->yy_buffer_stack_top++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from hsql__switch_to_buffer. */
	hsql__load_buffer_state(yyscanner );
	yyg->yy_did_buffer_switch_on_eof = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  @param yyscanner The scanner object.
 */
void hsql_pop_buffer_state (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (!YY_CURRENT_BUFFER)
		return;

	hsql__delete_buffer(YY_CURRENT_BUFFER ,yyscanner);
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if (yyg->yy_buffer_stack_top > 0)
		--yyg->yy_buffer_stack_top;

	if (YY_CURRENT_BUFFER) {
		hsql__load_buffer_state(yyscanner );
		yyg->yy_did_buffer_switch_on_eof = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void hsql_ensure_buffer_stack (yyscan_t yyscanner)
{
	int num_to_alloc;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if (!yyg->yy_buffer_stack) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		yyg->yy_buffer_stack = (struct yy_buffer_state**)hsql_alloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in hsql_ensure_buffer_stack()" );
								  
		memset(yyg->yy_buffer_stack, 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		yyg->yy_buffer_stack_max = num_to_alloc;
		yyg->yy_buffer_stack_top = 0;
		return;
	}

	if (yyg->yy_buffer_stack_top >= (yyg->yy_buffer_stack_max) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = yyg->yy_buffer_stack_max + grow_size;
		yyg->yy_buffer_stack = (struct yy_buffer_state**)hsql_realloc
								(yyg->yy_buffer_stack,
								num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in hsql_ensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset(yyg->yy_buffer_stack + yyg->yy_buffer_stack_max, 0, grow_size * sizeof(struct yy_buffer_state*));
		yyg->yy_buffer_stack_max = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE hsql__scan_buffer  (char * base, yy_size_t  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) hsql_alloc(sizeof( struct yy_buffer_state ) ,yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in hsql__scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	hsql__switch_to_buffer(b ,yyscanner );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to hsql_lex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       hsql__scan_bytes() instead.
 */
YY_BUFFER_STATE hsql__scan_string (yyconst char * yystr , yyscan_t yyscanner)
{
    
	return hsql__scan_bytes(yystr,strlen(yystr) ,yyscanner);
}

/** Setup the input buffer state to scan the given bytes. The next call to hsql_lex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE hsql__scan_bytes  (yyconst char * yybytes, int  _yybytes_len , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) hsql_alloc(n ,yyscanner );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in hsql__scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = hsql__scan_buffer(buf,n ,yyscanner);
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in hsql__scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg , yyscan_t yyscanner)
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = yyg->yy_hold_char; \
		yyg->yy_c_buf_p = yytext + yyless_macro_arg; \
		yyg->yy_hold_char = *yyg->yy_c_buf_p; \
		*yyg->yy_c_buf_p = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the user-defined data for this scanner.
 * @param yyscanner The scanner object.
 */
YY_EXTRA_TYPE hsql_get_extra  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyextra;
}

/** Get the current line number.
 * @param yyscanner The scanner object.
 */
int hsql_get_lineno  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    
        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yylineno;
}

/** Get the current column number.
 * @param yyscanner The scanner object.
 */
int hsql_get_column  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    
        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yycolumn;
}

/** Get the input stream.
 * @param yyscanner The scanner object.
 */
FILE *hsql_get_in  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyin;
}

/** Get the output stream.
 * @param yyscanner The scanner object.
 */
FILE *hsql_get_out  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyout;
}

/** Get the length of the current token.
 * @param yyscanner The scanner object.
 */
int hsql_get_leng  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyleng;
}

/** Get the current token.
 * @param yyscanner The scanner object.
 */

char *hsql_get_text  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yytext;
}

/** Set the user-defined data. This data is never touched by the scanner.
 * @param user_defined The data to be associated with this scanner.
 * @param yyscanner The scanner object.
 */
void hsql_set_extra (YY_EXTRA_TYPE  user_defined , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyextra = user_defined ;
}

/** Set the current line number.
 * @param line_number
 * @param yyscanner The scanner object.
 */
void hsql_set_lineno (int  line_number , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* lineno is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           yy_fatal_error( "hsql_set_lineno called with no buffer" , yyscanner); 
    
    yylineno = line_number;
}

/** Set the current column.
 * @param line_number
 * @param yyscanner The scanner object.
 */
void hsql_set_column (int  column_no , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* column is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           yy_fatal_error( "hsql_set_column called with no buffer" , yyscanner); 
    
    yycolumn = column_no;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * @param yyscanner The scanner object.
 * @see hsql__switch_to_buffer
 */
void hsql_set_in (FILE *  in_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyin = in_str ;
}

void hsql_set_out (FILE *  out_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyout = out_str ;
}

int hsql_get_debug  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yy_flex_debug;
}

void hsql_set_debug (int  bdebug , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yy_flex_debug = bdebug ;
}

/* Accessor methods for yylval and yylloc */

YYSTYPE * hsql_get_lval  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yylval;
}

void hsql_set_lval (YYSTYPE *  yylval_param , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yylval = yylval_param;
}

YYLTYPE *hsql_get_lloc  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yylloc;
}
    
void hsql_set_lloc (YYLTYPE *  yylloc_param , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yylloc = yylloc_param;
}
    
/* User-visible API */

/* hsql_lex_init is special because it creates the scanner itself, so it is
 * the ONLY reentrant function that doesn't take the scanner as the last argument.
 * That's why we explicitly handle the declaration, instead of using our macros.
 */

int hsql_lex_init(yyscan_t* ptr_yy_globals)

{
    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) hsql_alloc ( sizeof( struct yyguts_t ), NULL );

    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));

    return yy_init_globals ( *ptr_yy_globals );
}

/* hsql_lex_init_extra has the same functionality as hsql_lex_init, but follows the
 * convention of taking the scanner as the last argument. Note however, that
 * this is a *pointer* to a scanner, as it will be allocated by this call (and
 * is the reason, too, why this function also must handle its own declaration).
 * The user defined value in the first argument will be available to hsql_alloc in
 * the yyextra field.
 */

int hsql_lex_init_extra(YY_EXTRA_TYPE yy_user_defined,yyscan_t* ptr_yy_globals )

{
    struct yyguts_t dummy_yyguts;

    hsql_set_extra (yy_user_defined, &dummy_yyguts);

    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }
	
    *ptr_yy_globals = (yyscan_t) hsql_alloc ( sizeof( struct yyguts_t ), &dummy_yyguts );
	
    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }
    
    /* By setting to 0xAA, we expose bugs in
    yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));
    
    hsql_set_extra (yy_user_defined, *ptr_yy_globals);
    
    return yy_init_globals ( *ptr_yy_globals );
}

static int yy_init_globals (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from hsql_lex_destroy(), so don't allocate here.
     */

    yyg->yy_buffer_stack = 0;
    yyg->yy_buffer_stack_top = 0;
    yyg->yy_buffer_stack_max = 0;
    yyg->yy_c_buf_p = (char *) 0;
    yyg->yy_init = 0;
    yyg->yy_start = 0;

    yyg->yy_start_stack_ptr = 0;
    yyg->yy_start_stack_depth = 0;
    yyg->yy_start_stack =  NULL;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = (FILE *) 0;
    yyout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * hsql_lex_init()
     */
    return 0;
}

/* hsql_lex_destroy is for both reentrant and non-reentrant scanners. */
int hsql_lex_destroy  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		hsql__delete_buffer(YY_CURRENT_BUFFER ,yyscanner );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		hsql_pop_buffer_state(yyscanner);
	}

	/* Destroy the stack itself. */
	hsql_free(yyg->yy_buffer_stack ,yyscanner);
	yyg->yy_buffer_stack = NULL;

    /* Destroy the start condition stack. */
        hsql_free(yyg->yy_start_stack ,yyscanner );
        yyg->yy_start_stack = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * hsql_lex() is called, initialization will occur. */
    yy_init_globals( yyscanner);

    /* Destroy the main struct (reentrant only). */
    hsql_free ( yyscanner , yyscanner );
    yyscanner = NULL;
    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n , yyscan_t yyscanner)
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s , yyscan_t yyscanner)
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *hsql_alloc (yy_size_t  size , yyscan_t yyscanner)
{
	return (void *) malloc( size );
}

void *hsql_realloc  (void * ptr, yy_size_t  size , yyscan_t yyscanner)
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void hsql_free (void * ptr , yyscan_t yyscanner)
{
	free( (char *) ptr );	/* see hsql_realloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 221 "flex_lexer.l"


/***************************
 ** Section 3: User code
 ***************************/

int yyerror(const char *msg) {
    fprintf(stderr, "[SQL-Lexer-Error] %s\n",msg); return 0;
}

