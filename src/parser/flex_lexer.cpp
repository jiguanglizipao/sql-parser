#line 2 "flex_lexer.cpp"

#line 4 "flex_lexer.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* An opaque pointer. */
#ifndef YY_TYPEDEF_YY_SCANNER_T
#define YY_TYPEDEF_YY_SCANNER_T
typedef void* yyscan_t;
#endif

/* For convenience, these vars (plus the bison vars far below)
   are macros in the reentrant scanner. */
#define yyin yyg->yyin_r
#define yyout yyg->yyout_r
#define yyextra yyg->yyextra_r
#define yyleng yyg->yyleng_r
#define yytext yyg->yytext_r
#define yylineno (YY_CURRENT_BUFFER_LVALUE->yy_bs_lineno)
#define yycolumn (YY_CURRENT_BUFFER_LVALUE->yy_bs_column)
#define yy_flex_debug yyg->yy_flex_debug_r

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yyg->yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yyg->yy_start - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE hsql_restart(yyin ,yyscanner )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = yyg->yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yyg->yy_c_buf_p = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, yyg->yytext_ptr , yyscanner )

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via hsql_restart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( yyg->yy_buffer_stack \
                          ? yyg->yy_buffer_stack[yyg->yy_buffer_stack_top] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE yyg->yy_buffer_stack[yyg->yy_buffer_stack_top]

void hsql_restart (FILE *input_file ,yyscan_t yyscanner );
void hsql__switch_to_buffer (YY_BUFFER_STATE new_buffer ,yyscan_t yyscanner );
YY_BUFFER_STATE hsql__create_buffer (FILE *file,int size ,yyscan_t yyscanner );
void hsql__delete_buffer (YY_BUFFER_STATE b ,yyscan_t yyscanner );
void hsql__flush_buffer (YY_BUFFER_STATE b ,yyscan_t yyscanner );
void hsql_push_buffer_state (YY_BUFFER_STATE new_buffer ,yyscan_t yyscanner );
void hsql_pop_buffer_state (yyscan_t yyscanner );

static void hsql_ensure_buffer_stack (yyscan_t yyscanner );
static void hsql__load_buffer_state (yyscan_t yyscanner );
static void hsql__init_buffer (YY_BUFFER_STATE b,FILE *file ,yyscan_t yyscanner );

#define YY_FLUSH_BUFFER hsql__flush_buffer(YY_CURRENT_BUFFER ,yyscanner)

YY_BUFFER_STATE hsql__scan_buffer (char *base,yy_size_t size ,yyscan_t yyscanner );
YY_BUFFER_STATE hsql__scan_string (yyconst char *yy_str ,yyscan_t yyscanner );
YY_BUFFER_STATE hsql__scan_bytes (yyconst char *bytes,int len ,yyscan_t yyscanner );

void *hsql_alloc (yy_size_t ,yyscan_t yyscanner );
void *hsql_realloc (void *,yy_size_t ,yyscan_t yyscanner );
void hsql_free (void * ,yyscan_t yyscanner );

#define yy_new_buffer hsql__create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        hsql_ensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            hsql__create_buffer(yyin,YY_BUF_SIZE ,yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        hsql_ensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            hsql__create_buffer(yyin,YY_BUF_SIZE ,yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define hsql_wrap(n) 1
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

typedef int yy_state_type;

#define yytext_ptr yytext_r

static yy_state_type yy_get_previous_state (yyscan_t yyscanner );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  ,yyscan_t yyscanner);
static int yy_get_next_buffer (yyscan_t yyscanner );
static void yy_fatal_error (yyconst char msg[] ,yyscan_t yyscanner );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yyg->yytext_ptr = yy_bp; \
	yyleng = (size_t) (yy_cp - yy_bp); \
	yyg->yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yyg->yy_c_buf_p = yy_cp;

#define YY_NUM_RULES 134
#define YY_END_OF_BUFFER 135
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[944] =
    {   0,
        0,    0,    2,    2,  135,  133,    4,    4,  133,  126,
      133,  126,  126,  129,  126,  126,  131,  131,  131,  131,
      131,  131,  131,  131,  131,  131,  131,  131,  131,  131,
      131,  131,  131,  131,  131,  131,  131,  131,  131,    2,
        2,    3,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    4,    0,    0,  132,    0,    1,  128,
      127,  129,  124,  123,  125,  131,  131,  131,  131,  131,
      107,  131,  108,  131,  131,  131,  131,  131,  131,  131,

      131,  131,  131,  131,  131,  131,  131,  131,  131,  131,
      131,  131,  131,  109,  131,  110,  111,  131,  131,  131,
      131,  131,  131,  131,  131,  131,  131,  131,  112,  113,
      114,  131,  131,  131,  131,  131,  131,  131,  131,  131,
      131,  131,  131,  131,  131,  131,  115,  131,  131,  131,
      131,  131,  131,  131,  131,    2,    2,    2,    2,    2,
        2,    1,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,

        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,  130,  132,
      127,   94,  131,   95,  131,  131,   96,   97,  131,  131,
      131,  131,  131,  131,  131,  131,  131,  131,   98,  131,
      131,  131,  131,  131,  131,  131,  131,  131,  131,  131,
      131,  131,  131,  131,   99,  131,  131,  131,  131,  131,
      131,  131,  131,  131,  131,  131,  131,  100,  131,  131,
      101,  131,  131,  131,  131,  131,  131,  131,  131,  102,

      131,  131,  103,  131,  131,  131,  131,  131,  131,  131,
      131,  131,  131,  131,  104,  131,  131,  131,  131,  105,
      131,  131,  131,  131,  106,  131,  131,  131,  131,  121,
      131,  131,  131,  131,  131,  131,  131,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,

        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,  131,  131,  131,  131,
      131,   72,  131,  120,  131,  131,  131,  131,  131,  131,
       73,  131,  131,  131,  131,   74,  131,  131,  131,   75,
      131,  131,  131,  131,  131,   76,   77,   78,  131,  131,
       79,  131,   80,  131,  131,  131,  131,  131,  131,   81,
      131,   82,   83,   84,  131,   85,  131,  131,  131,  131,
       86,  131,  131,  131,  131,  131,   87,   88,  131,  131,

      131,  131,  131,  131,  131,   89,  131,  131,  131,  131,
       90,   91,  131,  131,  131,  131,  131,  131,  131,  131,
      131,   92,  131,  131,   93,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,

        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,   54,   55,  131,  131,  131,  131,
      122,  131,  131,  131,   56,  131,  131,  131,  131,   57,
      131,  131,  131,  131,  131,  131,  131,  131,  131,   58,
      131,  131,  131,   59,   60,  131,  131,  131,  131,   61,
       62,   63,   64,  131,  131,  131,   65,   66,  131,  131,
      131,  131,  131,   67,  131,  131,  131,  131,   68,  131,
      131,  131,  131,   69,  131,  131,  131,   70,  131,  131,
      131,   71,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,

        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
      131,   30,  131,  131,   31,  131,   32,  131,  131,  131,
       33,   34,  131,   35,   36,   37,  131,   38,  131,   39,
       40,  131,   41,   42,  131,  131,   43,  131,  131,   44,
      131,  131,  131,   45,  131,   46,   47,   48,  131,   49,
      131,  131,  131,  131,   50,   51,   52,   53,  131,  131,

        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
       14,   15,   16,   17,   18,  131,  131,   19,  131,   20,
       21,   22,   23,  131,   24,  131,  131,   25,   26,  131,
       27,   28,  131,  131,  119,  131,  118,   29,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,

        2,    2,    2,    2,    2,    2,  116,  131,   10,  131,
       11,  131,   12,  131,  131,   13,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,  117,  131,    7,  131,
        8,    9,    2,    2,    2,    2,    2,    2,    5,    6,
        2,    2,    0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    1,    4,    1,    1,    5,    1,    6,    5,
        5,    5,    5,    5,    7,    8,    5,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    5,    5,   10,
       11,   12,    5,    1,   13,   14,   15,   16,   17,   18,
       19,   20,   21,   22,   23,   24,   25,   26,   27,   28,
       29,   30,   31,   32,   33,   34,   35,   36,   37,   38,
        1,   39,    1,    5,   40,    1,   41,   42,   43,   44,

       45,   46,   47,   48,   49,   50,   51,   52,   53,   54,
       55,   56,   57,   58,   59,   60,   61,   62,   63,   64,
       65,   66,    5,    1,    5,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[67] =
    {   0,
        1,    1,    2,    3,    1,    1,    1,    1,    4,    1,
        1,    1,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    1,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4
    } ;

static yyconst flex_int16_t yy_base[951] =
    {   0,
        0,    0,   66,    0,  369, 3769,  131,  133,    0, 3769,
      131,  332,  323,  130,  129,  319,  155,  127,  202,  249,
      116,  127,  125,  146,  143,  123,  139,  189,  145,  185,
      195,  207,    0,  206,  293,  337,  241,  250,  253,    0,
      140,  143,  324,    0,  152,  316,  310,  195,  224,  282,
      395,  454,  507,  560,  247,  609,  251,  316,  658,  297,
      298,  339,  310,  711,  760,  813,  353,  403,  864,  917,
      966,  457,  452,  283,  278,  248, 3769,  283, 3769,  271,
      233,  309, 3769, 3769, 3769,    0,  149,  179,  384,  401,
      202,  391,    0,  391,  327,  451,  408,  190,  198,  494,

      315,  244,  383,  414,  511,  443,  446,  453,  457,  455,
      456,  454,  505,    0,  458,  552,  461,  500,  486,  511,
      518,  548,  500,  516,  515,  542,  552,  566,  562,    0,
      566,  553,  556,  575,  578,  591,  573,  573,  600,  573,
      573,  606,  615,  609,  613,  609,  609,  607,  620,  627,
      661,  629,  656,  634,  648,    0,  323,  204,  440,    0,
      649,    0,  196,  191,  419,    0,    0,    0,  668,  681,
      690,  743,  724,  714,  764,  726,  796,  757,  823,  825,
      770,  799, 1019,  852,  881,  868,  857, 1070,  891,  915,
      924,  933,  950,  954,  959, 1009,  747, 1010, 1120,  997,

      996,  859, 1012, 1063, 1080, 1064, 1066, 1073, 1095, 1117,
     1126, 1131, 1059, 1156, 1149, 1153, 1171, 1178, 1193, 1188,
     1200, 1217, 1205, 1214, 1244, 1249, 1247, 1251, 1276, 1280,
     1273, 1302, 1311, 1316, 1333, 1329, 1113, 1332, 3769,  693,
      154,    0,  674,    0,  675,  669,    0,    0,  675,  699,
      759,  785,  787,  808,  805,  807,  880,  868,    0,  971,
      901,  922, 1326,  922,  923,  942,  986, 1011, 1031, 1130,
     1144, 1130, 1204, 1222,    0, 1221, 1231, 1261, 1274, 1304,
     1311, 1308, 1312, 1335, 1356, 1358, 1362, 1366, 1347, 1356,
        0, 1352, 1371, 1368, 1379, 1383, 1380, 1367, 1369,    0,

     1380, 1375, 1375, 1392, 1396, 1406, 1388, 1387, 1393, 1407,
     1390, 1405, 1409, 1412,    0, 1396, 1403, 1404, 1415,    0,
     1412, 1412, 1428, 1412,    0, 1425, 1429, 1425, 1442,    0,
     1434, 1428, 1447, 1430, 1437, 1440, 1451,    0,  703,  144,
     1457, 1458, 1459, 1464, 1468, 1470, 1474, 1489, 1493, 1508,
     1525, 1520, 1526, 1514, 1529, 1535, 1550, 1547, 1569, 1579,
     1580, 1581, 1590, 1585, 1591, 1615, 1621, 1626, 1603, 1644,
     1645, 1648, 1647, 1657, 1658, 1681, 1682, 1684, 1711, 1713,
     1720, 1723, 1698, 1671, 1724, 1727, 1750, 1737, 1749, 1734,
     1764, 1767, 1776, 1774, 1793, 1803, 1790, 1800, 1791, 1825,

     1827, 1829, 1826, 1830, 1865, 1863, 1856, 1862, 1892, 1866,
     1899, 1859, 1897, 1901, 1906, 1903, 1922, 1928, 1933, 1944,
     1958, 1939, 1957, 1960, 1962, 1984, 1969, 1995, 1993, 2000,
     1998, 2027, 2011, 2030, 2036, 2051, 1478, 1491, 1490, 1553,
     1602,    0, 1629,    0, 1646, 1653, 1649, 1682, 1795, 1817,
        0, 1829, 1899, 1923, 1978,    0, 1977, 2012, 2026,    0,
     2023, 2024, 2022, 2025, 2056,    0,    0,    0, 2064, 2054,
        0, 2058,    0, 2059, 2057, 2053, 2061, 2063, 2079,    0,
     2076,    0,    0,    0, 2070,    0, 2079, 2087, 2075, 2077,
        0, 2093, 2094, 2083, 2088, 2095,    0,    0, 2109, 2110,

     2099, 2095, 2095, 2104, 2118,    0, 2121, 2119, 2125, 2116,
        0, 2113, 2124, 2132, 2123, 2121, 2143, 2126, 2140, 2143,
     2142,    0, 2130, 2147,    0, 2148, 2159, 2157, 2178, 2162,
     2164, 2197, 2166, 2195, 2208, 2211, 2218, 2220, 2202, 2235,
     2247, 2237, 2249, 2274, 2251, 2260, 2287, 2289, 2273, 2300,
     2303, 2290, 2312, 2329, 2313, 2316, 2326, 2347, 2345, 2330,
     2359, 2352, 2366, 2369, 2383, 2385, 2388, 2419, 2392, 2415,
     2418, 2424, 2425, 2441, 2434, 2448, 2437, 2474, 2451, 2458,
     2477, 2470, 2480, 2491, 2487, 2481, 2510, 2517, 2524, 2526,
     2527, 2536, 2549, 2533, 2543, 2550, 2576, 2566, 2573, 2567,

     2589, 2602, 2590, 2619, 2607, 2629, 2626, 2640, 2643, 2645,
     2644, 2659, 2658, 2661,    0,    0, 2131, 2181, 2204, 2214,
        0, 2267, 2352, 2363,    0, 2385, 2389, 2507, 2592,    0,
     2590, 2643, 2662, 2666, 2667, 2668, 2670, 2681, 2688,    0,
     2694, 2684, 2683,    0,    0, 2684, 2700, 2687, 2695,    0,
        0,    0,    0, 2708, 2702, 2693,    0,    0, 2714, 2702,
     2703, 2717, 2714,    0, 2723, 2705, 2722, 2726, 2717, 2721,
     2720, 2728, 2742,    0, 2739, 2741, 2741,    0, 2737, 2756,
     2757,    0, 2754, 2755, 2756, 2758, 2770, 2772, 2773, 2787,
     2809, 2788, 2794, 2830, 2813, 2825, 2811, 2828, 2849, 2843,

     2846, 2855, 2867, 2870, 2879, 2868, 2902, 2884, 2906, 2911,
     2905, 2923, 2929, 2940, 2938, 2942, 2965, 2941, 2947, 2974,
     2976, 2991, 2978, 2992, 2997, 3001, 3003, 3014, 3028, 3010,
     3032, 3033, 3047, 3050, 3074, 3063, 3068, 3072, 3084, 3077,
     3119, 3089, 3103, 3108, 3106, 3118, 3130, 3133, 3145, 3140,
     2757,    0, 2752, 2810, 2798, 2827,    0, 2872, 2891, 2920,
        0,    0, 2947,    0,    0,    0, 2980,    0, 3007,    0,
        0, 2998,    0,    0, 3108, 3124,    0, 3135, 3152,    0,
     3140, 3159, 3142,    0, 3165, 3150,    0,    0, 3164,    0,
     3178, 3179, 3162, 3164,    0,    0,    0,    0, 3167, 3175,

     3184, 3186, 3189, 3195, 3211, 3213, 3196, 3222, 3229, 3245,
     3218, 3247, 3254, 3251, 3256, 3258, 3263, 3269, 3272, 3285,
     3287, 3290, 3294, 3296, 3308, 3303, 3312, 3319, 3341, 3325,
     3343, 3346, 3348, 3350, 3357, 3379, 3352, 3362, 3381, 3364,
     3406, 3408, 3403, 3420, 3397, 3413, 3419, 3422, 3424, 3453,
        0,    0,    0,    0,    0, 3200, 3244,    0, 3286,    0,
        0,    0,    0, 3361,    0, 3402, 3438,    0,    0, 3434,
        0,    0, 3442, 3449,    0, 3458,    0,    0, 3459, 3462,
     3464, 3469, 3471, 3474, 3480, 3475, 3478, 3496, 3505, 3509,
     3511, 3515, 3514, 3527, 3518, 3530, 3532, 3536, 3545, 3549,

     3554, 3581, 3570, 3571, 3572, 3576, 3506, 3568,    0, 3570,
        0, 3573,    0, 3567, 3577,    0, 3607, 3608, 3605, 3622,
     3606, 3632, 3610, 3639, 3646, 3641,    0, 3603,    0, 3598,
        0,    0, 3643, 3644, 3648, 3679, 3662, 3675,    0,    0,
     3677, 3678, 3769, 3744, 3748,  147, 3752, 3756, 3760, 3764
    } ;

static yyconst flex_int16_t yy_def[951] =
    {   0,
      943,    1,  943,    3,  943,  943,  943,  943,  944,  943,
      945,  943,  943,  943,  943,  943,  946,  946,  946,  946,
      946,  946,  946,  946,  946,  946,  946,  946,  946,  946,
      946,  946,  946,  946,  946,  946,  946,  946,  946,  947,
      947,  943,  948,  947,  949,  947,  947,  947,  947,  947,
      950,  950,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,  943,  944,  945,  943,  945,  943,  943,
      943,  943,  943,  943,  943,  946,  946,  946,  946,  946,
      946,  946,  946,  946,  946,  946,  946,  946,  946,  946,

      946,  946,  946,  946,  946,  946,  946,  946,  946,  946,
      946,  946,  946,  946,  946,  946,  946,  946,  946,  946,
      946,  946,  946,  946,  946,  946,  946,  946,  946,  946,
      946,  946,  946,  946,  946,  946,  946,  946,  946,  946,
      946,  946,  946,  946,  946,  946,  946,  946,  946,  946,
      946,  946,  946,  946,  946,  947,  947,  948,  949,  947,
      949,  947,  947,  947,  947,  947,  947,  947,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,

       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,  943,  945,
      943,  946,  946,  946,  946,  946,  946,  946,  946,  946,
      946,  946,  946,  946,  946,  946,  946,  946,  946,  946,
      946,  946,  946,  946,  946,  946,  946,  946,  946,  946,
      946,  946,  946,  946,  946,  946,  946,  946,  946,  946,
      946,  946,  946,  946,  946,  946,  946,  946,  946,  946,
      946,  946,  946,  946,  946,  946,  946,  946,  946,  946,

      946,  946,  946,  946,  946,  946,  946,  946,  946,  946,
      946,  946,  946,  946,  946,  946,  946,  946,  946,  946,
      946,  946,  946,  946,  946,  946,  946,  946,  946,  946,
      946,  946,  946,  946,  946,  946,  946,  947,  949,  947,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,

       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,  946,  946,  946,  946,
      946,  946,  946,  946,  946,  946,  946,  946,  946,  946,
      946,  946,  946,  946,  946,  946,  946,  946,  946,  946,
      946,  946,  946,  946,  946,  946,  946,  946,  946,  946,
      946,  946,  946,  946,  946,  946,  946,  946,  946,  946,
      946,  946,  946,  946,  946,  946,  946,  946,  946,  946,
      946,  946,  946,  946,  946,  946,  946,  946,  946,  946,

      946,  946,  946,  946,  946,  946,  946,  946,  946,  946,
      946,  946,  946,  946,  946,  946,  946,  946,  946,  946,
      946,  946,  946,  946,  946,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,

       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,  946,  946,  946,  946,  946,  946,
      946,  946,  946,  946,  946,  946,  946,  946,  946,  946,
      946,  946,  946,  946,  946,  946,  946,  946,  946,  946,
      946,  946,  946,  946,  946,  946,  946,  946,  946,  946,
      946,  946,  946,  946,  946,  946,  946,  946,  946,  946,
      946,  946,  946,  946,  946,  946,  946,  946,  946,  946,
      946,  946,  946,  946,  946,  946,  946,  946,  946,  946,
      946,  946,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,

       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
      946,  946,  946,  946,  946,  946,  946,  946,  946,  946,
      946,  946,  946,  946,  946,  946,  946,  946,  946,  946,
      946,  946,  946,  946,  946,  946,  946,  946,  946,  946,
      946,  946,  946,  946,  946,  946,  946,  946,  946,  946,
      946,  946,  946,  946,  946,  946,  946,  946,  946,  946,

       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
      946,  946,  946,  946,  946,  946,  946,  946,  946,  946,
      946,  946,  946,  946,  946,  946,  946,  946,  946,  946,
      946,  946,  946,  946,  946,  946,  946,  946,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,

       52,   52,   52,   52,   52,   52,  946,  946,  946,  946,
      946,  946,  946,  946,  946,  946,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,  946,  946,  946,  946,
      946,  946,   52,   52,   52,   52,   52,   52,  946,  946,
       52,   52,    0,  943,  943,  943,  943,  943,  943,  943
    } ;

static yyconst flex_int16_t yy_nxt[3836] =
    {   0,
        6,    7,    8,    9,   10,   11,   12,   13,   14,   15,
       10,   16,   17,   18,   19,   20,   21,   22,   23,   24,
       25,   26,   27,   28,   29,   30,   31,   32,   33,   34,
       35,   36,   37,   38,   39,   33,   33,   33,    6,    6,
       17,   18,   19,   20,   21,   22,   23,   24,   25,   26,
       27,   28,   29,   30,   31,   32,   33,   34,   35,   36,
       37,   38,   39,   33,   33,   33,   40,   41,   42,   43,
       44,   45,   46,   47,   48,   49,   44,   50,   51,   52,
       53,   54,   55,   56,   57,   58,   59,   60,   61,   62,
       63,   64,   65,   66,   67,   68,   69,   70,   71,   72,

       73,   67,   67,   67,   40,   40,   51,   52,   53,   54,
       55,   56,   57,   58,   59,   60,   61,   62,   63,   64,
       65,   66,   67,   68,   69,   70,   71,   72,   73,   67,
       67,   67,   74,   74,   74,   74,   77,   81,   82,   83,
       84,  157,   74,   92,   74,   74,  104,  106,  110,  118,
       86,  105,  340,  107,  111,  119,  108,  160,  112,  109,
      114,  123,  241,   93,  242,  124,  113,  115,  116,   78,
       87,   92,   88,  117,  104,  106,  110,  118,   89,  105,
       90,  107,  111,  119,  108,   91,  112,  109,  114,  123,
      161,   93,  242,  124,  113,  115,  116,  125,   87,  340,

       88,  117,  164,  165,  163,  120,   89,  338,   90,  121,
      243,  126,  129,   91,   94,  122,  248,  127,  128,  133,
      130,   95,  136,  259,  131,  125,  137,  132,   96,  260,
      134,   97,   98,  120,  166,  167,  135,  121,  243,  126,
      129,  241,   94,  122,  248,  127,  128,  133,  130,   95,
      136,  259,  131,   77,  137,  132,   96,  260,  134,   97,
       98,   99,  152,  169,  135,  100,  149,  169,  150,  101,
      153,  151,  154,  155,  193,  102,  267,  187,  103,   80,
      194,  239,  188,  169,   74,   74,   78,  169,  240,   99,
      152,  169,  168,  100,  149,  169,  150,  101,  153,  151,

      154,  155,  193,  102,  267,  187,  103,  138,  194,  139,
      188,  169,  140,  169,  202,  169,   81,   82,  163,  141,
      142,   78,  162,  201,  157,   74,  206,  156,  195,   85,
      207,   80,  169,  169,  169,  138,  196,  139,   79,  253,
      140,  169,  202,  254,  265,  266,  169,  141,  142,  143,
      144,  201,  169,  145,  206,  203,  195,  146,  207,  204,
      169,  169,  169,  147,  196,  205,  148,  253,  943,  169,
      943,  254,  265,  266,  169,  169,  943,  143,  144,  943,
      169,  145,  943,  203,  943,  146,  943,  204,  943,  169,
      943,  147,  943,  205,  148,  156,  156,  169,  156,  156,

      156,  156,  156,  169,  156,  156,  156,  244,  249,  268,
      170,  943,  171,  246,  251,  245,  247,  169,  172,  219,
      173,  252,  250,  220,  257,  174,  164,  165,  269,  943,
      943,  943,  943,  156,  258,  244,  249,  268,  170,  169,
      171,  246,  251,  245,  247,  160,  172,  219,  173,  252,
      250,  220,  257,  174,  156,  156,  269,  156,  156,  156,
      156,  156,  258,  156,  156,  156,  274,  169,  169,  235,
      175,  237,  238,  169,  255,  275,  256,  236,  161,  276,
      277,  278,  279,  943,  280,  284,  289,  281,  169,  943,
      176,  943,  156,  169,  274,  943,  169,  235,  175,  237,

      238,  169,  255,  275,  256,  236,  261,  276,  277,  278,
      279,  262,  280,  284,  289,  281,  169,  263,  176,  177,
      290,  169,  291,  169,  264,  270,  178,  271,  292,  297,
      282,  272,  943,  179,  261,  283,  180,  181,  273,  262,
      293,  298,  294,  169,  943,  263,  299,  177,  290,  943,
      291,  169,  264,  270,  178,  271,  292,  297,  282,  272,
      295,  179,  296,  283,  180,  181,  273,  285,  293,  298,
      294,  169,  182,  300,  299,  301,  183,  286,  302,  303,
      184,  304,  287,  288,  305,  306,  185,  307,  295,  186,
      296,  312,  313,  943,  308,  285,  169,  943,  309,  316,

      182,  300,  317,  301,  183,  286,  302,  303,  184,  304,
      287,  288,  305,  306,  185,  307,  310,  186,  318,  312,
      313,  311,  308,  314,  169,  169,  309,  316,  319,  189,
      317,  315,  320,  323,  324,  190,  325,  321,  191,  326,
      327,  192,  329,  328,  310,  169,  318,  943,  322,  311,
      336,  314,  332,  169,  339,  943,  319,  189,  333,  315,
      320,  323,  324,  190,  325,  321,  191,  326,  327,  192,
      329,  328,  334,  169,  169,  197,  322,  330,  336,  337,
      332,  331,  198,  199,  169,  335,  333,  161,  200,  943,
      437,  438,  439,  943,  169,  943,  341,  169,   77,  943,

      334,  440,  169,  197,  169,  330,  169,  337,  160,  331,
      198,  199,  169,  335,  943,  943,  200,  169,  437,  438,
      439,  342,  169,  208,  341,  169,  169,  169,  347,  440,
      169,   78,  169,  441,  169,  943,  345,  209,  943,  346,
      169,  161,  169,  210,  211,  169,  943,  169,  943,  342,
      169,  208,  943,  943,  169,  169,  347,  943,  169,  169,
      169,  441,  169,  169,  345,  209,  343,  346,  169,  352,
      169,  210,  211,  353,  344,  169,  169,  212,  169,  169,
      169,  348,  442,  169,  943,  213,  169,  169,  169,  214,
      169,  169,  215,  169,  343,  349,  169,  352,  943,  443,

      169,  353,  344,  358,  169,  212,  169,  169,  169,  348,
      442,  169,  169,  213,  169,  169,  444,  214,  943,  350,
      215,  169,  445,  349,  169,  216,  351,  443,  169,  169,
      359,  358,  169,  943,  169,  169,  217,  446,  447,  169,
      169,  356,  218,  169,  444,  943,  354,  350,  355,  169,
      445,  357,  943,  216,  351,  943,  943,  169,  359,  169,
      169,  169,  943,  169,  217,  446,  447,  169,  169,  356,
      218,  368,  943,  169,  354,  169,  355,  169,  221,  357,
      222,  364,  365,  223,  169,  943,  943,  169,  169,  169,
      224,  225,  448,  169,  367,  390,  169,  169,  449,  368,

      169,  169,  943,  169,  169,  943,  221,  169,  222,  364,
      365,  223,  169,  366,  373,  943,  169,  169,  224,  225,
      448,  169,  367,  390,  452,  169,  449,  169,  169,  226,
      227,  169,  169,  228,  453,  169,  456,  229,  943,  457,
      169,  366,  373,  230,  374,  169,  231,  943,  943,  169,
      375,  169,  452,  169,  943,  169,  376,  226,  227,  169,
      169,  228,  453,  943,  456,  229,  169,  457,  169,  169,
      169,  230,  374,  458,  231,  169,  377,  169,  375,  169,
      378,  169,  169,  450,  376,  943,  169,  451,  169,  379,
      169,  232,  380,  233,  169,  169,  234,  169,  169,  459,

      943,  458,  169,  169,  377,  943,  943,  943,  378,  943,
      169,  450,  169,  169,  169,  451,  389,  379,  169,  232,
      380,  233,  388,  169,  234,  169,  169,  459,  169,  391,
      169,  360,  169,  169,  381,  169,  361,  383,  460,  382,
      169,  169,  362,  461,  389,  169,  169,  943,  169,  363,
      388,  943,  943,  169,  169,  169,  169,  391,  943,  360,
      169,  169,  381,  169,  361,  383,  460,  382,  943,  943,
      362,  461,  943,  169,  169,  169,  169,  363,  943,  169,
      169,  943,  169,  169,  369,  392,  370,  393,  943,  169,
      371,  397,  394,  396,  395,  169,  169,  372,  943,  169,

      169,  943,  169,  169,  398,  943,  169,  169,  169,  169,
      169,  169,  369,  392,  370,  393,  169,  169,  371,  397,
      394,  396,  395,  169,  169,  372,  399,  169,  169,  435,
      169,  169,  398,  169,  169,  384,  169,  169,  401,  169,
      400,  943,  169,  943,  169,  385,  462,  169,  402,  169,
      386,  387,  943,  169,  399,  943,  169,  435,  463,  169,
      464,  169,  169,  384,  169,  169,  401,  169,  400,  169,
      169,  403,  169,  385,  462,  169,  402,  169,  386,  387,
      404,  169,  405,  406,  169,  169,  463,  169,  464,  169,
      169,  943,  169,  169,  407,  169,  943,  169,  408,  403,

      169,  943,  943,  943,  169,  943,  411,  169,  404,  169,
      405,  406,  943,  169,  169,  169,  169,  169,  409,  412,
      169,  169,  407,  410,  169,  943,  408,  465,  943,  169,
      169,  415,  169,  169,  411,  169,  169,  169,  466,  943,
      413,  169,  169,  416,  169,  467,  409,  412,  414,  169,
      169,  410,  169,  169,  468,  465,  417,  169,  169,  415,
      169,  169,  418,  169,  169,  169,  466,  169,  413,  169,
      419,  416,  943,  467,  469,  420,  414,  943,  169,  943,
      169,  169,  468,  169,  417,  169,  421,  169,  169,  169,
      418,  169,  169,  169,  943,  169,  169,  943,  419,  943,

      422,  423,  469,  420,  943,  425,  470,  424,  169,  169,
      943,  169,  169,  169,  421,  169,  169,  169,  169,  943,
      169,  943,  426,  471,  169,  427,  428,  169,  422,  423,
      943,  472,  429,  425,  470,  424,  430,  169,  169,  473,
      169,  943,  454,  474,  169,  433,  169,  169,  169,  169,
      426,  471,  169,  427,  428,  169,  431,  455,  434,  472,
      429,  475,  432,  436,  430,  169,  169,  473,  169,  169,
      454,  474,  476,  433,  477,  169,  169,  169,  478,  481,
      169,  482,  479,  483,  431,  455,  434,  484,  485,  475,
      432,  436,  480,  169,  486,  487,  169,  169,  488,  489,

      476,  490,  477,  491,  492,  493,  478,  481,  494,  482,
      479,  483,  495,  498,  499,  484,  485,  500,  496,  501,
      480,  502,  486,  487,  503,  504,  488,  489,  505,  490,
      506,  491,  492,  493,  507,  508,  494,  497,  509,  510,
      495,  498,  499,  511,  512,  500,  496,  501,  513,  502,
      514,  517,  503,  504,  518,  515,  505,  516,  506,  519,
      520,  521,  507,  508,  522,  497,  509,  510,  523,  524,
      525,  511,  512,  169,  526,  169,  513,  943,  514,  517,
      527,  943,  518,  515,  169,  516,  169,  519,  520,  521,
      169,  528,  522,  169,  169,  169,  523,  524,  525,  943,

      169,  169,  526,  169,  169,  169,  169,  615,  527,  169,
      169,  943,  169,  943,  169,  529,  943,  943,  169,  528,
      616,  169,  169,  169,  169,  169,  617,  530,  169,  169,
      169,  531,  169,  169,  169,  615,  169,  169,  169,  532,
      534,  169,  169,  529,  169,  169,  535,  537,  616,  533,
      169,  169,  169,  169,  617,  530,  169,  169,  169,  531,
      536,  169,  169,  169,  169,  169,  169,  532,  534,  169,
      169,  169,  169,  169,  535,  537,  943,  533,  169,  169,
      538,  539,  618,  169,  169,  540,  169,  943,  536,  169,
      169,  169,  542,  169,  169,  169,  169,  543,  943,  169,

      943,  546,  541,  943,  545,  169,  169,  169,  538,  539,
      618,  169,  544,  540,  169,  169,  169,  169,  619,  551,
      542,  169,  547,  169,  169,  543,  169,  169,  548,  546,
      541,  169,  545,  169,  169,  169,  943,  169,  550,  169,
      544,  620,  169,  169,  169,  169,  619,  551,  549,  169,
      547,  169,  943,  943,  169,  169,  548,  169,  552,  169,
      169,  169,  169,  555,  169,  169,  550,  169,  621,  620,
      169,  554,  943,  169,  169,  553,  549,  622,  623,  169,
      169,  169,  556,  169,  169,  169,  552,  565,  169,  169,
      169,  555,  169,  169,  169,  558,  621,  169,  169,  554,

      169,  169,  169,  553,  557,  622,  623,  169,  169,  169,
      556,  169,  169,  624,  169,  565,  559,  169,  169,  943,
      169,  169,  169,  558,  564,  169,  169,  169,  169,  169,
      560,  943,  557,  561,  169,  169,  169,  943,  943,  169,
      566,  624,  169,  567,  559,  169,  169,  169,  169,  169,
      169,  562,  564,  169,  563,  169,  169,  169,  560,  169,
      169,  561,  169,  169,  169,  169,  568,  169,  566,  570,
      169,  567,  943,  169,  571,  169,  569,  169,  169,  562,
      169,  169,  563,  573,  169,  169,  169,  169,  169,  575,
      169,  169,  169,  169,  568,  572,  574,  570,  169,  943,

      169,  169,  571,  169,  569,  576,  169,  169,  169,  169,
      169,  573,  169,  169,  169,  943,  169,  575,  169,  169,
      169,  577,  578,  572,  574,  625,  169,  169,  169,  169,
      626,  169,  579,  576,  169,  169,  169,  169,  169,  169,
      169,  169,  583,  169,  169,  169,  584,  169,  580,  577,
      578,  943,  627,  625,  169,  169,  581,  169,  626,  582,
      579,  169,  169,  169,  169,  169,  169,  169,  943,  169,
      583,  169,  169,  169,  584,  593,  580,  585,  169,  169,
      627,  169,  169,  588,  581,  943,  589,  582,  587,  169,
      169,  169,  169,  169,  169,  169,  586,  591,  169,  169,

      169,  169,  169,  593,  590,  585,  169,  169,  169,  169,
      169,  588,  943,  594,  589,  169,  587,  169,  592,  169,
      169,  943,  169,  169,  586,  591,  169,  169,  169,  169,
      169,  628,  590,  169,  596,  169,  169,  169,  169,  169,
      595,  594,  169,  169,  169,  169,  592,  169,  943,  169,
      169,  598,  943,  597,  629,  601,  169,  943,  169,  628,
      169,  169,  596,  169,  169,  169,  169,  169,  595,  169,
      169,  599,  169,  169,  169,  169,  169,  169,  169,  598,
      169,  597,  629,  601,  943,  169,  169,  603,  169,  600,
      630,  631,  169,  602,  169,  606,  169,  169,  169,  599,

      169,  169,  169,  169,  169,  169,  169,  607,  169,  169,
      604,  169,  605,  169,  169,  603,  169,  600,  630,  631,
      169,  602,  169,  606,  169,  608,  169,  169,  169,  169,
      609,  169,  632,  169,  169,  607,  169,  169,  604,  169,
      605,  610,  169,  169,  169,  611,  169,  169,  169,  633,
      634,  635,  169,  608,  636,  169,  637,  169,  609,  169,
      632,  612,  169,  169,  169,  613,  169,  169,  638,  610,
      614,  169,  169,  611,  169,  169,  639,  633,  634,  635,
      169,  640,  636,  641,  637,  642,  643,  169,  644,  612,
      645,  169,  646,  613,  169,  169,  638,  647,  614,  649,

      169,  650,  651,  652,  639,  653,  654,  655,  648,  640,
      656,  641,  657,  642,  643,  169,  644,  658,  645,  659,
      646,  660,  661,  662,  663,  647,  664,  649,  665,  650,
      651,  652,  666,  653,  654,  655,  648,  667,  656,  668,
      657,  669,  670,  671,  672,  658,  673,  659,  674,  660,
      661,  662,  663,  675,  664,  676,  665,  677,  678,  679,
      666,  680,  681,  682,  169,  667,  943,  668,  751,  669,
      670,  671,  672,  169,  673,  169,  674,  683,  687,  943,
      169,  675,  169,  676,  169,  677,  678,  679,  684,  680,
      681,  682,  169,  685,  169,  169,  751,  752,  169,  943,

      169,  169,  169,  169,  943,  683,  687,  686,  169,  688,
      169,  169,  169,  169,  169,  694,  684,  689,  169,  943,
      753,  685,  169,  169,  169,  752,  169,  169,  169,  754,
      169,  169,  690,  169,  169,  686,  169,  688,  169,  169,
      691,  169,  169,  694,  169,  689,  169,  169,  753,  692,
      693,  169,  169,  169,  169,  169,  169,  754,  943,  169,
      690,  169,  169,  169,  169,  169,  169,  169,  691,  696,
      695,  169,  169,  169,  699,  169,  169,  692,  693,  169,
      697,  169,  169,  169,  169,  169,  698,  169,  943,  169,
      169,  169,  755,  169,  943,  169,  169,  696,  695,  169,

      943,  169,  699,  169,  169,  169,  169,  700,  697,  169,
      169,  169,  701,  169,  698,  169,  169,  169,  169,  169,
      755,  943,  704,  169,  169,  169,  169,  702,  169,  169,
      703,  169,  169,  169,  169,  700,  169,  169,  169,  169,
      701,  706,  169,  705,  169,  169,  169,  169,  169,  169,
      704,  169,  169,  169,  169,  702,  169,  169,  703,  707,
      169,  169,  169,  169,  169,  169,  169,  169,  169,  706,
      169,  705,  708,  169,  169,  169,  169,  169,  756,  757,
      169,  169,  169,  169,  709,  169,  943,  707,  169,  169,
      169,  169,  710,  169,  169,  169,  169,  758,  711,  169,

      708,  169,  169,  169,  169,  169,  756,  757,  169,  169,
      169,  169,  709,  169,  713,  759,  169,  714,  712,  169,
      710,  169,  943,  169,  169,  758,  711,  169,  169,  169,
      169,  169,  169,  169,  169,  169,  169,  715,  717,  943,
      169,  169,  713,  759,  943,  714,  712,  169,  716,  169,
      169,  169,  169,  720,  169,  169,  169,  169,  943,  169,
      169,  169,  169,  169,  169,  715,  717,  169,  169,  169,
      169,  719,  718,  169,  169,  943,  716,  169,  169,  169,
      722,  720,  169,  169,  169,  169,  724,  169,  169,  169,
      169,  723,  169,  169,  169,  169,  169,  169,  169,  719,

      718,  169,  169,  169,  721,  169,  169,  169,  722,  725,
      169,  727,  169,  169,  724,  169,  169,  169,  169,  723,
      726,  169,  169,  169,  169,  169,  169,  169,  943,  728,
      760,  169,  721,  169,  169,  169,  729,  725,  169,  727,
      169,  169,  169,  169,  169,  169,  169,  734,  726,  169,
      730,  169,  169,  169,  169,  169,  731,  728,  760,  169,
      169,  169,  169,  169,  729,  169,  735,  732,  169,  169,
      169,  169,  169,  733,  169,  734,  943,  169,  730,  169,
      169,  169,  737,  169,  731,  169,  169,  169,  169,  169,
      169,  169,  169,  169,  735,  732,  736,  169,  943,  738,

      169,  733,  169,  169,  741,  169,  169,  169,  761,  169,
      737,  169,  169,  169,  169,  943,  943,  169,  169,  739,
      169,  762,  740,  169,  736,  169,  169,  738,  943,  943,
      169,  169,  741,  169,  169,  169,  761,  169,  169,  743,
      169,  744,  169,  169,  742,  169,  169,  739,  943,  762,
      740,  169,  943,  169,  169,  169,  169,  745,  746,  747,
      169,  169,  169,  169,  748,  169,  169,  743,  763,  744,
      169,  169,  742,  169,  750,  169,  169,  169,  764,  169,
      169,  169,  765,  169,  169,  745,  746,  747,  169,  169,
      169,  749,  748,  169,  169,  169,  763,  169,  766,  767,

      768,  769,  750,  169,  169,  169,  764,  169,  169,  169,
      765,  770,  771,  772,  773,  774,  775,  776,  777,  749,
      778,  779,  169,  169,  780,  169,  766,  767,  768,  769,
      781,  782,  783,  784,  785,  786,  787,  788,  789,  770,
      771,  772,  773,  774,  775,  776,  777,  790,  778,  779,
      791,  792,  780,  793,  794,  795,  796,  797,  781,  782,
      783,  784,  785,  786,  787,  788,  789,  798,  799,  800,
      169,  169,  169,  851,  802,  790,  943,  852,  791,  792,
      943,  793,  794,  795,  796,  797,  803,  804,  169,  169,
      169,  169,  169,  801,  169,  798,  799,  800,  169,  169,

      169,  851,  802,  169,  807,  852,  169,  943,  169,  169,
      169,  943,  805,  943,  803,  804,  169,  169,  169,  169,
      169,  801,  169,  169,  169,  169,  853,  811,  854,  169,
      169,  169,  807,  943,  169,  806,  169,  169,  169,  809,
      805,  169,  808,  943,  169,  169,  169,  169,  810,  169,
      855,  169,  169,  169,  853,  811,  854,  169,  169,  169,
      943,  169,  814,  806,  169,  169,  169,  809,  813,  169,
      808,  815,  169,  169,  169,  169,  810,  169,  855,  169,
      812,  943,  169,  169,  169,  169,  169,  169,  819,  169,
      814,  169,  169,  169,  169,  169,  813,  943,  816,  815,

      169,  817,  856,  169,  169,  857,  169,  169,  812,  818,
      169,  169,  169,  169,  169,  169,  819,  943,  169,  169,
      169,  169,  169,  169,  821,  820,  816,  169,  169,  817,
      856,  169,  169,  857,  169,  943,  823,  818,  169,  169,
      822,  169,  169,  169,  943,  169,  169,  169,  169,  169,
      169,  858,  821,  820,  825,  169,  169,  169,  169,  169,
      943,  859,  943,  169,  823,  169,  169,  169,  822,  169,
      169,  824,  826,  169,  169,  169,  169,  169,  169,  858,
      943,  169,  825,  169,  169,  169,  169,  169,  827,  859,
      169,  169,  169,  169,  169,  943,  860,  829,  943,  824,

      826,  169,  169,  828,  169,  169,  169,  169,  169,  169,
      169,  169,  169,  169,  169,  943,  827,  169,  169,  831,
      169,  943,  169,  830,  860,  829,  834,  169,  169,  169,
      169,  828,  861,  169,  862,  169,  169,  169,  169,  169,
      169,  169,  169,  832,  169,  169,  169,  831,  169,  169,
      169,  830,  835,  943,  834,  169,  169,  833,  169,  836,
      861,  169,  862,  169,  169,  169,  169,  169,  169,  169,
      943,  832,  169,  943,  169,  839,  169,  169,  169,  169,
      835,  837,  943,  169,  169,  833,  169,  836,  169,  838,
      169,  169,  169,  169,  169,  943,  169,  169,  840,  169,

      169,  841,  843,  839,  169,  169,  943,  169,  169,  837,
      169,  169,  169,  169,  169,  842,  169,  838,  169,  845,
      169,  169,  847,  846,  169,  169,  840,  169,  169,  841,
      843,  844,  169,  169,  169,  169,  169,  863,  169,  169,
      864,  169,  169,  842,  169,  849,  169,  845,  169,  169,
      847,  846,  169,  169,  169,  169,  169,  850,  865,  844,
      848,  169,  169,  169,  866,  863,  169,  169,  864,  169,
      169,  867,  169,  849,  169,  868,  169,  169,  869,  870,
      871,  169,  169,  169,  169,  850,  865,  872,  848,  169,
      873,  874,  866,  875,  169,  876,  877,  169,  878,  867,

      879,  943,  169,  868,  169,  169,  869,  870,  871,  169,
      943,  881,  169,  943,  880,  872,  907,  943,  873,  874,
      169,  875,  169,  876,  877,  169,  878,  169,  879,  169,
      169,  169,  169,  169,  169,  943,  883,  943,  169,  881,
      169,  882,  880,  885,  907,  169,  943,  169,  169,  169,
      169,  943,  884,  169,  169,  169,  908,  169,  169,  169,
      169,  169,  169,  169,  883,  169,  169,  169,  887,  882,
      169,  885,  169,  169,  169,  169,  886,  169,  943,  888,
      884,  169,  169,  169,  908,  169,  169,  169,  169,  169,
      169,  169,  169,  169,  169,  169,  887,  889,  169,  169,

      169,  169,  169,  169,  886,  169,  169,  888,  169,  169,
      169,  169,  169,  169,  943,  169,  169,  909,  169,  892,
      169,  169,  169,  169,  169,  889,  890,  169,  169,  169,
      169,  169,  169,  169,  169,  169,  169,  891,  169,  169,
      169,  169,  893,  943,  169,  909,  943,  892,  169,  169,
      943,  169,  169,  894,  890,  169,  169,  169,  169,  169,
      169,  169,  896,  169,  169,  891,  169,  169,  169,  169,
      893,  898,  169,  169,  895,  910,  169,  169,  169,  169,
      169,  894,  169,  169,  897,  169,  169,  169,  169,  169,
      896,  943,  169,  169,  169,  169,  169,  169,  169,  898,

      169,  169,  895,  910,  900,  169,  169,  169,  169,  899,
      169,  943,  897,  169,  169,  169,  169,  169,  901,  169,
      902,  169,  169,  169,  169,  169,  169,  943,  169,  169,
      943,  911,  900,  169,  903,  169,  169,  899,  169,  169,
      169,  169,  169,  169,  169,  169,  901,  169,  902,  169,
      169,  904,  169,  905,  912,  169,  169,  169,  169,  911,
      169,  169,  903,  169,  169,  913,  169,  169,  169,  169,
      169,  914,  169,  915,  916,  169,  906,  169,  169,  904,
      169,  905,  912,  169,  169,  169,  169,  169,  169,  169,
      917,  169,  918,  913,  169,  169,  169,  169,  169,  914,

      169,  915,  916,  169,  906,  169,  169,  169,  169,  919,
      169,  169,  169,  169,  169,  169,  169,  169,  917,  169,
      918,  169,  169,  169,  169,  169,  169,  169,  169,  920,
      169,  169,  169,  169,  922,  169,  927,  919,  169,  169,
      169,  169,  169,  169,  169,  169,  169,  169,  169,  169,
      169,  169,  169,  169,  169,  169,  921,  920,  169,  169,
      169,  169,  922,  169,  927,  169,  169,  923,  169,  169,
      169,  169,  169,  169,  169,  169,  169,  943,  169,  169,
      169,  169,  169,  924,  921,  169,  169,  926,  169,  169,
      169,  169,  169,  169,  169,  923,  169,  169,  169,  928,

      169,  929,  930,  931,  932,  925,  169,  169,  169,  169,
      943,  924,  169,  169,  169,  926,  169,  169,  169,  939,
      169,  169,  169,  169,  169,  169,  169,  928,  940,  929,
      930,  931,  932,  925,  169,  169,  169,  933,  169,  934,
      169,  169,  169,  169,  169,  169,  169,  939,  169,  169,
      169,  169,  169,  935,  169,  169,  940,  169,  169,  169,
      941,  936,  169,  943,  169,  933,  169,  934,  169,  169,
      169,  169,  169,  938,  169,  937,  169,  169,  169,  169,
      169,  935,  169,  169,  169,  169,  169,  169,  941,  936,
      169,  169,  169,  169,  169,  169,  169,  943,  169,  943,

      943,  938,  943,  937,  943,  169,  169,  169,  169,  942,
      169,  169,  169,  169,  169,  169,  943,  943,  943,  169,
      943,  169,  169,  169,  943,  943,  169,  943,  943,  943,
      943,  943,  943,  943,  943,  943,  943,  942,  943,  169,
      943,  169,  169,  169,   75,  943,  943,   75,   76,  943,
       76,   76,  156,  943,  156,  156,  158,  943,  158,  158,
      159,  943,  159,  159,  169,  943,  169,  169,    5,  943,
      943,  943,  943,  943,  943,  943,  943,  943,  943,  943,
      943,  943,  943,  943,  943,  943,  943,  943,  943,  943,
      943,  943,  943,  943,  943,  943,  943,  943,  943,  943,

      943,  943,  943,  943,  943,  943,  943,  943,  943,  943,
      943,  943,  943,  943,  943,  943,  943,  943,  943,  943,
      943,  943,  943,  943,  943,  943,  943,  943,  943,  943,
      943,  943,  943,  943,  943
    } ;

static yyconst flex_int16_t yy_chk[3836] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,

        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    7,    7,    8,    8,   11,   14,   14,   15,
       15,   41,   41,   18,   42,   42,   21,   22,   23,   26,
      946,   21,  340,   22,   23,   27,   22,   45,   24,   22,
       25,   29,  241,   18,   87,   29,   24,   25,   25,   11,
       17,   18,   17,   25,   21,   22,   23,   26,   17,   21,
       17,   22,   23,   27,   22,   17,   24,   22,   25,   29,
       45,   18,   87,   29,   24,   25,   25,   30,   17,  164,

       17,   25,   48,   48,  163,   28,   17,  158,   17,   28,
       88,   30,   31,   17,   19,   28,   91,   30,   30,   32,
       31,   19,   34,   98,   31,   30,   34,   31,   19,   99,
       32,   19,   19,   28,   49,   49,   32,   28,   88,   30,
       31,   81,   19,   28,   91,   30,   30,   32,   31,   19,
       34,   98,   31,   76,   34,   31,   19,   99,   32,   19,
       19,   20,   38,   55,   32,   20,   37,   57,   37,   20,
       38,   37,   39,   39,   57,   20,  102,   55,   20,   80,
       57,   75,   55,   55,   74,   74,   76,   57,   78,   20,
       38,   55,   50,   20,   37,   57,   37,   20,   38,   37,

       39,   39,   57,   20,  102,   55,   20,   35,   57,   35,
       55,   55,   35,   60,   61,   57,   82,   82,   47,   35,
       35,   78,   46,   60,  157,  157,   63,   43,   58,   16,
       63,   13,   58,   60,   61,   35,   58,   35,   12,   95,
       35,   60,   61,   95,  101,  101,   63,   35,   35,   36,
       36,   60,   58,   36,   63,   62,   58,   36,   63,   62,
       58,   60,   61,   36,   58,   62,   36,   95,    5,   67,
        0,   95,  101,  101,   63,   62,    0,   36,   36,    0,
       58,   36,    0,   62,    0,   36,    0,   62,    0,   67,
        0,   36,    0,   62,   36,   51,   51,   67,   51,   51,

       51,   51,   51,   62,   51,   51,   51,   89,   92,  103,
       51,    0,   51,   90,   94,   89,   90,   67,   51,   68,
       51,   94,   92,   68,   97,   51,  165,  165,  104,    0,
        0,    0,    0,   51,   97,   89,   92,  103,   51,   68,
       51,   90,   94,   89,   90,  159,   51,   68,   51,   94,
       92,   68,   97,   51,   52,   52,  104,   52,   52,   52,
       52,   52,   97,   52,   52,   52,  106,   68,   73,   72,
       52,   73,   73,   72,   96,  107,   96,   72,  159,  108,
      109,  110,  111,    0,  112,  115,  117,  112,   73,    0,
       52,    0,   52,   72,  106,    0,   73,   72,   52,   73,

       73,   72,   96,  107,   96,   72,  100,  108,  109,  110,
      111,  100,  112,  115,  117,  112,   73,  100,   52,   53,
      118,   72,  119,   53,  100,  105,   53,  105,  120,  123,
      113,  105,    0,   53,  100,  113,   53,   53,  105,  100,
      121,  124,  121,   53,    0,  100,  125,   53,  118,    0,
      119,   53,  100,  105,   53,  105,  120,  123,  113,  105,
      122,   53,  122,  113,   53,   53,  105,  116,  121,  124,
      121,   53,   54,  126,  125,  127,   54,  116,  128,  129,
       54,  131,  116,  116,  132,  133,   54,  134,  122,   54,
      122,  137,  138,    0,  135,  116,   54,    0,  135,  140,

       54,  126,  141,  127,   54,  116,  128,  129,   54,  131,
      116,  116,  132,  133,   54,  134,  136,   54,  142,  137,
      138,  136,  135,  139,   54,   56,  135,  140,  143,   56,
      141,  139,  144,  146,  146,   56,  147,  145,   56,  148,
      149,   56,  150,  149,  136,   56,  142,    0,  145,  136,
      154,  139,  152,   56,  161,    0,  143,   56,  152,  139,
      144,  146,  146,   56,  147,  145,   56,  148,  149,   56,
      150,  149,  153,   56,   59,   59,  145,  151,  154,  155,
      152,  151,   59,   59,  169,  153,  152,  161,   59,    0,
      243,  245,  246,    0,   59,    0,  170,  170,  240,    0,

      153,  249,   59,   59,  169,  151,  171,  155,  339,  151,
       59,   59,  169,  153,    0,    0,   59,  170,  243,  245,
      246,  171,   59,   64,  170,  170,  171,   64,  174,  249,
      174,  240,  169,  250,  171,    0,  173,   64,    0,  173,
      173,  339,  176,   64,   64,  170,    0,   64,    0,  171,
      174,   64,    0,    0,  171,   64,  174,    0,  174,  172,
      173,  250,  176,  197,  173,   64,  172,  173,  173,  178,
      176,   64,   64,  178,  172,   64,   65,   65,  174,  172,
      175,  175,  251,  197,    0,   65,  181,  172,  173,   65,
      176,  197,   65,  178,  172,  175,   65,  178,    0,  252,

      175,  178,  172,  181,   65,   65,  181,  172,  175,  175,
      251,  197,  177,   65,  181,  182,  253,   65,    0,  177,
       65,  178,  254,  175,   65,   66,  177,  252,  175,   66,
      182,  181,  177,    0,  181,  182,   66,  255,  256,  179,
      177,  180,   66,  182,  253,    0,  179,  177,  179,   66,
      254,  180,    0,   66,  177,    0,    0,   66,  182,  179,
      177,  180,    0,  182,   66,  255,  256,  179,  184,  180,
       66,  187,    0,  187,  179,  202,  179,   66,   69,  180,
       69,  184,  184,   69,  186,    0,    0,  179,  184,  180,
       69,   69,  257,  187,  186,  202,  184,  185,  258,  187,

       69,  187,    0,  202,  186,    0,   69,  189,   69,  184,
      184,   69,  186,  185,  189,    0,  184,  185,   69,   69,
      257,  187,  186,  202,  261,  185,  258,  189,   69,   70,
       70,  190,  186,   70,  262,  189,  264,   70,    0,  265,
      191,  185,  189,   70,  190,  185,   70,    0,    0,  192,
      191,  190,  261,   70,    0,  189,  192,   70,   70,  190,
      191,   70,  262,    0,  264,   70,  193,  265,  191,  192,
      194,   70,  190,  266,   70,  195,  193,  192,  191,  190,
      194,   70,   71,  260,  192,    0,  193,  260,  191,  195,
      194,   71,  195,   71,  193,  195,   71,  192,  194,  267,

        0,  266,   71,  195,  193,    0,    0,    0,  194,    0,
       71,  260,  201,  200,  193,  260,  201,  195,  194,   71,
      195,   71,  200,  195,   71,  196,  198,  267,  203,  203,
       71,  183,  201,  200,  196,  183,  183,  198,  268,  196,
      201,  200,  183,  269,  201,  196,  198,    0,  203,  183,
      200,    0,    0,  196,  198,  183,  203,  203,    0,  183,
      201,  200,  196,  183,  183,  198,  268,  196,    0,    0,
      183,  269,    0,  196,  198,  213,  203,  183,    0,  204,
      206,    0,  207,  183,  188,  204,  188,  204,    0,  208,
      188,  207,  205,  206,  205,  213,  205,  188,    0,  204,

      206,    0,  207,  213,  208,    0,  188,  204,  206,  208,
      207,  209,  188,  204,  188,  204,  205,  208,  188,  207,
      205,  206,  205,  213,  205,  188,  209,  204,  206,  237,
      207,  209,  208,  210,  188,  199,  199,  208,  211,  209,
      210,    0,  211,    0,  205,  199,  270,  212,  212,  237,
      199,  199,    0,  210,  209,    0,  199,  237,  271,  209,
      272,  210,  211,  199,  199,  215,  211,  212,  210,  216,
      211,  214,  214,  199,  270,  212,  212,  237,  199,  199,
      215,  210,  216,  217,  199,  215,  271,  217,  272,  216,
      211,    0,  214,  215,  218,  212,    0,  216,  218,  214,

      214,    0,    0,    0,  220,    0,  220,  217,  215,  219,
      216,  217,    0,  215,  218,  217,  221,  216,  219,  221,
      214,  223,  218,  219,  220,    0,  218,  273,    0,  219,
      224,  223,  220,  222,  220,  217,  221,  219,  274,    0,
      222,  223,  218,  224,  221,  276,  219,  221,  222,  223,
      224,  219,  220,  222,  277,  273,  225,  219,  224,  223,
      225,  222,  226,  227,  221,  226,  274,  228,  222,  223,
      227,  224,    0,  276,  278,  228,  222,    0,  224,    0,
      225,  222,  277,  227,  225,  226,  228,  228,  225,  231,
      226,  227,  229,  226,    0,  228,  230,    0,  227,    0,

      229,  229,  278,  228,    0,  231,  279,  230,  225,  231,
        0,  227,  229,  226,  228,  228,  230,  231,  232,    0,
      229,    0,  232,  280,  230,  232,  233,  233,  229,  229,
        0,  281,  234,  231,  279,  230,  234,  231,  232,  282,
      229,    0,  263,  283,  230,  236,  232,  233,  238,  235,
      232,  280,  234,  232,  233,  233,  235,  263,  236,  281,
      234,  284,  235,  238,  234,  236,  232,  282,  238,  235,
      263,  283,  285,  236,  286,  233,  238,  235,  287,  289,
      234,  290,  288,  292,  235,  263,  236,  293,  294,  284,
      235,  238,  288,  236,  295,  296,  238,  235,  297,  298,

      285,  299,  286,  301,  302,  303,  287,  289,  304,  290,
      288,  292,  305,  307,  308,  293,  294,  309,  306,  310,
      288,  311,  295,  296,  312,  313,  297,  298,  314,  299,
      316,  301,  302,  303,  317,  318,  304,  306,  319,  321,
      305,  307,  308,  322,  323,  309,  306,  310,  324,  311,
      326,  328,  312,  313,  329,  327,  314,  327,  316,  331,
      332,  333,  317,  318,  334,  306,  319,  321,  335,  336,
      337,  322,  323,  341,  342,  343,  324,    0,  326,  328,
      344,    0,  329,  327,  345,  327,  346,  331,  332,  333,
      347,  345,  334,  341,  342,  343,  335,  336,  337,    0,

      344,  341,  342,  343,  345,  348,  346,  437,  344,  349,
      347,    0,  345,    0,  346,  348,    0,    0,  347,  345,
      438,  341,  342,  343,  350,  348,  439,  349,  344,  349,
      354,  350,  345,  348,  346,  437,  352,  349,  347,  351,
      353,  351,  353,  348,  350,  355,  354,  356,  438,  352,
      354,  356,  350,  348,  439,  349,  352,  349,  354,  350,
      355,  351,  353,  358,  352,  355,  357,  351,  353,  351,
      353,  356,  350,  355,  354,  356,    0,  352,  354,  356,
      357,  359,  440,  358,  352,  359,  357,    0,  355,  351,
      353,  358,  361,  355,  357,  360,  361,  362,    0,  356,

        0,  364,  360,    0,  363,  359,  363,  365,  357,  359,
      440,  358,  362,  359,  357,  360,  361,  362,  441,  369,
      361,  364,  365,  360,  361,  362,  363,  365,  366,  364,
      360,  366,  363,  359,  363,  365,    0,  367,  368,  369,
      362,  443,  368,  360,  361,  362,  441,  369,  367,  364,
      365,  366,    0,    0,  363,  365,  366,  367,  370,  366,
      370,  371,  368,  373,  372,  367,  368,  369,  445,  443,
      368,  372,    0,  374,  375,  371,  367,  446,  447,  366,
      370,  371,  375,  373,  372,  367,  370,  384,  370,  371,
      368,  373,  372,  374,  375,  377,  445,  376,  377,  372,

      378,  374,  375,  371,  376,  446,  447,  384,  370,  371,
      375,  373,  372,  448,  383,  384,  378,  376,  377,    0,
      378,  374,  375,  377,  383,  376,  377,  379,  378,  380,
      379,    0,  376,  380,  383,  384,  381,    0,    0,  382,
      385,  448,  383,  386,  378,  376,  377,  379,  378,  380,
      390,  381,  383,  388,  382,  379,  381,  380,  379,  382,
      385,  380,  383,  386,  381,  389,  387,  382,  385,  388,
      390,  386,    0,  388,  389,  379,  387,  380,  390,  381,
      391,  388,  382,  392,  381,  389,  387,  382,  385,  394,
      394,  386,  393,  389,  387,  391,  393,  388,  390,    0,

      391,  388,  389,  392,  387,  395,  397,  399,  391,  395,
      394,  392,  393,  389,  387,    0,  398,  394,  394,  396,
      393,  396,  397,  391,  393,  449,  397,  399,  391,  395,
      450,  392,  398,  395,  397,  399,  398,  395,  394,  396,
      393,  400,  403,  401,  398,  402,  404,  396,  400,  396,
      397,    0,  452,  449,  397,  399,  401,  395,  450,  402,
      398,  400,  403,  401,  398,  402,  404,  396,    0,  400,
      403,  401,  407,  402,  404,  412,  400,  405,  408,  406,
      452,  405,  410,  407,  401,    0,  408,  402,  406,  400,
      403,  401,  407,  402,  404,  412,  405,  410,  408,  406,

      407,  405,  410,  412,  409,  405,  408,  406,  409,  405,
      410,  407,    0,  413,  408,  411,  406,  414,  411,  416,
      407,    0,  415,  412,  405,  410,  408,  406,  409,  405,
      410,  453,  409,  413,  416,  411,  409,  414,  417,  416,
      415,  413,  415,  411,  418,  414,  411,  416,    0,  419,
      415,  418,    0,  417,  454,  422,  409,    0,  417,  453,
      420,  413,  416,  411,  418,  414,  417,  416,  415,  419,
      415,  420,  418,  423,  421,  422,  424,  419,  425,  418,
      420,  417,  454,  422,    0,  427,  417,  425,  420,  421,
      455,  457,  418,  423,  421,  427,  424,  419,  425,  420,

      426,  423,  421,  422,  424,  427,  425,  428,  420,  429,
      426,  428,  426,  427,  431,  425,  430,  421,  455,  457,
      426,  423,  421,  427,  424,  430,  425,  433,  426,  429,
      431,  428,  458,  427,  431,  428,  430,  429,  426,  428,
      426,  432,  431,  432,  430,  433,  434,  433,  426,  459,
      461,  462,  435,  430,  463,  433,  464,  429,  431,  428,
      458,  434,  431,  432,  430,  435,  434,  436,  465,  432,
      436,  432,  435,  433,  434,  433,  469,  459,  461,  462,
      435,  470,  463,  472,  464,  474,  475,  436,  476,  434,
      477,  432,  478,  435,  434,  436,  465,  479,  436,  481,

      435,  485,  487,  488,  469,  489,  490,  492,  479,  470,
      493,  472,  494,  474,  475,  436,  476,  495,  477,  496,
      478,  499,  500,  501,  502,  479,  503,  481,  504,  485,
      487,  488,  505,  489,  490,  492,  479,  507,  493,  508,
      494,  509,  510,  512,  513,  495,  514,  496,  515,  499,
      500,  501,  502,  516,  503,  517,  504,  518,  519,  520,
      505,  521,  523,  524,  526,  507,    0,  508,  617,  509,
      510,  512,  513,  528,  514,  527,  515,  526,  530,    0,
      531,  516,  533,  517,  526,  518,  519,  520,  527,  521,
      523,  524,  526,  528,  529,  527,  617,  618,  530,    0,

      531,  528,  533,  527,    0,  526,  530,  529,  531,  532,
      533,  534,  526,  532,  529,  539,  527,  534,  539,    0,
      619,  528,  529,  527,  535,  618,  530,  536,  531,  620,
      533,  534,  535,  532,  537,  529,  538,  532,  539,  534,
      536,  532,  529,  539,  535,  534,  539,  536,  619,  537,
      538,  540,  535,  542,  537,  536,  538,  620,    0,  534,
      535,  532,  537,  541,  538,  543,  539,  545,  536,  542,
      541,  540,  535,  542,  546,  536,  546,  537,  538,  540,
      543,  542,  537,  541,  538,  543,  544,  545,    0,  549,
      544,  541,  622,  543,    0,  545,  546,  542,  541,  540,

        0,  542,  546,  547,  546,  548,  552,  547,  543,  549,
      544,  541,  548,  543,  544,  545,  550,  549,  544,  551,
      622,    0,  552,  547,  546,  548,  552,  550,  553,  555,
      551,  547,  556,  548,  552,  547,  550,  549,  544,  551,
      548,  554,  557,  553,  550,  554,  560,  551,  553,  555,
      552,  547,  556,  548,  552,  550,  553,  555,  551,  558,
      556,  559,  557,  558,  550,  554,  560,  551,  562,  554,
      557,  553,  559,  554,  560,  561,  553,  555,  623,  624,
      556,  559,  563,  558,  561,  564,    0,  558,  562,  559,
      557,  558,  563,  554,  560,  561,  562,  626,  564,  565,

      559,  566,  563,  561,  567,  564,  623,  624,  569,  559,
      563,  558,  561,  564,  566,  627,  562,  567,  565,  565,
      563,  566,    0,  561,  567,  626,  564,  565,  569,  566,
      563,  570,  567,  564,  571,  568,  569,  568,  570,    0,
      572,  573,  566,  627,    0,  567,  565,  565,  568,  566,
      575,  570,  567,  577,  571,  568,  569,  574,    0,  570,
      572,  573,  571,  568,  576,  568,  570,  579,  572,  573,
      575,  576,  574,  577,  580,    0,  568,  574,  575,  570,
      579,  577,  571,  568,  576,  574,  582,  579,  572,  573,
      578,  581,  576,  581,  580,  579,  583,  586,  575,  576,

      574,  577,  580,  585,  578,  574,  582,  584,  579,  583,
      578,  585,  576,  581,  582,  579,  583,  586,  578,  581,
      584,  581,  580,  585,  583,  586,  587,  584,    0,  588,
      628,  585,  578,  588,  582,  584,  589,  583,  578,  585,
      589,  581,  590,  591,  583,  586,  587,  594,  584,  594,
      590,  585,  592,  588,  587,  584,  591,  588,  628,  595,
      589,  588,  590,  591,  589,  593,  596,  592,  589,  594,
      590,  591,  592,  593,  587,  594,    0,  594,  590,  595,
      592,  588,  598,  600,  591,  593,  596,  595,  589,  599,
      590,  591,  597,  593,  596,  592,  597,  594,    0,  599,

      592,  593,  598,  600,  603,  601,  603,  595,  629,  599,
      598,  600,  597,  593,  596,    0,    0,  599,  602,  601,
      597,  631,  602,  605,  597,  601,  603,  599,    0,    0,
      598,  600,  603,  601,  603,  604,  629,  599,  602,  605,
      597,  606,  607,  605,  604,  606,  602,  601,    0,  631,
      602,  605,    0,  601,  603,  604,  608,  607,  608,  609,
      611,  610,  607,  604,  610,  606,  602,  605,  632,  606,
      607,  605,  604,  606,  613,  612,  608,  614,  633,  609,
      611,  610,  634,  604,  608,  607,  608,  609,  611,  610,
      607,  612,  610,  606,  613,  612,  632,  614,  635,  636,

      637,  638,  613,  612,  608,  614,  633,  609,  611,  610,
      634,  639,  641,  642,  643,  646,  647,  648,  649,  612,
      654,  655,  613,  612,  656,  614,  635,  636,  637,  638,
      659,  660,  661,  662,  663,  665,  666,  667,  668,  639,
      641,  642,  643,  646,  647,  648,  649,  669,  654,  655,
      670,  671,  656,  672,  673,  675,  676,  677,  659,  660,
      661,  662,  663,  665,  666,  667,  668,  679,  680,  681,
      683,  684,  685,  751,  686,  669,    0,  753,  670,  671,
        0,  672,  673,  675,  676,  677,  687,  688,  688,  689,
      683,  684,  685,  685,  686,  679,  680,  681,  683,  684,

      685,  751,  686,  690,  692,  753,  687,    0,  688,  689,
      693,    0,  690,    0,  687,  688,  688,  689,  683,  684,
      685,  685,  686,  690,  692,  691,  754,  697,  755,  695,
      693,  690,  692,    0,  687,  691,  688,  689,  693,  695,
      690,  696,  694,    0,  698,  691,  694,  697,  696,  695,
      756,  690,  692,  691,  754,  697,  755,  695,  693,  700,
        0,  696,  701,  691,  698,  699,  694,  695,  700,  696,
      694,  702,  698,  691,  694,  697,  696,  695,  756,  700,
      699,    0,  701,  703,  706,  699,  704,  700,  706,  696,
      701,  702,  698,  699,  694,  705,  700,    0,  703,  702,

      708,  704,  758,  703,  706,  759,  704,  700,  699,  705,
      701,  703,  706,  699,  704,  705,  706,    0,  707,  702,
      708,  711,  709,  705,  709,  707,  703,  710,  708,  704,
      758,  703,  706,  759,  704,    0,  711,  705,  707,  712,
      710,  711,  709,  705,    0,  713,  707,  710,  708,  711,
      709,  760,  709,  707,  715,  710,  714,  718,  716,  712,
        0,  763,    0,  719,  711,  713,  707,  712,  710,  711,
      709,  714,  716,  713,  715,  710,  714,  718,  716,  760,
        0,  717,  715,  719,  714,  718,  716,  712,  717,  763,
      720,  719,  721,  713,  723,    0,  767,  723,    0,  714,

      716,  717,  715,  722,  714,  718,  716,  722,  724,  717,
      720,  719,  721,  725,  723,    0,  717,  726,  720,  727,
      721,    0,  723,  724,  767,  723,  730,  722,  724,  717,
      728,  722,  769,  725,  772,  722,  724,  726,  720,  727,
      721,  725,  723,  728,  729,  726,  730,  727,  731,  732,
      728,  724,  731,    0,  730,  722,  724,  729,  728,  733,
      769,  725,  772,  733,  729,  726,  734,  727,  731,  732,
        0,  728,  729,    0,  730,  736,  731,  732,  728,  736,
      731,  734,    0,  733,  737,  729,  734,  733,  738,  735,
      735,  733,  729,  740,  734,    0,  731,  732,  737,  736,

      739,  738,  740,  736,  737,  742,    0,  736,  738,  734,
      735,  733,  737,  740,  734,  739,  738,  735,  735,  743,
      739,  740,  745,  744,  744,  742,  737,  736,  739,  738,
      740,  741,  737,  742,  746,  741,  738,  775,  735,  743,
      776,  740,  745,  739,  744,  748,  747,  743,  739,  748,
      745,  744,  744,  742,  746,  741,  750,  749,  778,  741,
      747,  749,  746,  741,  779,  775,  747,  743,  776,  748,
      745,  781,  744,  748,  747,  782,  750,  748,  783,  785,
      786,  749,  746,  741,  750,  749,  778,  789,  747,  749,
      791,  792,  779,  793,  747,  794,  799,  748,  800,  781,

      801,    0,  802,  782,  750,  803,  783,  785,  786,  749,
        0,  804,  807,    0,  803,  789,  856,    0,  791,  792,
      801,  793,  802,  794,  799,  803,  800,  805,  801,  806,
      802,  804,  807,  803,  811,    0,  806,    0,  808,  804,
      807,  805,  803,  809,  856,  809,    0,  805,  801,  806,
      802,    0,  808,  803,  811,  805,  857,  806,  808,  804,
      807,  810,  811,  812,  806,  809,  808,  814,  813,  805,
      813,  809,  815,  809,  816,  805,  810,  806,    0,  817,
      808,  810,  811,  812,  857,  818,  808,  814,  819,  810,
      813,  812,  815,  809,  816,  814,  813,  819,  813,  817,

      815,  820,  816,  821,  810,  818,  822,  817,  819,  810,
      823,  812,  824,  818,    0,  814,  819,  859,  813,  826,
      815,  820,  816,  821,  825,  819,  822,  817,  827,  820,
      823,  821,  824,  818,  822,  828,  819,  825,  823,  826,
      824,  830,  828,    0,  825,  859,    0,  826,  827,  820,
        0,  821,  825,  829,  822,  828,  827,  829,  823,  831,
      824,  830,  832,  828,  833,  825,  834,  826,  837,  830,
      828,  835,  825,  835,  831,  864,  827,  829,  838,  831,
      840,  829,  832,  828,  833,  829,  834,  831,  837,  830,
      832,    0,  833,  835,  834,  836,  837,  839,  838,  835,

      840,  835,  831,  864,  839,  829,  838,  831,  840,  836,
      832,    0,  833,  845,  834,  836,  837,  839,  841,  843,
      842,  835,  841,  836,  842,  839,  838,    0,  840,  846,
        0,  866,  839,  845,  843,  847,  844,  836,  848,  843,
      849,  845,  841,  836,  842,  839,  841,  843,  842,  846,
      841,  844,  842,  849,  867,  847,  844,  846,  848,  866,
      849,  845,  843,  847,  844,  870,  848,  843,  849,  850,
      841,  873,  842,  874,  876,  879,  850,  846,  880,  844,
      881,  849,  867,  847,  844,  882,  848,  883,  849,  850,
      884,  886,  885,  870,  887,  879,  885,  850,  880,  873,

      881,  874,  876,  879,  850,  882,  880,  883,  881,  887,
      884,  886,  888,  882,  887,  883,  885,  850,  884,  886,
      885,  889,  887,  879,  885,  890,  880,  891,  881,  892,
      893,  892,  888,  882,  895,  883,  907,  887,  884,  886,
      888,  889,  887,  894,  885,  890,  896,  891,  897,  889,
      893,  892,  898,  890,  895,  891,  894,  892,  893,  892,
      888,  899,  895,  894,  907,  900,  896,  898,  897,  889,
      901,  894,  898,  890,  896,  891,  897,    0,  893,  892,
      898,  899,  895,  901,  894,  900,  903,  904,  905,  899,
      901,  894,  906,  900,  896,  898,  897,  902,  901,  908,

      898,  910,  912,  914,  915,  902,  903,  904,  905,  899,
        0,  901,  906,  900,  903,  904,  905,  902,  901,  928,
      906,  919,  921,  917,  918,  902,  923,  908,  930,  910,
      912,  914,  915,  902,  903,  904,  905,  917,  920,  918,
      906,  919,  921,  917,  918,  902,  923,  928,  922,  919,
      921,  917,  918,  920,  923,  924,  930,  926,  920,  933,
      934,  922,  925,    0,  935,  917,  920,  918,  922,  919,
      921,  917,  918,  925,  923,  924,  922,  926,  937,  933,
      934,  920,  925,  924,  935,  926,  920,  933,  934,  922,
      925,  938,  935,  941,  942,  936,  922,    0,  937,    0,

        0,  925,    0,  924,    0,  926,  937,  933,  934,  936,
      925,  938,  935,  941,  942,  936,    0,    0,    0,  938,
        0,  941,  942,  936,    0,    0,  937,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  936,    0,  938,
        0,  941,  942,  936,  944,    0,    0,  944,  945,    0,
      945,  945,  947,    0,  947,  947,  948,    0,  948,  948,
      949,    0,  949,  949,  950,    0,  950,  950,  943,  943,
      943,  943,  943,  943,  943,  943,  943,  943,  943,  943,
      943,  943,  943,  943,  943,  943,  943,  943,  943,  943,
      943,  943,  943,  943,  943,  943,  943,  943,  943,  943,

      943,  943,  943,  943,  943,  943,  943,  943,  943,  943,
      943,  943,  943,  943,  943,  943,  943,  943,  943,  943,
      943,  943,  943,  943,  943,  943,  943,  943,  943,  943,
      943,  943,  943,  943,  943
    } ;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "flex_lexer.l"
/**
 * lexer
 *
 *
 */
/***************************
 ** Section 1: Definitions
 ***************************/
#line 12 "flex_lexer.l"

#include "../sql/Expr.h"
#include "bison_parser.h"
#include <stdio.h>

#define TOKEN(name) { return SQL_##name; }

/***************************
 ** Section 2: Rules
 ***************************/
/* Define the output files */
/* Make reentrant */
/* performance tweeks */
/* other flags */
/* %option nodefault */

/***************************
 ** Section 3: Rules
 ***************************/
#line 1626 "flex_lexer.cpp"

#define INITIAL 0
#define COMMENT 1

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

/* Holds the entire state of the reentrant scanner. */
struct yyguts_t
    {

    /* User-defined. Not touched by flex. */
    YY_EXTRA_TYPE yyextra_r;

    /* The rest are the same as the globals declared in the non-reentrant scanner. */
    FILE *yyin_r, *yyout_r;
    size_t yy_buffer_stack_top; /**< index of top of stack. */
    size_t yy_buffer_stack_max; /**< capacity of stack. */
    YY_BUFFER_STATE * yy_buffer_stack; /**< Stack as an array. */
    char yy_hold_char;
    int yy_n_chars;
    int yyleng_r;
    char *yy_c_buf_p;
    int yy_init;
    int yy_start;
    int yy_did_buffer_switch_on_eof;
    int yy_start_stack_ptr;
    int yy_start_stack_depth;
    int *yy_start_stack;
    yy_state_type yy_last_accepting_state;
    char* yy_last_accepting_cpos;

    int yylineno_r;
    int yy_flex_debug_r;

    char *yytext_r;
    int yy_more_flag;
    int yy_more_len;

    YYSTYPE * yylval_r;

    YYLTYPE * yylloc_r;

    }; /* end struct yyguts_t */

static int yy_init_globals (yyscan_t yyscanner );

    /* This must go here because YYSTYPE and YYLTYPE are included
     * from bison output in section 1.*/
    #    define yylval yyg->yylval_r
    
    #    define yylloc yyg->yylloc_r
    
int hsql_lex_init (yyscan_t* scanner);

int hsql_lex_init_extra (YY_EXTRA_TYPE user_defined,yyscan_t* scanner);

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int hsql_lex_destroy (yyscan_t yyscanner );

int hsql_get_debug (yyscan_t yyscanner );

void hsql_set_debug (int debug_flag ,yyscan_t yyscanner );

YY_EXTRA_TYPE hsql_get_extra (yyscan_t yyscanner );

void hsql_set_extra (YY_EXTRA_TYPE user_defined ,yyscan_t yyscanner );

FILE *hsql_get_in (yyscan_t yyscanner );

void hsql_set_in  (FILE * in_str ,yyscan_t yyscanner );

FILE *hsql_get_out (yyscan_t yyscanner );

void hsql_set_out  (FILE * out_str ,yyscan_t yyscanner );

int hsql_get_leng (yyscan_t yyscanner );

char *hsql_get_text (yyscan_t yyscanner );

int hsql_get_lineno (yyscan_t yyscanner );

void hsql_set_lineno (int line_number ,yyscan_t yyscanner );

YYSTYPE * hsql_get_lval (yyscan_t yyscanner );

void hsql_set_lval (YYSTYPE * yylval_param ,yyscan_t yyscanner );

       YYLTYPE *hsql_get_lloc (yyscan_t yyscanner );
    
        void hsql_set_lloc (YYLTYPE * yylloc_param ,yyscan_t yyscanner );
    
/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int hsql_wrap (yyscan_t yyscanner );
#else
extern int hsql_wrap (yyscan_t yyscanner );
#endif
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int ,yyscan_t yyscanner);
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * ,yyscan_t yyscanner);
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (yyscan_t yyscanner );
#else
static int input (yyscan_t yyscanner );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, yyleng, 1, yyout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, yyin))==0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg , yyscanner)
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int hsql_lex \
               (YYSTYPE * yylval_param,YYLTYPE * yylloc_param ,yyscan_t yyscanner);

#define YY_DECL int hsql_lex \
               (YYSTYPE * yylval_param, YYLTYPE * yylloc_param , yyscan_t yyscanner)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

#line 51 "flex_lexer.l"


#line 1874 "flex_lexer.cpp"

    yylval = yylval_param;

    yylloc = yylloc_param;

	if ( !yyg->yy_init )
		{
		yyg->yy_init = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yyg->yy_start )
			yyg->yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			hsql_ensure_buffer_stack (yyscanner);
			YY_CURRENT_BUFFER_LVALUE =
				hsql__create_buffer(yyin,YY_BUF_SIZE ,yyscanner);
		}

		hsql__load_buffer_state(yyscanner );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yyg->yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yyg->yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yyg->yy_start;
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				yyg->yy_last_accepting_state = yy_current_state;
				yyg->yy_last_accepting_cpos = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 944 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_current_state != 943 );
		yy_cp = yyg->yy_last_accepting_cpos;
		yy_current_state = yyg->yy_last_accepting_state;

yy_find_action:
		yy_act = yy_accept[yy_current_state];

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = yyg->yy_hold_char;
			yy_cp = yyg->yy_last_accepting_cpos;
			yy_current_state = yyg->yy_last_accepting_state;
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 53 "flex_lexer.l"
BEGIN(COMMENT);
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 54 "flex_lexer.l"
/* skipping comment content until a end of line is read */;
	YY_BREAK
case 3:
/* rule 3 can match eol */
YY_RULE_SETUP
#line 55 "flex_lexer.l"
BEGIN(INITIAL);
	YY_BREAK
case 4:
/* rule 4 can match eol */
YY_RULE_SETUP
#line 58 "flex_lexer.l"
/* skip whitespace */;
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 62 "flex_lexer.l"
TOKEN(DEALLOCATE)
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 63 "flex_lexer.l"
TOKEN(PARAMETERS)
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 64 "flex_lexer.l"
TOKEN(INTERSECT)
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 65 "flex_lexer.l"
TOKEN(TEMPORARY)
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 66 "flex_lexer.l"
TOKEN(TIMESTAMP)
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 67 "flex_lexer.l"
TOKEN(DISTINCT)
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 68 "flex_lexer.l"
TOKEN(NVARCHAR)
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 69 "flex_lexer.l"
TOKEN(RESTRICT)
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 70 "flex_lexer.l"
TOKEN(TRUNCATE)
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 71 "flex_lexer.l"
TOKEN(ANALYZE)
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 72 "flex_lexer.l"
TOKEN(BETWEEN)
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 73 "flex_lexer.l"
TOKEN(CASCADE)
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 74 "flex_lexer.l"
TOKEN(COLUMNS)
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 75 "flex_lexer.l"
TOKEN(CONTROL)
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 76 "flex_lexer.l"
TOKEN(DEFAULT)
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 77 "flex_lexer.l"
TOKEN(EXECUTE)
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 78 "flex_lexer.l"
TOKEN(EXPLAIN)
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 79 "flex_lexer.l"
TOKEN(HISTORY)
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 80 "flex_lexer.l"
TOKEN(INTEGER)
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 81 "flex_lexer.l"
TOKEN(NATURAL)
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 82 "flex_lexer.l"
TOKEN(PREPARE)
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 83 "flex_lexer.l"
TOKEN(PRIMARY)
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 84 "flex_lexer.l"
TOKEN(SCHEMAS)
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 85 "flex_lexer.l"
TOKEN(SPATIAL)
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 86 "flex_lexer.l"
TOKEN(VIRTUAL)
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 87 "flex_lexer.l"
TOKEN(BEFORE)
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 88 "flex_lexer.l"
TOKEN(COLUMN)
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 89 "flex_lexer.l"
TOKEN(CREATE)
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 90 "flex_lexer.l"
TOKEN(DELETE)
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 91 "flex_lexer.l"
TOKEN(DIRECT)
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 92 "flex_lexer.l"
TOKEN(DOUBLE)
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 93 "flex_lexer.l"
TOKEN(ESCAPE)
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 94 "flex_lexer.l"
TOKEN(EXCEPT)
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 95 "flex_lexer.l"
TOKEN(EXISTS)
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 96 "flex_lexer.l"
TOKEN(GLOBAL)
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 97 "flex_lexer.l"
TOKEN(HAVING)
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 98 "flex_lexer.l"
TOKEN(IMPORT)
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 99 "flex_lexer.l"
TOKEN(INSERT)
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 100 "flex_lexer.l"
TOKEN(ISNULL)
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 101 "flex_lexer.l"
TOKEN(OFFSET)
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 102 "flex_lexer.l"
TOKEN(RENAME)
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 103 "flex_lexer.l"
TOKEN(SCHEMA)
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 104 "flex_lexer.l"
TOKEN(SELECT)
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 105 "flex_lexer.l"
TOKEN(SORTED)
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 106 "flex_lexer.l"
TOKEN(TABLES)
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 107 "flex_lexer.l"
TOKEN(UNIQUE)
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 108 "flex_lexer.l"
TOKEN(UNLOAD)
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 109 "flex_lexer.l"
TOKEN(UPDATE)
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 110 "flex_lexer.l"
TOKEN(VALUES)
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 111 "flex_lexer.l"
TOKEN(AFTER)
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 112 "flex_lexer.l"
TOKEN(ALTER)
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 113 "flex_lexer.l"
TOKEN(CROSS)
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 114 "flex_lexer.l"
TOKEN(DELTA)
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 115 "flex_lexer.l"
TOKEN(GROUP)
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 116 "flex_lexer.l"
TOKEN(INDEX)
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 117 "flex_lexer.l"
TOKEN(INNER)
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 118 "flex_lexer.l"
TOKEN(LIMIT)
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 119 "flex_lexer.l"
TOKEN(LOCAL)
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 120 "flex_lexer.l"
TOKEN(MERGE)
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 121 "flex_lexer.l"
TOKEN(MINUS)
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 122 "flex_lexer.l"
TOKEN(ORDER)
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 123 "flex_lexer.l"
TOKEN(OUTER)
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 124 "flex_lexer.l"
TOKEN(RIGHT)
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 125 "flex_lexer.l"
TOKEN(TABLE)
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 126 "flex_lexer.l"
TOKEN(UNION)
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 127 "flex_lexer.l"
TOKEN(USING)
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 128 "flex_lexer.l"
TOKEN(WHERE)
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 129 "flex_lexer.l"
TOKEN(CALL)
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 130 "flex_lexer.l"
TOKEN(DATE)
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 131 "flex_lexer.l"
TOKEN(DESC)
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 132 "flex_lexer.l"
TOKEN(DROP)
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 133 "flex_lexer.l"
TOKEN(FILE)
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 134 "flex_lexer.l"
TOKEN(FROM)
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 135 "flex_lexer.l"
TOKEN(FULL)
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 136 "flex_lexer.l"
TOKEN(HASH)
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 137 "flex_lexer.l"
TOKEN(HINT)
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 138 "flex_lexer.l"
TOKEN(INTO)
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 139 "flex_lexer.l"
TOKEN(JOIN)
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 140 "flex_lexer.l"
TOKEN(LEFT)
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 141 "flex_lexer.l"
TOKEN(LIKE)
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 142 "flex_lexer.l"
TOKEN(LOAD)
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 143 "flex_lexer.l"
TOKEN(NULL)
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 144 "flex_lexer.l"
TOKEN(PART)
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 145 "flex_lexer.l"
TOKEN(PLAN)
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 146 "flex_lexer.l"
TOKEN(SHOW)
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 147 "flex_lexer.l"
TOKEN(TEXT)
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 148 "flex_lexer.l"
TOKEN(TIME)
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 149 "flex_lexer.l"
TOKEN(VIEW)
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 150 "flex_lexer.l"
TOKEN(WITH)
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 151 "flex_lexer.l"
TOKEN(ADD)
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 152 "flex_lexer.l"
TOKEN(ALL)
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 153 "flex_lexer.l"
TOKEN(AND)
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 154 "flex_lexer.l"
TOKEN(ASC)
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 155 "flex_lexer.l"
TOKEN(CSV)
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 156 "flex_lexer.l"
TOKEN(FOR)
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 157 "flex_lexer.l"
TOKEN(INT)
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 158 "flex_lexer.l"
TOKEN(KEY)
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 159 "flex_lexer.l"
TOKEN(NOT)
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 160 "flex_lexer.l"
TOKEN(OFF)
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 161 "flex_lexer.l"
TOKEN(SET)
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 162 "flex_lexer.l"
TOKEN(TBL)
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 163 "flex_lexer.l"
TOKEN(TOP)
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 164 "flex_lexer.l"
TOKEN(AS)
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 165 "flex_lexer.l"
TOKEN(BY)
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 166 "flex_lexer.l"
TOKEN(IF)
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 167 "flex_lexer.l"
TOKEN(IN)
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 168 "flex_lexer.l"
TOKEN(IS)
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 169 "flex_lexer.l"
TOKEN(OF)
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 170 "flex_lexer.l"
TOKEN(ON)
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 171 "flex_lexer.l"
TOKEN(OR)
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 172 "flex_lexer.l"
TOKEN(TO)
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 173 "flex_lexer.l"
TOKEN(DATABASE)
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 174 "flex_lexer.l"
TOKEN(DATABASES)
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 175 "flex_lexer.l"
TOKEN(VARCHAR)
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 176 "flex_lexer.l"
TOKEN(TINYINT)
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 177 "flex_lexer.l"
TOKEN(CHAR)
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 178 "flex_lexer.l"
TOKEN(USE)
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 179 "flex_lexer.l"
TOKEN(CHECK)
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 183 "flex_lexer.l"
TOKEN(NOTEQUALS)
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 184 "flex_lexer.l"
TOKEN(LESSEQ)
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 185 "flex_lexer.l"
TOKEN(GREATEREQ)
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 188 "flex_lexer.l"
{ return yytext[0]; }
	YY_BREAK
case 127:
#line 192 "flex_lexer.l"
case 128:
YY_RULE_SETUP
#line 192 "flex_lexer.l"
{
	yylval->fval = atof(yytext);
	return SQL_FLOATVAL;
}
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 197 "flex_lexer.l"
{
	yylval->ival = atol(yytext);
	return SQL_INTVAL;
}
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 202 "flex_lexer.l"
{
	// Crop the leading and trailing quote char
	yylval->sval = hsql::substr(yytext, 1, strlen(yytext)-1);
	return SQL_IDENTIFIER;
}
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 208 "flex_lexer.l"
{
	yylval->sval = strdup(yytext);
	return SQL_IDENTIFIER;
}
	YY_BREAK
case 132:
YY_RULE_SETUP
#line 214 "flex_lexer.l"
{
	// Crop the leading and trailing quote char
	yylval->sval = hsql::substr(yytext, 1, strlen(yytext)-1);
	return SQL_STRING;
}
	YY_BREAK
case 133:
YY_RULE_SETUP
#line 220 "flex_lexer.l"
{ fprintf(stderr, "[SQL-Lexer-Error] Unknown Character: %c\n", yytext[0]); return 0; }
	YY_BREAK
case 134:
YY_RULE_SETUP
#line 223 "flex_lexer.l"
ECHO;
	YY_BREAK
#line 2643 "flex_lexer.cpp"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(COMMENT):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yyg->yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yyg->yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * hsql_lex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yyg->yy_c_buf_p <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yyg->yy_c_buf_p = yyg->yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state( yyscanner );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state , yyscanner);

			yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yyg->yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yyg->yy_last_accepting_cpos;
				yy_current_state = yyg->yy_last_accepting_state;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer( yyscanner ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yyg->yy_did_buffer_switch_on_eof = 0;

				if ( hsql_wrap(yyscanner ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yyg->yy_c_buf_p = yyg->yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yyg->yy_c_buf_p =
					yyg->yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yyg->yy_c_buf_p =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars];

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of hsql_lex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = yyg->yytext_ptr;
	register int number_to_move, i;
	int ret_val;

	if ( yyg->yy_c_buf_p > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yyg->yy_c_buf_p - yyg->yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yyg->yy_c_buf_p - yyg->yytext_ptr) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

			int yy_c_buf_p_offset =
				(int) (yyg->yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					hsql_realloc((void *) b->yy_ch_buf,b->yy_buf_size + 2 ,yyscanner );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yyg->yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			yyg->yy_n_chars, (size_t) num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	if ( yyg->yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			hsql_restart(yyin  ,yyscanner);
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) (yyg->yy_n_chars + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = yyg->yy_n_chars + number_to_move + (yyg->yy_n_chars >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) hsql_realloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size ,yyscanner );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	yyg->yy_n_chars += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yyg->yytext_ptr = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (yyscan_t yyscanner)
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	yy_current_state = yyg->yy_start;

	for ( yy_cp = yyg->yytext_ptr + YY_MORE_ADJ; yy_cp < yyg->yy_c_buf_p; ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			yyg->yy_last_accepting_state = yy_current_state;
			yyg->yy_last_accepting_cpos = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 944 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state , yyscan_t yyscanner)
{
	register int yy_is_jam;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner; /* This var may be unused depending upon options. */
	register char *yy_cp = yyg->yy_c_buf_p;

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		yyg->yy_last_accepting_state = yy_current_state;
		yyg->yy_last_accepting_cpos = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 944 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 943);

	return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (yyscan_t yyscanner)
#else
    static int input  (yyscan_t yyscanner)
#endif

{
	int c;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	*yyg->yy_c_buf_p = yyg->yy_hold_char;

	if ( *yyg->yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yyg->yy_c_buf_p < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			/* This was really a NUL. */
			*yyg->yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = yyg->yy_c_buf_p - yyg->yytext_ptr;
			++yyg->yy_c_buf_p;

			switch ( yy_get_next_buffer( yyscanner ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					hsql_restart(yyin ,yyscanner);

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( hsql_wrap(yyscanner ) )
						return EOF;

					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput(yyscanner);
#else
					return input(yyscanner);
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yyg->yy_c_buf_p = yyg->yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yyg->yy_c_buf_p;	/* cast for 8-bit char's */
	*yyg->yy_c_buf_p = '\0';	/* preserve yytext */
	yyg->yy_hold_char = *++yyg->yy_c_buf_p;

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * @param yyscanner The scanner object.
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void hsql_restart  (FILE * input_file , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! YY_CURRENT_BUFFER ){
        hsql_ensure_buffer_stack (yyscanner);
		YY_CURRENT_BUFFER_LVALUE =
            hsql__create_buffer(yyin,YY_BUF_SIZE ,yyscanner);
	}

	hsql__init_buffer(YY_CURRENT_BUFFER,input_file ,yyscanner);
	hsql__load_buffer_state(yyscanner );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * @param yyscanner The scanner object.
 */
    void hsql__switch_to_buffer  (YY_BUFFER_STATE  new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	/* TODO. We should be able to replace this entire function body
	 * with
	 *		hsql_pop_buffer_state();
	 *		hsql_push_buffer_state(new_buffer);
     */
	hsql_ensure_buffer_stack (yyscanner);
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	hsql__load_buffer_state(yyscanner );

	/* We don't actually know whether we did this switch during
	 * EOF (hsql_wrap()) processing, but the only time this flag
	 * is looked at is after hsql_wrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yyg->yy_did_buffer_switch_on_eof = 1;
}

static void hsql__load_buffer_state  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	yyg->yytext_ptr = yyg->yy_c_buf_p = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	yyg->yy_hold_char = *yyg->yy_c_buf_p;
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * @param yyscanner The scanner object.
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE hsql__create_buffer  (FILE * file, int  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) hsql_alloc(sizeof( struct yy_buffer_state ) ,yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in hsql__create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) hsql_alloc(b->yy_buf_size + 2 ,yyscanner );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in hsql__create_buffer()" );

	b->yy_is_our_buffer = 1;

	hsql__init_buffer(b,file ,yyscanner);

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with hsql__create_buffer()
 * @param yyscanner The scanner object.
 */
    void hsql__delete_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		hsql_free((void *) b->yy_ch_buf ,yyscanner );

	hsql_free((void *) b ,yyscanner );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a hsql_restart() or at EOF.
 */
    static void hsql__init_buffer  (YY_BUFFER_STATE  b, FILE * file , yyscan_t yyscanner)

{
	int oerrno = errno;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	hsql__flush_buffer(b ,yyscanner);

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then hsql__init_buffer was _probably_
     * called from hsql_restart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * @param yyscanner The scanner object.
 */
    void hsql__flush_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		hsql__load_buffer_state(yyscanner );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  @param yyscanner The scanner object.
 */
void hsql_push_buffer_state (YY_BUFFER_STATE new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (new_buffer == NULL)
		return;

	hsql_ensure_buffer_stack(yyscanner);

	/* This block is copied from hsql__switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		yyg->yy_buffer_stack_top++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from hsql__switch_to_buffer. */
	hsql__load_buffer_state(yyscanner );
	yyg->yy_did_buffer_switch_on_eof = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  @param yyscanner The scanner object.
 */
void hsql_pop_buffer_state (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (!YY_CURRENT_BUFFER)
		return;

	hsql__delete_buffer(YY_CURRENT_BUFFER ,yyscanner);
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if (yyg->yy_buffer_stack_top > 0)
		--yyg->yy_buffer_stack_top;

	if (YY_CURRENT_BUFFER) {
		hsql__load_buffer_state(yyscanner );
		yyg->yy_did_buffer_switch_on_eof = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void hsql_ensure_buffer_stack (yyscan_t yyscanner)
{
	int num_to_alloc;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if (!yyg->yy_buffer_stack) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		yyg->yy_buffer_stack = (struct yy_buffer_state**)hsql_alloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in hsql_ensure_buffer_stack()" );
								  
		memset(yyg->yy_buffer_stack, 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		yyg->yy_buffer_stack_max = num_to_alloc;
		yyg->yy_buffer_stack_top = 0;
		return;
	}

	if (yyg->yy_buffer_stack_top >= (yyg->yy_buffer_stack_max) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = yyg->yy_buffer_stack_max + grow_size;
		yyg->yy_buffer_stack = (struct yy_buffer_state**)hsql_realloc
								(yyg->yy_buffer_stack,
								num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in hsql_ensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset(yyg->yy_buffer_stack + yyg->yy_buffer_stack_max, 0, grow_size * sizeof(struct yy_buffer_state*));
		yyg->yy_buffer_stack_max = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE hsql__scan_buffer  (char * base, yy_size_t  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) hsql_alloc(sizeof( struct yy_buffer_state ) ,yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in hsql__scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	hsql__switch_to_buffer(b ,yyscanner );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to hsql_lex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       hsql__scan_bytes() instead.
 */
YY_BUFFER_STATE hsql__scan_string (yyconst char * yystr , yyscan_t yyscanner)
{
    
	return hsql__scan_bytes(yystr,strlen(yystr) ,yyscanner);
}

/** Setup the input buffer state to scan the given bytes. The next call to hsql_lex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE hsql__scan_bytes  (yyconst char * yybytes, int  _yybytes_len , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) hsql_alloc(n ,yyscanner );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in hsql__scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = hsql__scan_buffer(buf,n ,yyscanner);
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in hsql__scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg , yyscan_t yyscanner)
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = yyg->yy_hold_char; \
		yyg->yy_c_buf_p = yytext + yyless_macro_arg; \
		yyg->yy_hold_char = *yyg->yy_c_buf_p; \
		*yyg->yy_c_buf_p = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the user-defined data for this scanner.
 * @param yyscanner The scanner object.
 */
YY_EXTRA_TYPE hsql_get_extra  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyextra;
}

/** Get the current line number.
 * @param yyscanner The scanner object.
 */
int hsql_get_lineno  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    
        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yylineno;
}

/** Get the current column number.
 * @param yyscanner The scanner object.
 */
int hsql_get_column  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    
        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yycolumn;
}

/** Get the input stream.
 * @param yyscanner The scanner object.
 */
FILE *hsql_get_in  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyin;
}

/** Get the output stream.
 * @param yyscanner The scanner object.
 */
FILE *hsql_get_out  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyout;
}

/** Get the length of the current token.
 * @param yyscanner The scanner object.
 */
int hsql_get_leng  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyleng;
}

/** Get the current token.
 * @param yyscanner The scanner object.
 */

char *hsql_get_text  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yytext;
}

/** Set the user-defined data. This data is never touched by the scanner.
 * @param user_defined The data to be associated with this scanner.
 * @param yyscanner The scanner object.
 */
void hsql_set_extra (YY_EXTRA_TYPE  user_defined , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyextra = user_defined ;
}

/** Set the current line number.
 * @param line_number
 * @param yyscanner The scanner object.
 */
void hsql_set_lineno (int  line_number , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* lineno is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           yy_fatal_error( "hsql_set_lineno called with no buffer" , yyscanner); 
    
    yylineno = line_number;
}

/** Set the current column.
 * @param line_number
 * @param yyscanner The scanner object.
 */
void hsql_set_column (int  column_no , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* column is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           yy_fatal_error( "hsql_set_column called with no buffer" , yyscanner); 
    
    yycolumn = column_no;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * @param yyscanner The scanner object.
 * @see hsql__switch_to_buffer
 */
void hsql_set_in (FILE *  in_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyin = in_str ;
}

void hsql_set_out (FILE *  out_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyout = out_str ;
}

int hsql_get_debug  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yy_flex_debug;
}

void hsql_set_debug (int  bdebug , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yy_flex_debug = bdebug ;
}

/* Accessor methods for yylval and yylloc */

YYSTYPE * hsql_get_lval  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yylval;
}

void hsql_set_lval (YYSTYPE *  yylval_param , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yylval = yylval_param;
}

YYLTYPE *hsql_get_lloc  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yylloc;
}
    
void hsql_set_lloc (YYLTYPE *  yylloc_param , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yylloc = yylloc_param;
}
    
/* User-visible API */

/* hsql_lex_init is special because it creates the scanner itself, so it is
 * the ONLY reentrant function that doesn't take the scanner as the last argument.
 * That's why we explicitly handle the declaration, instead of using our macros.
 */

int hsql_lex_init(yyscan_t* ptr_yy_globals)

{
    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) hsql_alloc ( sizeof( struct yyguts_t ), NULL );

    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));

    return yy_init_globals ( *ptr_yy_globals );
}

/* hsql_lex_init_extra has the same functionality as hsql_lex_init, but follows the
 * convention of taking the scanner as the last argument. Note however, that
 * this is a *pointer* to a scanner, as it will be allocated by this call (and
 * is the reason, too, why this function also must handle its own declaration).
 * The user defined value in the first argument will be available to hsql_alloc in
 * the yyextra field.
 */

int hsql_lex_init_extra(YY_EXTRA_TYPE yy_user_defined,yyscan_t* ptr_yy_globals )

{
    struct yyguts_t dummy_yyguts;

    hsql_set_extra (yy_user_defined, &dummy_yyguts);

    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }
	
    *ptr_yy_globals = (yyscan_t) hsql_alloc ( sizeof( struct yyguts_t ), &dummy_yyguts );
	
    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }
    
    /* By setting to 0xAA, we expose bugs in
    yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));
    
    hsql_set_extra (yy_user_defined, *ptr_yy_globals);
    
    return yy_init_globals ( *ptr_yy_globals );
}

static int yy_init_globals (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from hsql_lex_destroy(), so don't allocate here.
     */

    yyg->yy_buffer_stack = 0;
    yyg->yy_buffer_stack_top = 0;
    yyg->yy_buffer_stack_max = 0;
    yyg->yy_c_buf_p = (char *) 0;
    yyg->yy_init = 0;
    yyg->yy_start = 0;

    yyg->yy_start_stack_ptr = 0;
    yyg->yy_start_stack_depth = 0;
    yyg->yy_start_stack =  NULL;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = (FILE *) 0;
    yyout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * hsql_lex_init()
     */
    return 0;
}

/* hsql_lex_destroy is for both reentrant and non-reentrant scanners. */
int hsql_lex_destroy  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		hsql__delete_buffer(YY_CURRENT_BUFFER ,yyscanner );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		hsql_pop_buffer_state(yyscanner);
	}

	/* Destroy the stack itself. */
	hsql_free(yyg->yy_buffer_stack ,yyscanner);
	yyg->yy_buffer_stack = NULL;

    /* Destroy the start condition stack. */
        hsql_free(yyg->yy_start_stack ,yyscanner );
        yyg->yy_start_stack = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * hsql_lex() is called, initialization will occur. */
    yy_init_globals( yyscanner);

    /* Destroy the main struct (reentrant only). */
    hsql_free ( yyscanner , yyscanner );
    yyscanner = NULL;
    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n , yyscan_t yyscanner)
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s , yyscan_t yyscanner)
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *hsql_alloc (yy_size_t  size , yyscan_t yyscanner)
{
	return (void *) malloc( size );
}

void *hsql_realloc  (void * ptr, yy_size_t  size , yyscan_t yyscanner)
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void hsql_free (void * ptr , yyscan_t yyscanner)
{
	free( (char *) ptr );	/* see hsql_realloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 223 "flex_lexer.l"


/***************************
 ** Section 3: User code
 ***************************/

int yyerror(const char *msg) {
    fprintf(stderr, "[SQL-Lexer-Error] %s\n",msg); return 0;
}

